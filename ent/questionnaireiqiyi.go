// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ohdat/entmod/ent/questionnaireiqiyi"
)

// QuestionnaireIqiyi is the model entity for the QuestionnaireIqiyi schema.
type QuestionnaireIqiyi struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// wallet address
	WalletAddress string `json:"wallet_address,omitempty"`
	// twitter 主页
	TwitterURL string `json:"twitter_url,omitempty"`
	// invite code
	InviteCode string `json:"invite_code,omitempty"`
	// question 1
	Q1 string `json:"q1,omitempty"`
	// question 2
	Q2 string `json:"q2,omitempty"`
	// question 3
	Q3 string `json:"q3,omitempty"`
	// question 4
	Q4 string `json:"q4,omitempty"`
	// question 5
	Q5 string `json:"q5,omitempty"`
	// question 6
	Q6 string `json:"q6,omitempty"`
	// question 7
	Q7 string `json:"q7,omitempty"`
	// eth 余额
	Balance string `json:"balance,omitempty"`
	// nft-数量
	Amount int32 `json:"amount,omitempty"`
	// 交易总数
	TransactionCount int32 `json:"transaction_count,omitempty"`
	// 0 未反馈 1反馈通过 2未通过
	Answer int8 `json:"answer,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QuestionnaireIqiyi) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case questionnaireiqiyi.FieldID, questionnaireiqiyi.FieldAmount, questionnaireiqiyi.FieldTransactionCount, questionnaireiqiyi.FieldAnswer:
			values[i] = new(sql.NullInt64)
		case questionnaireiqiyi.FieldWalletAddress, questionnaireiqiyi.FieldTwitterURL, questionnaireiqiyi.FieldInviteCode, questionnaireiqiyi.FieldQ1, questionnaireiqiyi.FieldQ2, questionnaireiqiyi.FieldQ3, questionnaireiqiyi.FieldQ4, questionnaireiqiyi.FieldQ5, questionnaireiqiyi.FieldQ6, questionnaireiqiyi.FieldQ7, questionnaireiqiyi.FieldBalance:
			values[i] = new(sql.NullString)
		case questionnaireiqiyi.FieldUpdatedAt, questionnaireiqiyi.FieldDeletedAt, questionnaireiqiyi.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type QuestionnaireIqiyi", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QuestionnaireIqiyi fields.
func (qi *QuestionnaireIqiyi) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case questionnaireiqiyi.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			qi.ID = int32(value.Int64)
		case questionnaireiqiyi.FieldWalletAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wallet_address", values[i])
			} else if value.Valid {
				qi.WalletAddress = value.String
			}
		case questionnaireiqiyi.FieldTwitterURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field twitter_url", values[i])
			} else if value.Valid {
				qi.TwitterURL = value.String
			}
		case questionnaireiqiyi.FieldInviteCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invite_code", values[i])
			} else if value.Valid {
				qi.InviteCode = value.String
			}
		case questionnaireiqiyi.FieldQ1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field q1", values[i])
			} else if value.Valid {
				qi.Q1 = value.String
			}
		case questionnaireiqiyi.FieldQ2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field q2", values[i])
			} else if value.Valid {
				qi.Q2 = value.String
			}
		case questionnaireiqiyi.FieldQ3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field q3", values[i])
			} else if value.Valid {
				qi.Q3 = value.String
			}
		case questionnaireiqiyi.FieldQ4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field q4", values[i])
			} else if value.Valid {
				qi.Q4 = value.String
			}
		case questionnaireiqiyi.FieldQ5:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field q5", values[i])
			} else if value.Valid {
				qi.Q5 = value.String
			}
		case questionnaireiqiyi.FieldQ6:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field q6", values[i])
			} else if value.Valid {
				qi.Q6 = value.String
			}
		case questionnaireiqiyi.FieldQ7:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field q7", values[i])
			} else if value.Valid {
				qi.Q7 = value.String
			}
		case questionnaireiqiyi.FieldBalance:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				qi.Balance = value.String
			}
		case questionnaireiqiyi.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				qi.Amount = int32(value.Int64)
			}
		case questionnaireiqiyi.FieldTransactionCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_count", values[i])
			} else if value.Valid {
				qi.TransactionCount = int32(value.Int64)
			}
		case questionnaireiqiyi.FieldAnswer:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field answer", values[i])
			} else if value.Valid {
				qi.Answer = int8(value.Int64)
			}
		case questionnaireiqiyi.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				qi.UpdatedAt = value.Time
			}
		case questionnaireiqiyi.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				qi.DeletedAt = value.Time
			}
		case questionnaireiqiyi.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				qi.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this QuestionnaireIqiyi.
// Note that you need to call QuestionnaireIqiyi.Unwrap() before calling this method if this QuestionnaireIqiyi
// was returned from a transaction, and the transaction was committed or rolled back.
func (qi *QuestionnaireIqiyi) Update() *QuestionnaireIqiyiUpdateOne {
	return (&QuestionnaireIqiyiClient{config: qi.config}).UpdateOne(qi)
}

// Unwrap unwraps the QuestionnaireIqiyi entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (qi *QuestionnaireIqiyi) Unwrap() *QuestionnaireIqiyi {
	_tx, ok := qi.config.driver.(*txDriver)
	if !ok {
		panic("ent: QuestionnaireIqiyi is not a transactional entity")
	}
	qi.config.driver = _tx.drv
	return qi
}

// String implements the fmt.Stringer.
func (qi *QuestionnaireIqiyi) String() string {
	var builder strings.Builder
	builder.WriteString("QuestionnaireIqiyi(")
	builder.WriteString(fmt.Sprintf("id=%v, ", qi.ID))
	builder.WriteString("wallet_address=")
	builder.WriteString(qi.WalletAddress)
	builder.WriteString(", ")
	builder.WriteString("twitter_url=")
	builder.WriteString(qi.TwitterURL)
	builder.WriteString(", ")
	builder.WriteString("invite_code=")
	builder.WriteString(qi.InviteCode)
	builder.WriteString(", ")
	builder.WriteString("q1=")
	builder.WriteString(qi.Q1)
	builder.WriteString(", ")
	builder.WriteString("q2=")
	builder.WriteString(qi.Q2)
	builder.WriteString(", ")
	builder.WriteString("q3=")
	builder.WriteString(qi.Q3)
	builder.WriteString(", ")
	builder.WriteString("q4=")
	builder.WriteString(qi.Q4)
	builder.WriteString(", ")
	builder.WriteString("q5=")
	builder.WriteString(qi.Q5)
	builder.WriteString(", ")
	builder.WriteString("q6=")
	builder.WriteString(qi.Q6)
	builder.WriteString(", ")
	builder.WriteString("q7=")
	builder.WriteString(qi.Q7)
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(qi.Balance)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", qi.Amount))
	builder.WriteString(", ")
	builder.WriteString("transaction_count=")
	builder.WriteString(fmt.Sprintf("%v", qi.TransactionCount))
	builder.WriteString(", ")
	builder.WriteString("answer=")
	builder.WriteString(fmt.Sprintf("%v", qi.Answer))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(qi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(qi.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(qi.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// QuestionnaireIqiyis is a parsable slice of QuestionnaireIqiyi.
type QuestionnaireIqiyis []*QuestionnaireIqiyi

func (qi QuestionnaireIqiyis) config(cfg config) {
	for _i := range qi {
		qi[_i].config = cfg
	}
}
