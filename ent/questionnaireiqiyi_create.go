// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ohdat/entmod/ent/questionnaireiqiyi"
)

// QuestionnaireIqiyiCreate is the builder for creating a QuestionnaireIqiyi entity.
type QuestionnaireIqiyiCreate struct {
	config
	mutation *QuestionnaireIqiyiMutation
	hooks    []Hook
}

// SetWalletAddress sets the "wallet_address" field.
func (qic *QuestionnaireIqiyiCreate) SetWalletAddress(s string) *QuestionnaireIqiyiCreate {
	qic.mutation.SetWalletAddress(s)
	return qic
}

// SetTwitterURL sets the "twitter_url" field.
func (qic *QuestionnaireIqiyiCreate) SetTwitterURL(s string) *QuestionnaireIqiyiCreate {
	qic.mutation.SetTwitterURL(s)
	return qic
}

// SetInviteCode sets the "invite_code" field.
func (qic *QuestionnaireIqiyiCreate) SetInviteCode(s string) *QuestionnaireIqiyiCreate {
	qic.mutation.SetInviteCode(s)
	return qic
}

// SetQ1 sets the "q1" field.
func (qic *QuestionnaireIqiyiCreate) SetQ1(s string) *QuestionnaireIqiyiCreate {
	qic.mutation.SetQ1(s)
	return qic
}

// SetQ2 sets the "q2" field.
func (qic *QuestionnaireIqiyiCreate) SetQ2(s string) *QuestionnaireIqiyiCreate {
	qic.mutation.SetQ2(s)
	return qic
}

// SetQ3 sets the "q3" field.
func (qic *QuestionnaireIqiyiCreate) SetQ3(s string) *QuestionnaireIqiyiCreate {
	qic.mutation.SetQ3(s)
	return qic
}

// SetQ4 sets the "q4" field.
func (qic *QuestionnaireIqiyiCreate) SetQ4(s string) *QuestionnaireIqiyiCreate {
	qic.mutation.SetQ4(s)
	return qic
}

// SetQ5 sets the "q5" field.
func (qic *QuestionnaireIqiyiCreate) SetQ5(s string) *QuestionnaireIqiyiCreate {
	qic.mutation.SetQ5(s)
	return qic
}

// SetQ6 sets the "q6" field.
func (qic *QuestionnaireIqiyiCreate) SetQ6(s string) *QuestionnaireIqiyiCreate {
	qic.mutation.SetQ6(s)
	return qic
}

// SetQ7 sets the "q7" field.
func (qic *QuestionnaireIqiyiCreate) SetQ7(s string) *QuestionnaireIqiyiCreate {
	qic.mutation.SetQ7(s)
	return qic
}

// SetBalance sets the "balance" field.
func (qic *QuestionnaireIqiyiCreate) SetBalance(s string) *QuestionnaireIqiyiCreate {
	qic.mutation.SetBalance(s)
	return qic
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (qic *QuestionnaireIqiyiCreate) SetNillableBalance(s *string) *QuestionnaireIqiyiCreate {
	if s != nil {
		qic.SetBalance(*s)
	}
	return qic
}

// SetAmount sets the "amount" field.
func (qic *QuestionnaireIqiyiCreate) SetAmount(i int32) *QuestionnaireIqiyiCreate {
	qic.mutation.SetAmount(i)
	return qic
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (qic *QuestionnaireIqiyiCreate) SetNillableAmount(i *int32) *QuestionnaireIqiyiCreate {
	if i != nil {
		qic.SetAmount(*i)
	}
	return qic
}

// SetTransactionCount sets the "transaction_count" field.
func (qic *QuestionnaireIqiyiCreate) SetTransactionCount(i int32) *QuestionnaireIqiyiCreate {
	qic.mutation.SetTransactionCount(i)
	return qic
}

// SetNillableTransactionCount sets the "transaction_count" field if the given value is not nil.
func (qic *QuestionnaireIqiyiCreate) SetNillableTransactionCount(i *int32) *QuestionnaireIqiyiCreate {
	if i != nil {
		qic.SetTransactionCount(*i)
	}
	return qic
}

// SetAnswer sets the "answer" field.
func (qic *QuestionnaireIqiyiCreate) SetAnswer(i int8) *QuestionnaireIqiyiCreate {
	qic.mutation.SetAnswer(i)
	return qic
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (qic *QuestionnaireIqiyiCreate) SetNillableAnswer(i *int8) *QuestionnaireIqiyiCreate {
	if i != nil {
		qic.SetAnswer(*i)
	}
	return qic
}

// SetUpdatedAt sets the "updated_at" field.
func (qic *QuestionnaireIqiyiCreate) SetUpdatedAt(t time.Time) *QuestionnaireIqiyiCreate {
	qic.mutation.SetUpdatedAt(t)
	return qic
}

// SetDeletedAt sets the "deleted_at" field.
func (qic *QuestionnaireIqiyiCreate) SetDeletedAt(t time.Time) *QuestionnaireIqiyiCreate {
	qic.mutation.SetDeletedAt(t)
	return qic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qic *QuestionnaireIqiyiCreate) SetNillableDeletedAt(t *time.Time) *QuestionnaireIqiyiCreate {
	if t != nil {
		qic.SetDeletedAt(*t)
	}
	return qic
}

// SetCreatedAt sets the "created_at" field.
func (qic *QuestionnaireIqiyiCreate) SetCreatedAt(t time.Time) *QuestionnaireIqiyiCreate {
	qic.mutation.SetCreatedAt(t)
	return qic
}

// SetID sets the "id" field.
func (qic *QuestionnaireIqiyiCreate) SetID(i int32) *QuestionnaireIqiyiCreate {
	qic.mutation.SetID(i)
	return qic
}

// Mutation returns the QuestionnaireIqiyiMutation object of the builder.
func (qic *QuestionnaireIqiyiCreate) Mutation() *QuestionnaireIqiyiMutation {
	return qic.mutation
}

// Save creates the QuestionnaireIqiyi in the database.
func (qic *QuestionnaireIqiyiCreate) Save(ctx context.Context) (*QuestionnaireIqiyi, error) {
	var (
		err  error
		node *QuestionnaireIqiyi
	)
	if len(qic.hooks) == 0 {
		if err = qic.check(); err != nil {
			return nil, err
		}
		node, err = qic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuestionnaireIqiyiMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = qic.check(); err != nil {
				return nil, err
			}
			qic.mutation = mutation
			if node, err = qic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(qic.hooks) - 1; i >= 0; i-- {
			if qic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = qic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, qic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*QuestionnaireIqiyi)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from QuestionnaireIqiyiMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (qic *QuestionnaireIqiyiCreate) SaveX(ctx context.Context) *QuestionnaireIqiyi {
	v, err := qic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qic *QuestionnaireIqiyiCreate) Exec(ctx context.Context) error {
	_, err := qic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qic *QuestionnaireIqiyiCreate) ExecX(ctx context.Context) {
	if err := qic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qic *QuestionnaireIqiyiCreate) check() error {
	if _, ok := qic.mutation.WalletAddress(); !ok {
		return &ValidationError{Name: "wallet_address", err: errors.New(`ent: missing required field "QuestionnaireIqiyi.wallet_address"`)}
	}
	if _, ok := qic.mutation.TwitterURL(); !ok {
		return &ValidationError{Name: "twitter_url", err: errors.New(`ent: missing required field "QuestionnaireIqiyi.twitter_url"`)}
	}
	if _, ok := qic.mutation.InviteCode(); !ok {
		return &ValidationError{Name: "invite_code", err: errors.New(`ent: missing required field "QuestionnaireIqiyi.invite_code"`)}
	}
	if _, ok := qic.mutation.Q1(); !ok {
		return &ValidationError{Name: "q1", err: errors.New(`ent: missing required field "QuestionnaireIqiyi.q1"`)}
	}
	if _, ok := qic.mutation.Q2(); !ok {
		return &ValidationError{Name: "q2", err: errors.New(`ent: missing required field "QuestionnaireIqiyi.q2"`)}
	}
	if _, ok := qic.mutation.Q3(); !ok {
		return &ValidationError{Name: "q3", err: errors.New(`ent: missing required field "QuestionnaireIqiyi.q3"`)}
	}
	if _, ok := qic.mutation.Q4(); !ok {
		return &ValidationError{Name: "q4", err: errors.New(`ent: missing required field "QuestionnaireIqiyi.q4"`)}
	}
	if _, ok := qic.mutation.Q5(); !ok {
		return &ValidationError{Name: "q5", err: errors.New(`ent: missing required field "QuestionnaireIqiyi.q5"`)}
	}
	if _, ok := qic.mutation.Q6(); !ok {
		return &ValidationError{Name: "q6", err: errors.New(`ent: missing required field "QuestionnaireIqiyi.q6"`)}
	}
	if _, ok := qic.mutation.Q7(); !ok {
		return &ValidationError{Name: "q7", err: errors.New(`ent: missing required field "QuestionnaireIqiyi.q7"`)}
	}
	if _, ok := qic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "QuestionnaireIqiyi.updated_at"`)}
	}
	if _, ok := qic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "QuestionnaireIqiyi.created_at"`)}
	}
	return nil
}

func (qic *QuestionnaireIqiyiCreate) sqlSave(ctx context.Context) (*QuestionnaireIqiyi, error) {
	_node, _spec := qic.createSpec()
	if err := sqlgraph.CreateNode(ctx, qic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	return _node, nil
}

func (qic *QuestionnaireIqiyiCreate) createSpec() (*QuestionnaireIqiyi, *sqlgraph.CreateSpec) {
	var (
		_node = &QuestionnaireIqiyi{config: qic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: questionnaireiqiyi.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: questionnaireiqiyi.FieldID,
			},
		}
	)
	if id, ok := qic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := qic.mutation.WalletAddress(); ok {
		_spec.SetField(questionnaireiqiyi.FieldWalletAddress, field.TypeString, value)
		_node.WalletAddress = value
	}
	if value, ok := qic.mutation.TwitterURL(); ok {
		_spec.SetField(questionnaireiqiyi.FieldTwitterURL, field.TypeString, value)
		_node.TwitterURL = value
	}
	if value, ok := qic.mutation.InviteCode(); ok {
		_spec.SetField(questionnaireiqiyi.FieldInviteCode, field.TypeString, value)
		_node.InviteCode = value
	}
	if value, ok := qic.mutation.Q1(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ1, field.TypeString, value)
		_node.Q1 = value
	}
	if value, ok := qic.mutation.Q2(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ2, field.TypeString, value)
		_node.Q2 = value
	}
	if value, ok := qic.mutation.Q3(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ3, field.TypeString, value)
		_node.Q3 = value
	}
	if value, ok := qic.mutation.Q4(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ4, field.TypeString, value)
		_node.Q4 = value
	}
	if value, ok := qic.mutation.Q5(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ5, field.TypeString, value)
		_node.Q5 = value
	}
	if value, ok := qic.mutation.Q6(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ6, field.TypeString, value)
		_node.Q6 = value
	}
	if value, ok := qic.mutation.Q7(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ7, field.TypeString, value)
		_node.Q7 = value
	}
	if value, ok := qic.mutation.Balance(); ok {
		_spec.SetField(questionnaireiqiyi.FieldBalance, field.TypeString, value)
		_node.Balance = value
	}
	if value, ok := qic.mutation.Amount(); ok {
		_spec.SetField(questionnaireiqiyi.FieldAmount, field.TypeInt32, value)
		_node.Amount = value
	}
	if value, ok := qic.mutation.TransactionCount(); ok {
		_spec.SetField(questionnaireiqiyi.FieldTransactionCount, field.TypeInt32, value)
		_node.TransactionCount = value
	}
	if value, ok := qic.mutation.Answer(); ok {
		_spec.SetField(questionnaireiqiyi.FieldAnswer, field.TypeInt8, value)
		_node.Answer = value
	}
	if value, ok := qic.mutation.UpdatedAt(); ok {
		_spec.SetField(questionnaireiqiyi.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := qic.mutation.DeletedAt(); ok {
		_spec.SetField(questionnaireiqiyi.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := qic.mutation.CreatedAt(); ok {
		_spec.SetField(questionnaireiqiyi.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// QuestionnaireIqiyiCreateBulk is the builder for creating many QuestionnaireIqiyi entities in bulk.
type QuestionnaireIqiyiCreateBulk struct {
	config
	builders []*QuestionnaireIqiyiCreate
}

// Save creates the QuestionnaireIqiyi entities in the database.
func (qicb *QuestionnaireIqiyiCreateBulk) Save(ctx context.Context) ([]*QuestionnaireIqiyi, error) {
	specs := make([]*sqlgraph.CreateSpec, len(qicb.builders))
	nodes := make([]*QuestionnaireIqiyi, len(qicb.builders))
	mutators := make([]Mutator, len(qicb.builders))
	for i := range qicb.builders {
		func(i int, root context.Context) {
			builder := qicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionnaireIqiyiMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qicb *QuestionnaireIqiyiCreateBulk) SaveX(ctx context.Context) []*QuestionnaireIqiyi {
	v, err := qicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qicb *QuestionnaireIqiyiCreateBulk) Exec(ctx context.Context) error {
	_, err := qicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qicb *QuestionnaireIqiyiCreateBulk) ExecX(ctx context.Context) {
	if err := qicb.Exec(ctx); err != nil {
		panic(err)
	}
}
