// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ohdat/entmod/ent/predicate"
	"github.com/ohdat/entmod/ent/questionnaireiqiyi"
)

// QuestionnaireIqiyiUpdate is the builder for updating QuestionnaireIqiyi entities.
type QuestionnaireIqiyiUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionnaireIqiyiMutation
}

// Where appends a list predicates to the QuestionnaireIqiyiUpdate builder.
func (qiu *QuestionnaireIqiyiUpdate) Where(ps ...predicate.QuestionnaireIqiyi) *QuestionnaireIqiyiUpdate {
	qiu.mutation.Where(ps...)
	return qiu
}

// SetWalletAddress sets the "wallet_address" field.
func (qiu *QuestionnaireIqiyiUpdate) SetWalletAddress(s string) *QuestionnaireIqiyiUpdate {
	qiu.mutation.SetWalletAddress(s)
	return qiu
}

// SetTwitterURL sets the "twitter_url" field.
func (qiu *QuestionnaireIqiyiUpdate) SetTwitterURL(s string) *QuestionnaireIqiyiUpdate {
	qiu.mutation.SetTwitterURL(s)
	return qiu
}

// SetInviteCode sets the "invite_code" field.
func (qiu *QuestionnaireIqiyiUpdate) SetInviteCode(s string) *QuestionnaireIqiyiUpdate {
	qiu.mutation.SetInviteCode(s)
	return qiu
}

// SetQ1 sets the "q1" field.
func (qiu *QuestionnaireIqiyiUpdate) SetQ1(s string) *QuestionnaireIqiyiUpdate {
	qiu.mutation.SetQ1(s)
	return qiu
}

// SetQ2 sets the "q2" field.
func (qiu *QuestionnaireIqiyiUpdate) SetQ2(s string) *QuestionnaireIqiyiUpdate {
	qiu.mutation.SetQ2(s)
	return qiu
}

// SetQ3 sets the "q3" field.
func (qiu *QuestionnaireIqiyiUpdate) SetQ3(s string) *QuestionnaireIqiyiUpdate {
	qiu.mutation.SetQ3(s)
	return qiu
}

// SetQ4 sets the "q4" field.
func (qiu *QuestionnaireIqiyiUpdate) SetQ4(s string) *QuestionnaireIqiyiUpdate {
	qiu.mutation.SetQ4(s)
	return qiu
}

// SetQ5 sets the "q5" field.
func (qiu *QuestionnaireIqiyiUpdate) SetQ5(s string) *QuestionnaireIqiyiUpdate {
	qiu.mutation.SetQ5(s)
	return qiu
}

// SetQ6 sets the "q6" field.
func (qiu *QuestionnaireIqiyiUpdate) SetQ6(s string) *QuestionnaireIqiyiUpdate {
	qiu.mutation.SetQ6(s)
	return qiu
}

// SetQ7 sets the "q7" field.
func (qiu *QuestionnaireIqiyiUpdate) SetQ7(s string) *QuestionnaireIqiyiUpdate {
	qiu.mutation.SetQ7(s)
	return qiu
}

// SetBalance sets the "balance" field.
func (qiu *QuestionnaireIqiyiUpdate) SetBalance(s string) *QuestionnaireIqiyiUpdate {
	qiu.mutation.SetBalance(s)
	return qiu
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (qiu *QuestionnaireIqiyiUpdate) SetNillableBalance(s *string) *QuestionnaireIqiyiUpdate {
	if s != nil {
		qiu.SetBalance(*s)
	}
	return qiu
}

// ClearBalance clears the value of the "balance" field.
func (qiu *QuestionnaireIqiyiUpdate) ClearBalance() *QuestionnaireIqiyiUpdate {
	qiu.mutation.ClearBalance()
	return qiu
}

// SetAmount sets the "amount" field.
func (qiu *QuestionnaireIqiyiUpdate) SetAmount(i int32) *QuestionnaireIqiyiUpdate {
	qiu.mutation.ResetAmount()
	qiu.mutation.SetAmount(i)
	return qiu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (qiu *QuestionnaireIqiyiUpdate) SetNillableAmount(i *int32) *QuestionnaireIqiyiUpdate {
	if i != nil {
		qiu.SetAmount(*i)
	}
	return qiu
}

// AddAmount adds i to the "amount" field.
func (qiu *QuestionnaireIqiyiUpdate) AddAmount(i int32) *QuestionnaireIqiyiUpdate {
	qiu.mutation.AddAmount(i)
	return qiu
}

// ClearAmount clears the value of the "amount" field.
func (qiu *QuestionnaireIqiyiUpdate) ClearAmount() *QuestionnaireIqiyiUpdate {
	qiu.mutation.ClearAmount()
	return qiu
}

// SetTransactionCount sets the "transaction_count" field.
func (qiu *QuestionnaireIqiyiUpdate) SetTransactionCount(i int32) *QuestionnaireIqiyiUpdate {
	qiu.mutation.ResetTransactionCount()
	qiu.mutation.SetTransactionCount(i)
	return qiu
}

// SetNillableTransactionCount sets the "transaction_count" field if the given value is not nil.
func (qiu *QuestionnaireIqiyiUpdate) SetNillableTransactionCount(i *int32) *QuestionnaireIqiyiUpdate {
	if i != nil {
		qiu.SetTransactionCount(*i)
	}
	return qiu
}

// AddTransactionCount adds i to the "transaction_count" field.
func (qiu *QuestionnaireIqiyiUpdate) AddTransactionCount(i int32) *QuestionnaireIqiyiUpdate {
	qiu.mutation.AddTransactionCount(i)
	return qiu
}

// ClearTransactionCount clears the value of the "transaction_count" field.
func (qiu *QuestionnaireIqiyiUpdate) ClearTransactionCount() *QuestionnaireIqiyiUpdate {
	qiu.mutation.ClearTransactionCount()
	return qiu
}

// SetAnswer sets the "answer" field.
func (qiu *QuestionnaireIqiyiUpdate) SetAnswer(i int8) *QuestionnaireIqiyiUpdate {
	qiu.mutation.ResetAnswer()
	qiu.mutation.SetAnswer(i)
	return qiu
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (qiu *QuestionnaireIqiyiUpdate) SetNillableAnswer(i *int8) *QuestionnaireIqiyiUpdate {
	if i != nil {
		qiu.SetAnswer(*i)
	}
	return qiu
}

// AddAnswer adds i to the "answer" field.
func (qiu *QuestionnaireIqiyiUpdate) AddAnswer(i int8) *QuestionnaireIqiyiUpdate {
	qiu.mutation.AddAnswer(i)
	return qiu
}

// ClearAnswer clears the value of the "answer" field.
func (qiu *QuestionnaireIqiyiUpdate) ClearAnswer() *QuestionnaireIqiyiUpdate {
	qiu.mutation.ClearAnswer()
	return qiu
}

// SetUpdatedAt sets the "updated_at" field.
func (qiu *QuestionnaireIqiyiUpdate) SetUpdatedAt(t time.Time) *QuestionnaireIqiyiUpdate {
	qiu.mutation.SetUpdatedAt(t)
	return qiu
}

// SetDeletedAt sets the "deleted_at" field.
func (qiu *QuestionnaireIqiyiUpdate) SetDeletedAt(t time.Time) *QuestionnaireIqiyiUpdate {
	qiu.mutation.SetDeletedAt(t)
	return qiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qiu *QuestionnaireIqiyiUpdate) SetNillableDeletedAt(t *time.Time) *QuestionnaireIqiyiUpdate {
	if t != nil {
		qiu.SetDeletedAt(*t)
	}
	return qiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (qiu *QuestionnaireIqiyiUpdate) ClearDeletedAt() *QuestionnaireIqiyiUpdate {
	qiu.mutation.ClearDeletedAt()
	return qiu
}

// SetCreatedAt sets the "created_at" field.
func (qiu *QuestionnaireIqiyiUpdate) SetCreatedAt(t time.Time) *QuestionnaireIqiyiUpdate {
	qiu.mutation.SetCreatedAt(t)
	return qiu
}

// Mutation returns the QuestionnaireIqiyiMutation object of the builder.
func (qiu *QuestionnaireIqiyiUpdate) Mutation() *QuestionnaireIqiyiMutation {
	return qiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qiu *QuestionnaireIqiyiUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(qiu.hooks) == 0 {
		affected, err = qiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuestionnaireIqiyiMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			qiu.mutation = mutation
			affected, err = qiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(qiu.hooks) - 1; i >= 0; i-- {
			if qiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = qiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, qiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (qiu *QuestionnaireIqiyiUpdate) SaveX(ctx context.Context) int {
	affected, err := qiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qiu *QuestionnaireIqiyiUpdate) Exec(ctx context.Context) error {
	_, err := qiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qiu *QuestionnaireIqiyiUpdate) ExecX(ctx context.Context) {
	if err := qiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qiu *QuestionnaireIqiyiUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   questionnaireiqiyi.Table,
			Columns: questionnaireiqiyi.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: questionnaireiqiyi.FieldID,
			},
		},
	}
	if ps := qiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qiu.mutation.WalletAddress(); ok {
		_spec.SetField(questionnaireiqiyi.FieldWalletAddress, field.TypeString, value)
	}
	if value, ok := qiu.mutation.TwitterURL(); ok {
		_spec.SetField(questionnaireiqiyi.FieldTwitterURL, field.TypeString, value)
	}
	if value, ok := qiu.mutation.InviteCode(); ok {
		_spec.SetField(questionnaireiqiyi.FieldInviteCode, field.TypeString, value)
	}
	if value, ok := qiu.mutation.Q1(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ1, field.TypeString, value)
	}
	if value, ok := qiu.mutation.Q2(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ2, field.TypeString, value)
	}
	if value, ok := qiu.mutation.Q3(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ3, field.TypeString, value)
	}
	if value, ok := qiu.mutation.Q4(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ4, field.TypeString, value)
	}
	if value, ok := qiu.mutation.Q5(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ5, field.TypeString, value)
	}
	if value, ok := qiu.mutation.Q6(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ6, field.TypeString, value)
	}
	if value, ok := qiu.mutation.Q7(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ7, field.TypeString, value)
	}
	if value, ok := qiu.mutation.Balance(); ok {
		_spec.SetField(questionnaireiqiyi.FieldBalance, field.TypeString, value)
	}
	if qiu.mutation.BalanceCleared() {
		_spec.ClearField(questionnaireiqiyi.FieldBalance, field.TypeString)
	}
	if value, ok := qiu.mutation.Amount(); ok {
		_spec.SetField(questionnaireiqiyi.FieldAmount, field.TypeInt32, value)
	}
	if value, ok := qiu.mutation.AddedAmount(); ok {
		_spec.AddField(questionnaireiqiyi.FieldAmount, field.TypeInt32, value)
	}
	if qiu.mutation.AmountCleared() {
		_spec.ClearField(questionnaireiqiyi.FieldAmount, field.TypeInt32)
	}
	if value, ok := qiu.mutation.TransactionCount(); ok {
		_spec.SetField(questionnaireiqiyi.FieldTransactionCount, field.TypeInt32, value)
	}
	if value, ok := qiu.mutation.AddedTransactionCount(); ok {
		_spec.AddField(questionnaireiqiyi.FieldTransactionCount, field.TypeInt32, value)
	}
	if qiu.mutation.TransactionCountCleared() {
		_spec.ClearField(questionnaireiqiyi.FieldTransactionCount, field.TypeInt32)
	}
	if value, ok := qiu.mutation.Answer(); ok {
		_spec.SetField(questionnaireiqiyi.FieldAnswer, field.TypeInt8, value)
	}
	if value, ok := qiu.mutation.AddedAnswer(); ok {
		_spec.AddField(questionnaireiqiyi.FieldAnswer, field.TypeInt8, value)
	}
	if qiu.mutation.AnswerCleared() {
		_spec.ClearField(questionnaireiqiyi.FieldAnswer, field.TypeInt8)
	}
	if value, ok := qiu.mutation.UpdatedAt(); ok {
		_spec.SetField(questionnaireiqiyi.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qiu.mutation.DeletedAt(); ok {
		_spec.SetField(questionnaireiqiyi.FieldDeletedAt, field.TypeTime, value)
	}
	if qiu.mutation.DeletedAtCleared() {
		_spec.ClearField(questionnaireiqiyi.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := qiu.mutation.CreatedAt(); ok {
		_spec.SetField(questionnaireiqiyi.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questionnaireiqiyi.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// QuestionnaireIqiyiUpdateOne is the builder for updating a single QuestionnaireIqiyi entity.
type QuestionnaireIqiyiUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionnaireIqiyiMutation
}

// SetWalletAddress sets the "wallet_address" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetWalletAddress(s string) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.SetWalletAddress(s)
	return qiuo
}

// SetTwitterURL sets the "twitter_url" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetTwitterURL(s string) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.SetTwitterURL(s)
	return qiuo
}

// SetInviteCode sets the "invite_code" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetInviteCode(s string) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.SetInviteCode(s)
	return qiuo
}

// SetQ1 sets the "q1" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetQ1(s string) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.SetQ1(s)
	return qiuo
}

// SetQ2 sets the "q2" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetQ2(s string) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.SetQ2(s)
	return qiuo
}

// SetQ3 sets the "q3" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetQ3(s string) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.SetQ3(s)
	return qiuo
}

// SetQ4 sets the "q4" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetQ4(s string) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.SetQ4(s)
	return qiuo
}

// SetQ5 sets the "q5" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetQ5(s string) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.SetQ5(s)
	return qiuo
}

// SetQ6 sets the "q6" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetQ6(s string) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.SetQ6(s)
	return qiuo
}

// SetQ7 sets the "q7" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetQ7(s string) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.SetQ7(s)
	return qiuo
}

// SetBalance sets the "balance" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetBalance(s string) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.SetBalance(s)
	return qiuo
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetNillableBalance(s *string) *QuestionnaireIqiyiUpdateOne {
	if s != nil {
		qiuo.SetBalance(*s)
	}
	return qiuo
}

// ClearBalance clears the value of the "balance" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) ClearBalance() *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.ClearBalance()
	return qiuo
}

// SetAmount sets the "amount" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetAmount(i int32) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.ResetAmount()
	qiuo.mutation.SetAmount(i)
	return qiuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetNillableAmount(i *int32) *QuestionnaireIqiyiUpdateOne {
	if i != nil {
		qiuo.SetAmount(*i)
	}
	return qiuo
}

// AddAmount adds i to the "amount" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) AddAmount(i int32) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.AddAmount(i)
	return qiuo
}

// ClearAmount clears the value of the "amount" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) ClearAmount() *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.ClearAmount()
	return qiuo
}

// SetTransactionCount sets the "transaction_count" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetTransactionCount(i int32) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.ResetTransactionCount()
	qiuo.mutation.SetTransactionCount(i)
	return qiuo
}

// SetNillableTransactionCount sets the "transaction_count" field if the given value is not nil.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetNillableTransactionCount(i *int32) *QuestionnaireIqiyiUpdateOne {
	if i != nil {
		qiuo.SetTransactionCount(*i)
	}
	return qiuo
}

// AddTransactionCount adds i to the "transaction_count" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) AddTransactionCount(i int32) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.AddTransactionCount(i)
	return qiuo
}

// ClearTransactionCount clears the value of the "transaction_count" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) ClearTransactionCount() *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.ClearTransactionCount()
	return qiuo
}

// SetAnswer sets the "answer" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetAnswer(i int8) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.ResetAnswer()
	qiuo.mutation.SetAnswer(i)
	return qiuo
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetNillableAnswer(i *int8) *QuestionnaireIqiyiUpdateOne {
	if i != nil {
		qiuo.SetAnswer(*i)
	}
	return qiuo
}

// AddAnswer adds i to the "answer" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) AddAnswer(i int8) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.AddAnswer(i)
	return qiuo
}

// ClearAnswer clears the value of the "answer" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) ClearAnswer() *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.ClearAnswer()
	return qiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetUpdatedAt(t time.Time) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.SetUpdatedAt(t)
	return qiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetDeletedAt(t time.Time) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.SetDeletedAt(t)
	return qiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetNillableDeletedAt(t *time.Time) *QuestionnaireIqiyiUpdateOne {
	if t != nil {
		qiuo.SetDeletedAt(*t)
	}
	return qiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) ClearDeletedAt() *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.ClearDeletedAt()
	return qiuo
}

// SetCreatedAt sets the "created_at" field.
func (qiuo *QuestionnaireIqiyiUpdateOne) SetCreatedAt(t time.Time) *QuestionnaireIqiyiUpdateOne {
	qiuo.mutation.SetCreatedAt(t)
	return qiuo
}

// Mutation returns the QuestionnaireIqiyiMutation object of the builder.
func (qiuo *QuestionnaireIqiyiUpdateOne) Mutation() *QuestionnaireIqiyiMutation {
	return qiuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qiuo *QuestionnaireIqiyiUpdateOne) Select(field string, fields ...string) *QuestionnaireIqiyiUpdateOne {
	qiuo.fields = append([]string{field}, fields...)
	return qiuo
}

// Save executes the query and returns the updated QuestionnaireIqiyi entity.
func (qiuo *QuestionnaireIqiyiUpdateOne) Save(ctx context.Context) (*QuestionnaireIqiyi, error) {
	var (
		err  error
		node *QuestionnaireIqiyi
	)
	if len(qiuo.hooks) == 0 {
		node, err = qiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuestionnaireIqiyiMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			qiuo.mutation = mutation
			node, err = qiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(qiuo.hooks) - 1; i >= 0; i-- {
			if qiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = qiuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, qiuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*QuestionnaireIqiyi)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from QuestionnaireIqiyiMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (qiuo *QuestionnaireIqiyiUpdateOne) SaveX(ctx context.Context) *QuestionnaireIqiyi {
	node, err := qiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qiuo *QuestionnaireIqiyiUpdateOne) Exec(ctx context.Context) error {
	_, err := qiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qiuo *QuestionnaireIqiyiUpdateOne) ExecX(ctx context.Context) {
	if err := qiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qiuo *QuestionnaireIqiyiUpdateOne) sqlSave(ctx context.Context) (_node *QuestionnaireIqiyi, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   questionnaireiqiyi.Table,
			Columns: questionnaireiqiyi.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: questionnaireiqiyi.FieldID,
			},
		},
	}
	id, ok := qiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QuestionnaireIqiyi.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, questionnaireiqiyi.FieldID)
		for _, f := range fields {
			if !questionnaireiqiyi.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != questionnaireiqiyi.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qiuo.mutation.WalletAddress(); ok {
		_spec.SetField(questionnaireiqiyi.FieldWalletAddress, field.TypeString, value)
	}
	if value, ok := qiuo.mutation.TwitterURL(); ok {
		_spec.SetField(questionnaireiqiyi.FieldTwitterURL, field.TypeString, value)
	}
	if value, ok := qiuo.mutation.InviteCode(); ok {
		_spec.SetField(questionnaireiqiyi.FieldInviteCode, field.TypeString, value)
	}
	if value, ok := qiuo.mutation.Q1(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ1, field.TypeString, value)
	}
	if value, ok := qiuo.mutation.Q2(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ2, field.TypeString, value)
	}
	if value, ok := qiuo.mutation.Q3(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ3, field.TypeString, value)
	}
	if value, ok := qiuo.mutation.Q4(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ4, field.TypeString, value)
	}
	if value, ok := qiuo.mutation.Q5(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ5, field.TypeString, value)
	}
	if value, ok := qiuo.mutation.Q6(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ6, field.TypeString, value)
	}
	if value, ok := qiuo.mutation.Q7(); ok {
		_spec.SetField(questionnaireiqiyi.FieldQ7, field.TypeString, value)
	}
	if value, ok := qiuo.mutation.Balance(); ok {
		_spec.SetField(questionnaireiqiyi.FieldBalance, field.TypeString, value)
	}
	if qiuo.mutation.BalanceCleared() {
		_spec.ClearField(questionnaireiqiyi.FieldBalance, field.TypeString)
	}
	if value, ok := qiuo.mutation.Amount(); ok {
		_spec.SetField(questionnaireiqiyi.FieldAmount, field.TypeInt32, value)
	}
	if value, ok := qiuo.mutation.AddedAmount(); ok {
		_spec.AddField(questionnaireiqiyi.FieldAmount, field.TypeInt32, value)
	}
	if qiuo.mutation.AmountCleared() {
		_spec.ClearField(questionnaireiqiyi.FieldAmount, field.TypeInt32)
	}
	if value, ok := qiuo.mutation.TransactionCount(); ok {
		_spec.SetField(questionnaireiqiyi.FieldTransactionCount, field.TypeInt32, value)
	}
	if value, ok := qiuo.mutation.AddedTransactionCount(); ok {
		_spec.AddField(questionnaireiqiyi.FieldTransactionCount, field.TypeInt32, value)
	}
	if qiuo.mutation.TransactionCountCleared() {
		_spec.ClearField(questionnaireiqiyi.FieldTransactionCount, field.TypeInt32)
	}
	if value, ok := qiuo.mutation.Answer(); ok {
		_spec.SetField(questionnaireiqiyi.FieldAnswer, field.TypeInt8, value)
	}
	if value, ok := qiuo.mutation.AddedAnswer(); ok {
		_spec.AddField(questionnaireiqiyi.FieldAnswer, field.TypeInt8, value)
	}
	if qiuo.mutation.AnswerCleared() {
		_spec.ClearField(questionnaireiqiyi.FieldAnswer, field.TypeInt8)
	}
	if value, ok := qiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(questionnaireiqiyi.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qiuo.mutation.DeletedAt(); ok {
		_spec.SetField(questionnaireiqiyi.FieldDeletedAt, field.TypeTime, value)
	}
	if qiuo.mutation.DeletedAtCleared() {
		_spec.ClearField(questionnaireiqiyi.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := qiuo.mutation.CreatedAt(); ok {
		_spec.SetField(questionnaireiqiyi.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &QuestionnaireIqiyi{config: qiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questionnaireiqiyi.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
