// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ohdat/entmod/ent/account"
	"github.com/ohdat/entmod/ent/predicate"
)

// AccountUpdate is the builder for updating Account entities.
type AccountUpdate struct {
	config
	hooks    []Hook
	mutation *AccountMutation
}

// Where appends a list predicates to the AccountUpdate builder.
func (au *AccountUpdate) Where(ps ...predicate.Account) *AccountUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetAudit sets the "audit" field.
func (au *AccountUpdate) SetAudit(u uint8) *AccountUpdate {
	au.mutation.ResetAudit()
	au.mutation.SetAudit(u)
	return au
}

// AddAudit adds u to the "audit" field.
func (au *AccountUpdate) AddAudit(u int8) *AccountUpdate {
	au.mutation.AddAudit(u)
	return au
}

// SetEmail sets the "email" field.
func (au *AccountUpdate) SetEmail(s string) *AccountUpdate {
	au.mutation.SetEmail(s)
	return au
}

// SetNickname sets the "nickname" field.
func (au *AccountUpdate) SetNickname(s string) *AccountUpdate {
	au.mutation.SetNickname(s)
	return au
}

// SetAvatar sets the "avatar" field.
func (au *AccountUpdate) SetAvatar(s string) *AccountUpdate {
	au.mutation.SetAvatar(s)
	return au
}

// SetPassword sets the "password" field.
func (au *AccountUpdate) SetPassword(s string) *AccountUpdate {
	au.mutation.SetPassword(s)
	return au
}

// SetDisable sets the "disable" field.
func (au *AccountUpdate) SetDisable(b bool) *AccountUpdate {
	au.mutation.SetDisable(b)
	return au
}

// SetPwdErrorNum sets the "pwd_error_num" field.
func (au *AccountUpdate) SetPwdErrorNum(i int32) *AccountUpdate {
	au.mutation.ResetPwdErrorNum()
	au.mutation.SetPwdErrorNum(i)
	return au
}

// AddPwdErrorNum adds i to the "pwd_error_num" field.
func (au *AccountUpdate) AddPwdErrorNum(i int32) *AccountUpdate {
	au.mutation.AddPwdErrorNum(i)
	return au
}

// SetPwdErrorExpireTime sets the "pwd_error_expire_time" field.
func (au *AccountUpdate) SetPwdErrorExpireTime(i int32) *AccountUpdate {
	au.mutation.ResetPwdErrorExpireTime()
	au.mutation.SetPwdErrorExpireTime(i)
	return au
}

// AddPwdErrorExpireTime adds i to the "pwd_error_expire_time" field.
func (au *AccountUpdate) AddPwdErrorExpireTime(i int32) *AccountUpdate {
	au.mutation.AddPwdErrorExpireTime(i)
	return au
}

// SetPhoneToken sets the "phone_token" field.
func (au *AccountUpdate) SetPhoneToken(s string) *AccountUpdate {
	au.mutation.SetPhoneToken(s)
	return au
}

// SetFacebook sets the "facebook" field.
func (au *AccountUpdate) SetFacebook(s string) *AccountUpdate {
	au.mutation.SetFacebook(s)
	return au
}

// SetLine sets the "line" field.
func (au *AccountUpdate) SetLine(s string) *AccountUpdate {
	au.mutation.SetLine(s)
	return au
}

// SetWeibo sets the "weibo" field.
func (au *AccountUpdate) SetWeibo(s string) *AccountUpdate {
	au.mutation.SetWeibo(s)
	return au
}

// SetGoogle sets the "google" field.
func (au *AccountUpdate) SetGoogle(s string) *AccountUpdate {
	au.mutation.SetGoogle(s)
	return au
}

// SetInstagram sets the "instagram" field.
func (au *AccountUpdate) SetInstagram(s string) *AccountUpdate {
	au.mutation.SetInstagram(s)
	return au
}

// SetLinkedin sets the "linkedin" field.
func (au *AccountUpdate) SetLinkedin(s string) *AccountUpdate {
	au.mutation.SetLinkedin(s)
	return au
}

// SetLanguage sets the "language" field.
func (au *AccountUpdate) SetLanguage(s string) *AccountUpdate {
	au.mutation.SetLanguage(s)
	return au
}

// SetPhone sets the "phone" field.
func (au *AccountUpdate) SetPhone(s string) *AccountUpdate {
	au.mutation.SetPhone(s)
	return au
}

// SetCountryCode sets the "country_code" field.
func (au *AccountUpdate) SetCountryCode(i int32) *AccountUpdate {
	au.mutation.ResetCountryCode()
	au.mutation.SetCountryCode(i)
	return au
}

// AddCountryCode adds i to the "country_code" field.
func (au *AccountUpdate) AddCountryCode(i int32) *AccountUpdate {
	au.mutation.AddCountryCode(i)
	return au
}

// SetQrcode sets the "qrcode" field.
func (au *AccountUpdate) SetQrcode(s string) *AccountUpdate {
	au.mutation.SetQrcode(s)
	return au
}

// SetGender sets the "gender" field.
func (au *AccountUpdate) SetGender(b bool) *AccountUpdate {
	au.mutation.SetGender(b)
	return au
}

// SetBirthDate sets the "birth_date" field.
func (au *AccountUpdate) SetBirthDate(t time.Time) *AccountUpdate {
	au.mutation.SetBirthDate(t)
	return au
}

// SetSelfIntroduction sets the "self_introduction" field.
func (au *AccountUpdate) SetSelfIntroduction(s string) *AccountUpdate {
	au.mutation.SetSelfIntroduction(s)
	return au
}

// SetCover sets the "cover" field.
func (au *AccountUpdate) SetCover(s string) *AccountUpdate {
	au.mutation.SetCover(s)
	return au
}

// SetPhoto sets the "photo" field.
func (au *AccountUpdate) SetPhoto(s string) *AccountUpdate {
	au.mutation.SetPhoto(s)
	return au
}

// SetNillablePhoto sets the "photo" field if the given value is not nil.
func (au *AccountUpdate) SetNillablePhoto(s *string) *AccountUpdate {
	if s != nil {
		au.SetPhoto(*s)
	}
	return au
}

// ClearPhoto clears the value of the "photo" field.
func (au *AccountUpdate) ClearPhoto() *AccountUpdate {
	au.mutation.ClearPhoto()
	return au
}

// SetPlatform sets the "platform" field.
func (au *AccountUpdate) SetPlatform(b bool) *AccountUpdate {
	au.mutation.SetPlatform(b)
	return au
}

// SetLastLoginTime sets the "last_login_time" field.
func (au *AccountUpdate) SetLastLoginTime(t time.Time) *AccountUpdate {
	au.mutation.SetLastLoginTime(t)
	return au
}

// SetCredit sets the "credit" field.
func (au *AccountUpdate) SetCredit(i int32) *AccountUpdate {
	au.mutation.ResetCredit()
	au.mutation.SetCredit(i)
	return au
}

// AddCredit adds i to the "credit" field.
func (au *AccountUpdate) AddCredit(i int32) *AccountUpdate {
	au.mutation.AddCredit(i)
	return au
}

// SetHeatNum sets the "heat_num" field.
func (au *AccountUpdate) SetHeatNum(i int32) *AccountUpdate {
	au.mutation.ResetHeatNum()
	au.mutation.SetHeatNum(i)
	return au
}

// AddHeatNum adds i to the "heat_num" field.
func (au *AccountUpdate) AddHeatNum(i int32) *AccountUpdate {
	au.mutation.AddHeatNum(i)
	return au
}

// SetDesignerID sets the "designer_id" field.
func (au *AccountUpdate) SetDesignerID(i int32) *AccountUpdate {
	au.mutation.ResetDesignerID()
	au.mutation.SetDesignerID(i)
	return au
}

// AddDesignerID adds i to the "designer_id" field.
func (au *AccountUpdate) AddDesignerID(i int32) *AccountUpdate {
	au.mutation.AddDesignerID(i)
	return au
}

// SetIdentity sets the "identity" field.
func (au *AccountUpdate) SetIdentity(b bool) *AccountUpdate {
	au.mutation.SetIdentity(b)
	return au
}

// SetLevel sets the "level" field.
func (au *AccountUpdate) SetLevel(i int32) *AccountUpdate {
	au.mutation.ResetLevel()
	au.mutation.SetLevel(i)
	return au
}

// AddLevel adds i to the "level" field.
func (au *AccountUpdate) AddLevel(i int32) *AccountUpdate {
	au.mutation.AddLevel(i)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AccountUpdate) SetUpdatedAt(t time.Time) *AccountUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AccountUpdate) SetDeletedAt(t time.Time) *AccountUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AccountUpdate) SetNillableDeletedAt(t *time.Time) *AccountUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AccountUpdate) ClearDeletedAt() *AccountUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AccountUpdate) SetCreatedAt(t time.Time) *AccountUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetChainWalletID sets the "chain_wallet_id" field.
func (au *AccountUpdate) SetChainWalletID(s string) *AccountUpdate {
	au.mutation.SetChainWalletID(s)
	return au
}

// SetDiscordAid sets the "discord_aid" field.
func (au *AccountUpdate) SetDiscordAid(i int32) *AccountUpdate {
	au.mutation.ResetDiscordAid()
	au.mutation.SetDiscordAid(i)
	return au
}

// AddDiscordAid adds i to the "discord_aid" field.
func (au *AccountUpdate) AddDiscordAid(i int32) *AccountUpdate {
	au.mutation.AddDiscordAid(i)
	return au
}

// SetTicketBalance sets the "ticket_balance" field.
func (au *AccountUpdate) SetTicketBalance(i int32) *AccountUpdate {
	au.mutation.ResetTicketBalance()
	au.mutation.SetTicketBalance(i)
	return au
}

// AddTicketBalance adds i to the "ticket_balance" field.
func (au *AccountUpdate) AddTicketBalance(i int32) *AccountUpdate {
	au.mutation.AddTicketBalance(i)
	return au
}

// SetOhdatTicketBalance sets the "ohdat_ticket_balance" field.
func (au *AccountUpdate) SetOhdatTicketBalance(i int32) *AccountUpdate {
	au.mutation.ResetOhdatTicketBalance()
	au.mutation.SetOhdatTicketBalance(i)
	return au
}

// AddOhdatTicketBalance adds i to the "ohdat_ticket_balance" field.
func (au *AccountUpdate) AddOhdatTicketBalance(i int32) *AccountUpdate {
	au.mutation.AddOhdatTicketBalance(i)
	return au
}

// SetSpaceExpeditionChance sets the "space_expedition_chance" field.
func (au *AccountUpdate) SetSpaceExpeditionChance(b bool) *AccountUpdate {
	au.mutation.SetSpaceExpeditionChance(b)
	return au
}

// SetBambLockedBalance sets the "bamb_locked_balance" field.
func (au *AccountUpdate) SetBambLockedBalance(f float64) *AccountUpdate {
	au.mutation.ResetBambLockedBalance()
	au.mutation.SetBambLockedBalance(f)
	return au
}

// AddBambLockedBalance adds f to the "bamb_locked_balance" field.
func (au *AccountUpdate) AddBambLockedBalance(f float64) *AccountUpdate {
	au.mutation.AddBambLockedBalance(f)
	return au
}

// SetBambClaimableBalance sets the "bamb_claimable_balance" field.
func (au *AccountUpdate) SetBambClaimableBalance(f float64) *AccountUpdate {
	au.mutation.ResetBambClaimableBalance()
	au.mutation.SetBambClaimableBalance(f)
	return au
}

// AddBambClaimableBalance adds f to the "bamb_claimable_balance" field.
func (au *AccountUpdate) AddBambClaimableBalance(f float64) *AccountUpdate {
	au.mutation.AddBambClaimableBalance(f)
	return au
}

// SetBambStaking sets the "bamb_staking" field.
func (au *AccountUpdate) SetBambStaking(f float64) *AccountUpdate {
	au.mutation.ResetBambStaking()
	au.mutation.SetBambStaking(f)
	return au
}

// AddBambStaking adds f to the "bamb_staking" field.
func (au *AccountUpdate) AddBambStaking(f float64) *AccountUpdate {
	au.mutation.AddBambStaking(f)
	return au
}

// SetBamblpStaking sets the "bamblp_staking" field.
func (au *AccountUpdate) SetBamblpStaking(f float64) *AccountUpdate {
	au.mutation.ResetBamblpStaking()
	au.mutation.SetBamblpStaking(f)
	return au
}

// AddBamblpStaking adds f to the "bamblp_staking" field.
func (au *AccountUpdate) AddBamblpStaking(f float64) *AccountUpdate {
	au.mutation.AddBamblpStaking(f)
	return au
}

// SetBamblpCollect sets the "bamblp_collect" field.
func (au *AccountUpdate) SetBamblpCollect(f float64) *AccountUpdate {
	au.mutation.ResetBamblpCollect()
	au.mutation.SetBamblpCollect(f)
	return au
}

// AddBamblpCollect adds f to the "bamblp_collect" field.
func (au *AccountUpdate) AddBamblpCollect(f float64) *AccountUpdate {
	au.mutation.AddBamblpCollect(f)
	return au
}

// SetChipBalance sets the "chip_balance" field.
func (au *AccountUpdate) SetChipBalance(f float64) *AccountUpdate {
	au.mutation.ResetChipBalance()
	au.mutation.SetChipBalance(f)
	return au
}

// AddChipBalance adds f to the "chip_balance" field.
func (au *AccountUpdate) AddChipBalance(f float64) *AccountUpdate {
	au.mutation.AddChipBalance(f)
	return au
}

// SetBambooShootBalance sets the "bamboo_shoot_balance" field.
func (au *AccountUpdate) SetBambooShootBalance(i int32) *AccountUpdate {
	au.mutation.ResetBambooShootBalance()
	au.mutation.SetBambooShootBalance(i)
	return au
}

// AddBambooShootBalance adds i to the "bamboo_shoot_balance" field.
func (au *AccountUpdate) AddBambooShootBalance(i int32) *AccountUpdate {
	au.mutation.AddBambooShootBalance(i)
	return au
}

// SetPandaAirdropCount sets the "panda_airdrop_count" field.
func (au *AccountUpdate) SetPandaAirdropCount(i int32) *AccountUpdate {
	au.mutation.ResetPandaAirdropCount()
	au.mutation.SetPandaAirdropCount(i)
	return au
}

// AddPandaAirdropCount adds i to the "panda_airdrop_count" field.
func (au *AccountUpdate) AddPandaAirdropCount(i int32) *AccountUpdate {
	au.mutation.AddPandaAirdropCount(i)
	return au
}

// SetFirstLogin sets the "first_login" field.
func (au *AccountUpdate) SetFirstLogin(b bool) *AccountUpdate {
	au.mutation.SetFirstLogin(b)
	return au
}

// SetPassedSpaceExpeditionCount sets the "passed_space_expedition_count" field.
func (au *AccountUpdate) SetPassedSpaceExpeditionCount(i int32) *AccountUpdate {
	au.mutation.ResetPassedSpaceExpeditionCount()
	au.mutation.SetPassedSpaceExpeditionCount(i)
	return au
}

// AddPassedSpaceExpeditionCount adds i to the "passed_space_expedition_count" field.
func (au *AccountUpdate) AddPassedSpaceExpeditionCount(i int32) *AccountUpdate {
	au.mutation.AddPassedSpaceExpeditionCount(i)
	return au
}

// SetPassedSpaceExpeditionReward sets the "passed_space_expedition_reward" field.
func (au *AccountUpdate) SetPassedSpaceExpeditionReward(f float64) *AccountUpdate {
	au.mutation.ResetPassedSpaceExpeditionReward()
	au.mutation.SetPassedSpaceExpeditionReward(f)
	return au
}

// AddPassedSpaceExpeditionReward adds f to the "passed_space_expedition_reward" field.
func (au *AccountUpdate) AddPassedSpaceExpeditionReward(f float64) *AccountUpdate {
	au.mutation.AddPassedSpaceExpeditionReward(f)
	return au
}

// SetReserved sets the "reserved" field.
func (au *AccountUpdate) SetReserved(s string) *AccountUpdate {
	au.mutation.SetReserved(s)
	return au
}

// SetCentralizedBeerCapsBalance sets the "centralized_beer_caps_balance" field.
func (au *AccountUpdate) SetCentralizedBeerCapsBalance(i int32) *AccountUpdate {
	au.mutation.ResetCentralizedBeerCapsBalance()
	au.mutation.SetCentralizedBeerCapsBalance(i)
	return au
}

// AddCentralizedBeerCapsBalance adds i to the "centralized_beer_caps_balance" field.
func (au *AccountUpdate) AddCentralizedBeerCapsBalance(i int32) *AccountUpdate {
	au.mutation.AddCentralizedBeerCapsBalance(i)
	return au
}

// Mutation returns the AccountMutation object of the builder.
func (au *AccountUpdate) Mutation() *AccountMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AccountUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   account.Table,
			Columns: account.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: account.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Audit(); ok {
		_spec.SetField(account.FieldAudit, field.TypeUint8, value)
	}
	if value, ok := au.mutation.AddedAudit(); ok {
		_spec.AddField(account.FieldAudit, field.TypeUint8, value)
	}
	if value, ok := au.mutation.Email(); ok {
		_spec.SetField(account.FieldEmail, field.TypeString, value)
	}
	if value, ok := au.mutation.Nickname(); ok {
		_spec.SetField(account.FieldNickname, field.TypeString, value)
	}
	if value, ok := au.mutation.Avatar(); ok {
		_spec.SetField(account.FieldAvatar, field.TypeString, value)
	}
	if value, ok := au.mutation.Password(); ok {
		_spec.SetField(account.FieldPassword, field.TypeString, value)
	}
	if value, ok := au.mutation.Disable(); ok {
		_spec.SetField(account.FieldDisable, field.TypeBool, value)
	}
	if value, ok := au.mutation.PwdErrorNum(); ok {
		_spec.SetField(account.FieldPwdErrorNum, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedPwdErrorNum(); ok {
		_spec.AddField(account.FieldPwdErrorNum, field.TypeInt32, value)
	}
	if value, ok := au.mutation.PwdErrorExpireTime(); ok {
		_spec.SetField(account.FieldPwdErrorExpireTime, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedPwdErrorExpireTime(); ok {
		_spec.AddField(account.FieldPwdErrorExpireTime, field.TypeInt32, value)
	}
	if value, ok := au.mutation.PhoneToken(); ok {
		_spec.SetField(account.FieldPhoneToken, field.TypeString, value)
	}
	if value, ok := au.mutation.Facebook(); ok {
		_spec.SetField(account.FieldFacebook, field.TypeString, value)
	}
	if value, ok := au.mutation.Line(); ok {
		_spec.SetField(account.FieldLine, field.TypeString, value)
	}
	if value, ok := au.mutation.Weibo(); ok {
		_spec.SetField(account.FieldWeibo, field.TypeString, value)
	}
	if value, ok := au.mutation.Google(); ok {
		_spec.SetField(account.FieldGoogle, field.TypeString, value)
	}
	if value, ok := au.mutation.Instagram(); ok {
		_spec.SetField(account.FieldInstagram, field.TypeString, value)
	}
	if value, ok := au.mutation.Linkedin(); ok {
		_spec.SetField(account.FieldLinkedin, field.TypeString, value)
	}
	if value, ok := au.mutation.Language(); ok {
		_spec.SetField(account.FieldLanguage, field.TypeString, value)
	}
	if value, ok := au.mutation.Phone(); ok {
		_spec.SetField(account.FieldPhone, field.TypeString, value)
	}
	if value, ok := au.mutation.CountryCode(); ok {
		_spec.SetField(account.FieldCountryCode, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedCountryCode(); ok {
		_spec.AddField(account.FieldCountryCode, field.TypeInt32, value)
	}
	if value, ok := au.mutation.Qrcode(); ok {
		_spec.SetField(account.FieldQrcode, field.TypeString, value)
	}
	if value, ok := au.mutation.Gender(); ok {
		_spec.SetField(account.FieldGender, field.TypeBool, value)
	}
	if value, ok := au.mutation.BirthDate(); ok {
		_spec.SetField(account.FieldBirthDate, field.TypeTime, value)
	}
	if value, ok := au.mutation.SelfIntroduction(); ok {
		_spec.SetField(account.FieldSelfIntroduction, field.TypeString, value)
	}
	if value, ok := au.mutation.Cover(); ok {
		_spec.SetField(account.FieldCover, field.TypeString, value)
	}
	if value, ok := au.mutation.Photo(); ok {
		_spec.SetField(account.FieldPhoto, field.TypeString, value)
	}
	if au.mutation.PhotoCleared() {
		_spec.ClearField(account.FieldPhoto, field.TypeString)
	}
	if value, ok := au.mutation.Platform(); ok {
		_spec.SetField(account.FieldPlatform, field.TypeBool, value)
	}
	if value, ok := au.mutation.LastLoginTime(); ok {
		_spec.SetField(account.FieldLastLoginTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.Credit(); ok {
		_spec.SetField(account.FieldCredit, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedCredit(); ok {
		_spec.AddField(account.FieldCredit, field.TypeInt32, value)
	}
	if value, ok := au.mutation.HeatNum(); ok {
		_spec.SetField(account.FieldHeatNum, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedHeatNum(); ok {
		_spec.AddField(account.FieldHeatNum, field.TypeInt32, value)
	}
	if value, ok := au.mutation.DesignerID(); ok {
		_spec.SetField(account.FieldDesignerID, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedDesignerID(); ok {
		_spec.AddField(account.FieldDesignerID, field.TypeInt32, value)
	}
	if value, ok := au.mutation.Identity(); ok {
		_spec.SetField(account.FieldIdentity, field.TypeBool, value)
	}
	if value, ok := au.mutation.Level(); ok {
		_spec.SetField(account.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedLevel(); ok {
		_spec.AddField(account.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(account.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(account.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(account.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(account.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.ChainWalletID(); ok {
		_spec.SetField(account.FieldChainWalletID, field.TypeString, value)
	}
	if value, ok := au.mutation.DiscordAid(); ok {
		_spec.SetField(account.FieldDiscordAid, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedDiscordAid(); ok {
		_spec.AddField(account.FieldDiscordAid, field.TypeInt32, value)
	}
	if value, ok := au.mutation.TicketBalance(); ok {
		_spec.SetField(account.FieldTicketBalance, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedTicketBalance(); ok {
		_spec.AddField(account.FieldTicketBalance, field.TypeInt32, value)
	}
	if value, ok := au.mutation.OhdatTicketBalance(); ok {
		_spec.SetField(account.FieldOhdatTicketBalance, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedOhdatTicketBalance(); ok {
		_spec.AddField(account.FieldOhdatTicketBalance, field.TypeInt32, value)
	}
	if value, ok := au.mutation.SpaceExpeditionChance(); ok {
		_spec.SetField(account.FieldSpaceExpeditionChance, field.TypeBool, value)
	}
	if value, ok := au.mutation.BambLockedBalance(); ok {
		_spec.SetField(account.FieldBambLockedBalance, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedBambLockedBalance(); ok {
		_spec.AddField(account.FieldBambLockedBalance, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.BambClaimableBalance(); ok {
		_spec.SetField(account.FieldBambClaimableBalance, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedBambClaimableBalance(); ok {
		_spec.AddField(account.FieldBambClaimableBalance, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.BambStaking(); ok {
		_spec.SetField(account.FieldBambStaking, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedBambStaking(); ok {
		_spec.AddField(account.FieldBambStaking, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.BamblpStaking(); ok {
		_spec.SetField(account.FieldBamblpStaking, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedBamblpStaking(); ok {
		_spec.AddField(account.FieldBamblpStaking, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.BamblpCollect(); ok {
		_spec.SetField(account.FieldBamblpCollect, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedBamblpCollect(); ok {
		_spec.AddField(account.FieldBamblpCollect, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.ChipBalance(); ok {
		_spec.SetField(account.FieldChipBalance, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedChipBalance(); ok {
		_spec.AddField(account.FieldChipBalance, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.BambooShootBalance(); ok {
		_spec.SetField(account.FieldBambooShootBalance, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedBambooShootBalance(); ok {
		_spec.AddField(account.FieldBambooShootBalance, field.TypeInt32, value)
	}
	if value, ok := au.mutation.PandaAirdropCount(); ok {
		_spec.SetField(account.FieldPandaAirdropCount, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedPandaAirdropCount(); ok {
		_spec.AddField(account.FieldPandaAirdropCount, field.TypeInt32, value)
	}
	if value, ok := au.mutation.FirstLogin(); ok {
		_spec.SetField(account.FieldFirstLogin, field.TypeBool, value)
	}
	if value, ok := au.mutation.PassedSpaceExpeditionCount(); ok {
		_spec.SetField(account.FieldPassedSpaceExpeditionCount, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedPassedSpaceExpeditionCount(); ok {
		_spec.AddField(account.FieldPassedSpaceExpeditionCount, field.TypeInt32, value)
	}
	if value, ok := au.mutation.PassedSpaceExpeditionReward(); ok {
		_spec.SetField(account.FieldPassedSpaceExpeditionReward, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.AddedPassedSpaceExpeditionReward(); ok {
		_spec.AddField(account.FieldPassedSpaceExpeditionReward, field.TypeFloat64, value)
	}
	if value, ok := au.mutation.Reserved(); ok {
		_spec.SetField(account.FieldReserved, field.TypeString, value)
	}
	if value, ok := au.mutation.CentralizedBeerCapsBalance(); ok {
		_spec.SetField(account.FieldCentralizedBeerCapsBalance, field.TypeInt32, value)
	}
	if value, ok := au.mutation.AddedCentralizedBeerCapsBalance(); ok {
		_spec.AddField(account.FieldCentralizedBeerCapsBalance, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AccountUpdateOne is the builder for updating a single Account entity.
type AccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountMutation
}

// SetAudit sets the "audit" field.
func (auo *AccountUpdateOne) SetAudit(u uint8) *AccountUpdateOne {
	auo.mutation.ResetAudit()
	auo.mutation.SetAudit(u)
	return auo
}

// AddAudit adds u to the "audit" field.
func (auo *AccountUpdateOne) AddAudit(u int8) *AccountUpdateOne {
	auo.mutation.AddAudit(u)
	return auo
}

// SetEmail sets the "email" field.
func (auo *AccountUpdateOne) SetEmail(s string) *AccountUpdateOne {
	auo.mutation.SetEmail(s)
	return auo
}

// SetNickname sets the "nickname" field.
func (auo *AccountUpdateOne) SetNickname(s string) *AccountUpdateOne {
	auo.mutation.SetNickname(s)
	return auo
}

// SetAvatar sets the "avatar" field.
func (auo *AccountUpdateOne) SetAvatar(s string) *AccountUpdateOne {
	auo.mutation.SetAvatar(s)
	return auo
}

// SetPassword sets the "password" field.
func (auo *AccountUpdateOne) SetPassword(s string) *AccountUpdateOne {
	auo.mutation.SetPassword(s)
	return auo
}

// SetDisable sets the "disable" field.
func (auo *AccountUpdateOne) SetDisable(b bool) *AccountUpdateOne {
	auo.mutation.SetDisable(b)
	return auo
}

// SetPwdErrorNum sets the "pwd_error_num" field.
func (auo *AccountUpdateOne) SetPwdErrorNum(i int32) *AccountUpdateOne {
	auo.mutation.ResetPwdErrorNum()
	auo.mutation.SetPwdErrorNum(i)
	return auo
}

// AddPwdErrorNum adds i to the "pwd_error_num" field.
func (auo *AccountUpdateOne) AddPwdErrorNum(i int32) *AccountUpdateOne {
	auo.mutation.AddPwdErrorNum(i)
	return auo
}

// SetPwdErrorExpireTime sets the "pwd_error_expire_time" field.
func (auo *AccountUpdateOne) SetPwdErrorExpireTime(i int32) *AccountUpdateOne {
	auo.mutation.ResetPwdErrorExpireTime()
	auo.mutation.SetPwdErrorExpireTime(i)
	return auo
}

// AddPwdErrorExpireTime adds i to the "pwd_error_expire_time" field.
func (auo *AccountUpdateOne) AddPwdErrorExpireTime(i int32) *AccountUpdateOne {
	auo.mutation.AddPwdErrorExpireTime(i)
	return auo
}

// SetPhoneToken sets the "phone_token" field.
func (auo *AccountUpdateOne) SetPhoneToken(s string) *AccountUpdateOne {
	auo.mutation.SetPhoneToken(s)
	return auo
}

// SetFacebook sets the "facebook" field.
func (auo *AccountUpdateOne) SetFacebook(s string) *AccountUpdateOne {
	auo.mutation.SetFacebook(s)
	return auo
}

// SetLine sets the "line" field.
func (auo *AccountUpdateOne) SetLine(s string) *AccountUpdateOne {
	auo.mutation.SetLine(s)
	return auo
}

// SetWeibo sets the "weibo" field.
func (auo *AccountUpdateOne) SetWeibo(s string) *AccountUpdateOne {
	auo.mutation.SetWeibo(s)
	return auo
}

// SetGoogle sets the "google" field.
func (auo *AccountUpdateOne) SetGoogle(s string) *AccountUpdateOne {
	auo.mutation.SetGoogle(s)
	return auo
}

// SetInstagram sets the "instagram" field.
func (auo *AccountUpdateOne) SetInstagram(s string) *AccountUpdateOne {
	auo.mutation.SetInstagram(s)
	return auo
}

// SetLinkedin sets the "linkedin" field.
func (auo *AccountUpdateOne) SetLinkedin(s string) *AccountUpdateOne {
	auo.mutation.SetLinkedin(s)
	return auo
}

// SetLanguage sets the "language" field.
func (auo *AccountUpdateOne) SetLanguage(s string) *AccountUpdateOne {
	auo.mutation.SetLanguage(s)
	return auo
}

// SetPhone sets the "phone" field.
func (auo *AccountUpdateOne) SetPhone(s string) *AccountUpdateOne {
	auo.mutation.SetPhone(s)
	return auo
}

// SetCountryCode sets the "country_code" field.
func (auo *AccountUpdateOne) SetCountryCode(i int32) *AccountUpdateOne {
	auo.mutation.ResetCountryCode()
	auo.mutation.SetCountryCode(i)
	return auo
}

// AddCountryCode adds i to the "country_code" field.
func (auo *AccountUpdateOne) AddCountryCode(i int32) *AccountUpdateOne {
	auo.mutation.AddCountryCode(i)
	return auo
}

// SetQrcode sets the "qrcode" field.
func (auo *AccountUpdateOne) SetQrcode(s string) *AccountUpdateOne {
	auo.mutation.SetQrcode(s)
	return auo
}

// SetGender sets the "gender" field.
func (auo *AccountUpdateOne) SetGender(b bool) *AccountUpdateOne {
	auo.mutation.SetGender(b)
	return auo
}

// SetBirthDate sets the "birth_date" field.
func (auo *AccountUpdateOne) SetBirthDate(t time.Time) *AccountUpdateOne {
	auo.mutation.SetBirthDate(t)
	return auo
}

// SetSelfIntroduction sets the "self_introduction" field.
func (auo *AccountUpdateOne) SetSelfIntroduction(s string) *AccountUpdateOne {
	auo.mutation.SetSelfIntroduction(s)
	return auo
}

// SetCover sets the "cover" field.
func (auo *AccountUpdateOne) SetCover(s string) *AccountUpdateOne {
	auo.mutation.SetCover(s)
	return auo
}

// SetPhoto sets the "photo" field.
func (auo *AccountUpdateOne) SetPhoto(s string) *AccountUpdateOne {
	auo.mutation.SetPhoto(s)
	return auo
}

// SetNillablePhoto sets the "photo" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillablePhoto(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetPhoto(*s)
	}
	return auo
}

// ClearPhoto clears the value of the "photo" field.
func (auo *AccountUpdateOne) ClearPhoto() *AccountUpdateOne {
	auo.mutation.ClearPhoto()
	return auo
}

// SetPlatform sets the "platform" field.
func (auo *AccountUpdateOne) SetPlatform(b bool) *AccountUpdateOne {
	auo.mutation.SetPlatform(b)
	return auo
}

// SetLastLoginTime sets the "last_login_time" field.
func (auo *AccountUpdateOne) SetLastLoginTime(t time.Time) *AccountUpdateOne {
	auo.mutation.SetLastLoginTime(t)
	return auo
}

// SetCredit sets the "credit" field.
func (auo *AccountUpdateOne) SetCredit(i int32) *AccountUpdateOne {
	auo.mutation.ResetCredit()
	auo.mutation.SetCredit(i)
	return auo
}

// AddCredit adds i to the "credit" field.
func (auo *AccountUpdateOne) AddCredit(i int32) *AccountUpdateOne {
	auo.mutation.AddCredit(i)
	return auo
}

// SetHeatNum sets the "heat_num" field.
func (auo *AccountUpdateOne) SetHeatNum(i int32) *AccountUpdateOne {
	auo.mutation.ResetHeatNum()
	auo.mutation.SetHeatNum(i)
	return auo
}

// AddHeatNum adds i to the "heat_num" field.
func (auo *AccountUpdateOne) AddHeatNum(i int32) *AccountUpdateOne {
	auo.mutation.AddHeatNum(i)
	return auo
}

// SetDesignerID sets the "designer_id" field.
func (auo *AccountUpdateOne) SetDesignerID(i int32) *AccountUpdateOne {
	auo.mutation.ResetDesignerID()
	auo.mutation.SetDesignerID(i)
	return auo
}

// AddDesignerID adds i to the "designer_id" field.
func (auo *AccountUpdateOne) AddDesignerID(i int32) *AccountUpdateOne {
	auo.mutation.AddDesignerID(i)
	return auo
}

// SetIdentity sets the "identity" field.
func (auo *AccountUpdateOne) SetIdentity(b bool) *AccountUpdateOne {
	auo.mutation.SetIdentity(b)
	return auo
}

// SetLevel sets the "level" field.
func (auo *AccountUpdateOne) SetLevel(i int32) *AccountUpdateOne {
	auo.mutation.ResetLevel()
	auo.mutation.SetLevel(i)
	return auo
}

// AddLevel adds i to the "level" field.
func (auo *AccountUpdateOne) AddLevel(i int32) *AccountUpdateOne {
	auo.mutation.AddLevel(i)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AccountUpdateOne) SetUpdatedAt(t time.Time) *AccountUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AccountUpdateOne) SetDeletedAt(t time.Time) *AccountUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableDeletedAt(t *time.Time) *AccountUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AccountUpdateOne) ClearDeletedAt() *AccountUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AccountUpdateOne) SetCreatedAt(t time.Time) *AccountUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetChainWalletID sets the "chain_wallet_id" field.
func (auo *AccountUpdateOne) SetChainWalletID(s string) *AccountUpdateOne {
	auo.mutation.SetChainWalletID(s)
	return auo
}

// SetDiscordAid sets the "discord_aid" field.
func (auo *AccountUpdateOne) SetDiscordAid(i int32) *AccountUpdateOne {
	auo.mutation.ResetDiscordAid()
	auo.mutation.SetDiscordAid(i)
	return auo
}

// AddDiscordAid adds i to the "discord_aid" field.
func (auo *AccountUpdateOne) AddDiscordAid(i int32) *AccountUpdateOne {
	auo.mutation.AddDiscordAid(i)
	return auo
}

// SetTicketBalance sets the "ticket_balance" field.
func (auo *AccountUpdateOne) SetTicketBalance(i int32) *AccountUpdateOne {
	auo.mutation.ResetTicketBalance()
	auo.mutation.SetTicketBalance(i)
	return auo
}

// AddTicketBalance adds i to the "ticket_balance" field.
func (auo *AccountUpdateOne) AddTicketBalance(i int32) *AccountUpdateOne {
	auo.mutation.AddTicketBalance(i)
	return auo
}

// SetOhdatTicketBalance sets the "ohdat_ticket_balance" field.
func (auo *AccountUpdateOne) SetOhdatTicketBalance(i int32) *AccountUpdateOne {
	auo.mutation.ResetOhdatTicketBalance()
	auo.mutation.SetOhdatTicketBalance(i)
	return auo
}

// AddOhdatTicketBalance adds i to the "ohdat_ticket_balance" field.
func (auo *AccountUpdateOne) AddOhdatTicketBalance(i int32) *AccountUpdateOne {
	auo.mutation.AddOhdatTicketBalance(i)
	return auo
}

// SetSpaceExpeditionChance sets the "space_expedition_chance" field.
func (auo *AccountUpdateOne) SetSpaceExpeditionChance(b bool) *AccountUpdateOne {
	auo.mutation.SetSpaceExpeditionChance(b)
	return auo
}

// SetBambLockedBalance sets the "bamb_locked_balance" field.
func (auo *AccountUpdateOne) SetBambLockedBalance(f float64) *AccountUpdateOne {
	auo.mutation.ResetBambLockedBalance()
	auo.mutation.SetBambLockedBalance(f)
	return auo
}

// AddBambLockedBalance adds f to the "bamb_locked_balance" field.
func (auo *AccountUpdateOne) AddBambLockedBalance(f float64) *AccountUpdateOne {
	auo.mutation.AddBambLockedBalance(f)
	return auo
}

// SetBambClaimableBalance sets the "bamb_claimable_balance" field.
func (auo *AccountUpdateOne) SetBambClaimableBalance(f float64) *AccountUpdateOne {
	auo.mutation.ResetBambClaimableBalance()
	auo.mutation.SetBambClaimableBalance(f)
	return auo
}

// AddBambClaimableBalance adds f to the "bamb_claimable_balance" field.
func (auo *AccountUpdateOne) AddBambClaimableBalance(f float64) *AccountUpdateOne {
	auo.mutation.AddBambClaimableBalance(f)
	return auo
}

// SetBambStaking sets the "bamb_staking" field.
func (auo *AccountUpdateOne) SetBambStaking(f float64) *AccountUpdateOne {
	auo.mutation.ResetBambStaking()
	auo.mutation.SetBambStaking(f)
	return auo
}

// AddBambStaking adds f to the "bamb_staking" field.
func (auo *AccountUpdateOne) AddBambStaking(f float64) *AccountUpdateOne {
	auo.mutation.AddBambStaking(f)
	return auo
}

// SetBamblpStaking sets the "bamblp_staking" field.
func (auo *AccountUpdateOne) SetBamblpStaking(f float64) *AccountUpdateOne {
	auo.mutation.ResetBamblpStaking()
	auo.mutation.SetBamblpStaking(f)
	return auo
}

// AddBamblpStaking adds f to the "bamblp_staking" field.
func (auo *AccountUpdateOne) AddBamblpStaking(f float64) *AccountUpdateOne {
	auo.mutation.AddBamblpStaking(f)
	return auo
}

// SetBamblpCollect sets the "bamblp_collect" field.
func (auo *AccountUpdateOne) SetBamblpCollect(f float64) *AccountUpdateOne {
	auo.mutation.ResetBamblpCollect()
	auo.mutation.SetBamblpCollect(f)
	return auo
}

// AddBamblpCollect adds f to the "bamblp_collect" field.
func (auo *AccountUpdateOne) AddBamblpCollect(f float64) *AccountUpdateOne {
	auo.mutation.AddBamblpCollect(f)
	return auo
}

// SetChipBalance sets the "chip_balance" field.
func (auo *AccountUpdateOne) SetChipBalance(f float64) *AccountUpdateOne {
	auo.mutation.ResetChipBalance()
	auo.mutation.SetChipBalance(f)
	return auo
}

// AddChipBalance adds f to the "chip_balance" field.
func (auo *AccountUpdateOne) AddChipBalance(f float64) *AccountUpdateOne {
	auo.mutation.AddChipBalance(f)
	return auo
}

// SetBambooShootBalance sets the "bamboo_shoot_balance" field.
func (auo *AccountUpdateOne) SetBambooShootBalance(i int32) *AccountUpdateOne {
	auo.mutation.ResetBambooShootBalance()
	auo.mutation.SetBambooShootBalance(i)
	return auo
}

// AddBambooShootBalance adds i to the "bamboo_shoot_balance" field.
func (auo *AccountUpdateOne) AddBambooShootBalance(i int32) *AccountUpdateOne {
	auo.mutation.AddBambooShootBalance(i)
	return auo
}

// SetPandaAirdropCount sets the "panda_airdrop_count" field.
func (auo *AccountUpdateOne) SetPandaAirdropCount(i int32) *AccountUpdateOne {
	auo.mutation.ResetPandaAirdropCount()
	auo.mutation.SetPandaAirdropCount(i)
	return auo
}

// AddPandaAirdropCount adds i to the "panda_airdrop_count" field.
func (auo *AccountUpdateOne) AddPandaAirdropCount(i int32) *AccountUpdateOne {
	auo.mutation.AddPandaAirdropCount(i)
	return auo
}

// SetFirstLogin sets the "first_login" field.
func (auo *AccountUpdateOne) SetFirstLogin(b bool) *AccountUpdateOne {
	auo.mutation.SetFirstLogin(b)
	return auo
}

// SetPassedSpaceExpeditionCount sets the "passed_space_expedition_count" field.
func (auo *AccountUpdateOne) SetPassedSpaceExpeditionCount(i int32) *AccountUpdateOne {
	auo.mutation.ResetPassedSpaceExpeditionCount()
	auo.mutation.SetPassedSpaceExpeditionCount(i)
	return auo
}

// AddPassedSpaceExpeditionCount adds i to the "passed_space_expedition_count" field.
func (auo *AccountUpdateOne) AddPassedSpaceExpeditionCount(i int32) *AccountUpdateOne {
	auo.mutation.AddPassedSpaceExpeditionCount(i)
	return auo
}

// SetPassedSpaceExpeditionReward sets the "passed_space_expedition_reward" field.
func (auo *AccountUpdateOne) SetPassedSpaceExpeditionReward(f float64) *AccountUpdateOne {
	auo.mutation.ResetPassedSpaceExpeditionReward()
	auo.mutation.SetPassedSpaceExpeditionReward(f)
	return auo
}

// AddPassedSpaceExpeditionReward adds f to the "passed_space_expedition_reward" field.
func (auo *AccountUpdateOne) AddPassedSpaceExpeditionReward(f float64) *AccountUpdateOne {
	auo.mutation.AddPassedSpaceExpeditionReward(f)
	return auo
}

// SetReserved sets the "reserved" field.
func (auo *AccountUpdateOne) SetReserved(s string) *AccountUpdateOne {
	auo.mutation.SetReserved(s)
	return auo
}

// SetCentralizedBeerCapsBalance sets the "centralized_beer_caps_balance" field.
func (auo *AccountUpdateOne) SetCentralizedBeerCapsBalance(i int32) *AccountUpdateOne {
	auo.mutation.ResetCentralizedBeerCapsBalance()
	auo.mutation.SetCentralizedBeerCapsBalance(i)
	return auo
}

// AddCentralizedBeerCapsBalance adds i to the "centralized_beer_caps_balance" field.
func (auo *AccountUpdateOne) AddCentralizedBeerCapsBalance(i int32) *AccountUpdateOne {
	auo.mutation.AddCentralizedBeerCapsBalance(i)
	return auo
}

// Mutation returns the AccountMutation object of the builder.
func (auo *AccountUpdateOne) Mutation() *AccountMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AccountUpdateOne) Select(field string, fields ...string) *AccountUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Account entity.
func (auo *AccountUpdateOne) Save(ctx context.Context) (*Account, error) {
	var (
		err  error
		node *Account
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, auo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Account)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AccountMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountUpdateOne) SaveX(ctx context.Context) *Account {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AccountUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AccountUpdateOne) sqlSave(ctx context.Context) (_node *Account, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   account.Table,
			Columns: account.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: account.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Account.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, account.FieldID)
		for _, f := range fields {
			if !account.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != account.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Audit(); ok {
		_spec.SetField(account.FieldAudit, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.AddedAudit(); ok {
		_spec.AddField(account.FieldAudit, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.Email(); ok {
		_spec.SetField(account.FieldEmail, field.TypeString, value)
	}
	if value, ok := auo.mutation.Nickname(); ok {
		_spec.SetField(account.FieldNickname, field.TypeString, value)
	}
	if value, ok := auo.mutation.Avatar(); ok {
		_spec.SetField(account.FieldAvatar, field.TypeString, value)
	}
	if value, ok := auo.mutation.Password(); ok {
		_spec.SetField(account.FieldPassword, field.TypeString, value)
	}
	if value, ok := auo.mutation.Disable(); ok {
		_spec.SetField(account.FieldDisable, field.TypeBool, value)
	}
	if value, ok := auo.mutation.PwdErrorNum(); ok {
		_spec.SetField(account.FieldPwdErrorNum, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedPwdErrorNum(); ok {
		_spec.AddField(account.FieldPwdErrorNum, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.PwdErrorExpireTime(); ok {
		_spec.SetField(account.FieldPwdErrorExpireTime, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedPwdErrorExpireTime(); ok {
		_spec.AddField(account.FieldPwdErrorExpireTime, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.PhoneToken(); ok {
		_spec.SetField(account.FieldPhoneToken, field.TypeString, value)
	}
	if value, ok := auo.mutation.Facebook(); ok {
		_spec.SetField(account.FieldFacebook, field.TypeString, value)
	}
	if value, ok := auo.mutation.Line(); ok {
		_spec.SetField(account.FieldLine, field.TypeString, value)
	}
	if value, ok := auo.mutation.Weibo(); ok {
		_spec.SetField(account.FieldWeibo, field.TypeString, value)
	}
	if value, ok := auo.mutation.Google(); ok {
		_spec.SetField(account.FieldGoogle, field.TypeString, value)
	}
	if value, ok := auo.mutation.Instagram(); ok {
		_spec.SetField(account.FieldInstagram, field.TypeString, value)
	}
	if value, ok := auo.mutation.Linkedin(); ok {
		_spec.SetField(account.FieldLinkedin, field.TypeString, value)
	}
	if value, ok := auo.mutation.Language(); ok {
		_spec.SetField(account.FieldLanguage, field.TypeString, value)
	}
	if value, ok := auo.mutation.Phone(); ok {
		_spec.SetField(account.FieldPhone, field.TypeString, value)
	}
	if value, ok := auo.mutation.CountryCode(); ok {
		_spec.SetField(account.FieldCountryCode, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedCountryCode(); ok {
		_spec.AddField(account.FieldCountryCode, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.Qrcode(); ok {
		_spec.SetField(account.FieldQrcode, field.TypeString, value)
	}
	if value, ok := auo.mutation.Gender(); ok {
		_spec.SetField(account.FieldGender, field.TypeBool, value)
	}
	if value, ok := auo.mutation.BirthDate(); ok {
		_spec.SetField(account.FieldBirthDate, field.TypeTime, value)
	}
	if value, ok := auo.mutation.SelfIntroduction(); ok {
		_spec.SetField(account.FieldSelfIntroduction, field.TypeString, value)
	}
	if value, ok := auo.mutation.Cover(); ok {
		_spec.SetField(account.FieldCover, field.TypeString, value)
	}
	if value, ok := auo.mutation.Photo(); ok {
		_spec.SetField(account.FieldPhoto, field.TypeString, value)
	}
	if auo.mutation.PhotoCleared() {
		_spec.ClearField(account.FieldPhoto, field.TypeString)
	}
	if value, ok := auo.mutation.Platform(); ok {
		_spec.SetField(account.FieldPlatform, field.TypeBool, value)
	}
	if value, ok := auo.mutation.LastLoginTime(); ok {
		_spec.SetField(account.FieldLastLoginTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Credit(); ok {
		_spec.SetField(account.FieldCredit, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedCredit(); ok {
		_spec.AddField(account.FieldCredit, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.HeatNum(); ok {
		_spec.SetField(account.FieldHeatNum, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedHeatNum(); ok {
		_spec.AddField(account.FieldHeatNum, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.DesignerID(); ok {
		_spec.SetField(account.FieldDesignerID, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedDesignerID(); ok {
		_spec.AddField(account.FieldDesignerID, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.Identity(); ok {
		_spec.SetField(account.FieldIdentity, field.TypeBool, value)
	}
	if value, ok := auo.mutation.Level(); ok {
		_spec.SetField(account.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedLevel(); ok {
		_spec.AddField(account.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(account.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(account.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(account.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(account.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.ChainWalletID(); ok {
		_spec.SetField(account.FieldChainWalletID, field.TypeString, value)
	}
	if value, ok := auo.mutation.DiscordAid(); ok {
		_spec.SetField(account.FieldDiscordAid, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedDiscordAid(); ok {
		_spec.AddField(account.FieldDiscordAid, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.TicketBalance(); ok {
		_spec.SetField(account.FieldTicketBalance, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedTicketBalance(); ok {
		_spec.AddField(account.FieldTicketBalance, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.OhdatTicketBalance(); ok {
		_spec.SetField(account.FieldOhdatTicketBalance, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedOhdatTicketBalance(); ok {
		_spec.AddField(account.FieldOhdatTicketBalance, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.SpaceExpeditionChance(); ok {
		_spec.SetField(account.FieldSpaceExpeditionChance, field.TypeBool, value)
	}
	if value, ok := auo.mutation.BambLockedBalance(); ok {
		_spec.SetField(account.FieldBambLockedBalance, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedBambLockedBalance(); ok {
		_spec.AddField(account.FieldBambLockedBalance, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.BambClaimableBalance(); ok {
		_spec.SetField(account.FieldBambClaimableBalance, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedBambClaimableBalance(); ok {
		_spec.AddField(account.FieldBambClaimableBalance, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.BambStaking(); ok {
		_spec.SetField(account.FieldBambStaking, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedBambStaking(); ok {
		_spec.AddField(account.FieldBambStaking, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.BamblpStaking(); ok {
		_spec.SetField(account.FieldBamblpStaking, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedBamblpStaking(); ok {
		_spec.AddField(account.FieldBamblpStaking, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.BamblpCollect(); ok {
		_spec.SetField(account.FieldBamblpCollect, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedBamblpCollect(); ok {
		_spec.AddField(account.FieldBamblpCollect, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.ChipBalance(); ok {
		_spec.SetField(account.FieldChipBalance, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedChipBalance(); ok {
		_spec.AddField(account.FieldChipBalance, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.BambooShootBalance(); ok {
		_spec.SetField(account.FieldBambooShootBalance, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedBambooShootBalance(); ok {
		_spec.AddField(account.FieldBambooShootBalance, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.PandaAirdropCount(); ok {
		_spec.SetField(account.FieldPandaAirdropCount, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedPandaAirdropCount(); ok {
		_spec.AddField(account.FieldPandaAirdropCount, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.FirstLogin(); ok {
		_spec.SetField(account.FieldFirstLogin, field.TypeBool, value)
	}
	if value, ok := auo.mutation.PassedSpaceExpeditionCount(); ok {
		_spec.SetField(account.FieldPassedSpaceExpeditionCount, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedPassedSpaceExpeditionCount(); ok {
		_spec.AddField(account.FieldPassedSpaceExpeditionCount, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.PassedSpaceExpeditionReward(); ok {
		_spec.SetField(account.FieldPassedSpaceExpeditionReward, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.AddedPassedSpaceExpeditionReward(); ok {
		_spec.AddField(account.FieldPassedSpaceExpeditionReward, field.TypeFloat64, value)
	}
	if value, ok := auo.mutation.Reserved(); ok {
		_spec.SetField(account.FieldReserved, field.TypeString, value)
	}
	if value, ok := auo.mutation.CentralizedBeerCapsBalance(); ok {
		_spec.SetField(account.FieldCentralizedBeerCapsBalance, field.TypeInt32, value)
	}
	if value, ok := auo.mutation.AddedCentralizedBeerCapsBalance(); ok {
		_spec.AddField(account.FieldCentralizedBeerCapsBalance, field.TypeInt32, value)
	}
	_node = &Account{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
