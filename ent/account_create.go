// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ohdat/entmod/ent/account"
)

// AccountCreate is the builder for creating a Account entity.
type AccountCreate struct {
	config
	mutation *AccountMutation
	hooks    []Hook
}

// SetAudit sets the "audit" field.
func (ac *AccountCreate) SetAudit(u uint8) *AccountCreate {
	ac.mutation.SetAudit(u)
	return ac
}

// SetEmail sets the "email" field.
func (ac *AccountCreate) SetEmail(s string) *AccountCreate {
	ac.mutation.SetEmail(s)
	return ac
}

// SetNickname sets the "nickname" field.
func (ac *AccountCreate) SetNickname(s string) *AccountCreate {
	ac.mutation.SetNickname(s)
	return ac
}

// SetAvatar sets the "avatar" field.
func (ac *AccountCreate) SetAvatar(s string) *AccountCreate {
	ac.mutation.SetAvatar(s)
	return ac
}

// SetPassword sets the "password" field.
func (ac *AccountCreate) SetPassword(s string) *AccountCreate {
	ac.mutation.SetPassword(s)
	return ac
}

// SetDisable sets the "disable" field.
func (ac *AccountCreate) SetDisable(b bool) *AccountCreate {
	ac.mutation.SetDisable(b)
	return ac
}

// SetPwdErrorNum sets the "pwd_error_num" field.
func (ac *AccountCreate) SetPwdErrorNum(i int32) *AccountCreate {
	ac.mutation.SetPwdErrorNum(i)
	return ac
}

// SetPwdErrorExpireTime sets the "pwd_error_expire_time" field.
func (ac *AccountCreate) SetPwdErrorExpireTime(i int32) *AccountCreate {
	ac.mutation.SetPwdErrorExpireTime(i)
	return ac
}

// SetPhoneToken sets the "phone_token" field.
func (ac *AccountCreate) SetPhoneToken(s string) *AccountCreate {
	ac.mutation.SetPhoneToken(s)
	return ac
}

// SetFacebook sets the "facebook" field.
func (ac *AccountCreate) SetFacebook(s string) *AccountCreate {
	ac.mutation.SetFacebook(s)
	return ac
}

// SetLine sets the "line" field.
func (ac *AccountCreate) SetLine(s string) *AccountCreate {
	ac.mutation.SetLine(s)
	return ac
}

// SetWeibo sets the "weibo" field.
func (ac *AccountCreate) SetWeibo(s string) *AccountCreate {
	ac.mutation.SetWeibo(s)
	return ac
}

// SetGoogle sets the "google" field.
func (ac *AccountCreate) SetGoogle(s string) *AccountCreate {
	ac.mutation.SetGoogle(s)
	return ac
}

// SetInstagram sets the "instagram" field.
func (ac *AccountCreate) SetInstagram(s string) *AccountCreate {
	ac.mutation.SetInstagram(s)
	return ac
}

// SetLinkedin sets the "linkedin" field.
func (ac *AccountCreate) SetLinkedin(s string) *AccountCreate {
	ac.mutation.SetLinkedin(s)
	return ac
}

// SetLanguage sets the "language" field.
func (ac *AccountCreate) SetLanguage(s string) *AccountCreate {
	ac.mutation.SetLanguage(s)
	return ac
}

// SetPhone sets the "phone" field.
func (ac *AccountCreate) SetPhone(s string) *AccountCreate {
	ac.mutation.SetPhone(s)
	return ac
}

// SetCountryCode sets the "country_code" field.
func (ac *AccountCreate) SetCountryCode(i int32) *AccountCreate {
	ac.mutation.SetCountryCode(i)
	return ac
}

// SetQrcode sets the "qrcode" field.
func (ac *AccountCreate) SetQrcode(s string) *AccountCreate {
	ac.mutation.SetQrcode(s)
	return ac
}

// SetGender sets the "gender" field.
func (ac *AccountCreate) SetGender(b bool) *AccountCreate {
	ac.mutation.SetGender(b)
	return ac
}

// SetBirthDate sets the "birth_date" field.
func (ac *AccountCreate) SetBirthDate(t time.Time) *AccountCreate {
	ac.mutation.SetBirthDate(t)
	return ac
}

// SetSelfIntroduction sets the "self_introduction" field.
func (ac *AccountCreate) SetSelfIntroduction(s string) *AccountCreate {
	ac.mutation.SetSelfIntroduction(s)
	return ac
}

// SetCover sets the "cover" field.
func (ac *AccountCreate) SetCover(s string) *AccountCreate {
	ac.mutation.SetCover(s)
	return ac
}

// SetPhoto sets the "photo" field.
func (ac *AccountCreate) SetPhoto(s string) *AccountCreate {
	ac.mutation.SetPhoto(s)
	return ac
}

// SetNillablePhoto sets the "photo" field if the given value is not nil.
func (ac *AccountCreate) SetNillablePhoto(s *string) *AccountCreate {
	if s != nil {
		ac.SetPhoto(*s)
	}
	return ac
}

// SetPlatform sets the "platform" field.
func (ac *AccountCreate) SetPlatform(b bool) *AccountCreate {
	ac.mutation.SetPlatform(b)
	return ac
}

// SetLastLoginTime sets the "last_login_time" field.
func (ac *AccountCreate) SetLastLoginTime(t time.Time) *AccountCreate {
	ac.mutation.SetLastLoginTime(t)
	return ac
}

// SetCredit sets the "credit" field.
func (ac *AccountCreate) SetCredit(i int32) *AccountCreate {
	ac.mutation.SetCredit(i)
	return ac
}

// SetHeatNum sets the "heat_num" field.
func (ac *AccountCreate) SetHeatNum(i int32) *AccountCreate {
	ac.mutation.SetHeatNum(i)
	return ac
}

// SetDesignerID sets the "designer_id" field.
func (ac *AccountCreate) SetDesignerID(i int32) *AccountCreate {
	ac.mutation.SetDesignerID(i)
	return ac
}

// SetIdentity sets the "identity" field.
func (ac *AccountCreate) SetIdentity(b bool) *AccountCreate {
	ac.mutation.SetIdentity(b)
	return ac
}

// SetLevel sets the "level" field.
func (ac *AccountCreate) SetLevel(i int32) *AccountCreate {
	ac.mutation.SetLevel(i)
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AccountCreate) SetUpdatedAt(t time.Time) *AccountCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AccountCreate) SetDeletedAt(t time.Time) *AccountCreate {
	ac.mutation.SetDeletedAt(t)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableDeletedAt(t *time.Time) *AccountCreate {
	if t != nil {
		ac.SetDeletedAt(*t)
	}
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *AccountCreate) SetCreatedAt(t time.Time) *AccountCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetChainWalletID sets the "chain_wallet_id" field.
func (ac *AccountCreate) SetChainWalletID(s string) *AccountCreate {
	ac.mutation.SetChainWalletID(s)
	return ac
}

// SetDiscordAid sets the "discord_aid" field.
func (ac *AccountCreate) SetDiscordAid(i int32) *AccountCreate {
	ac.mutation.SetDiscordAid(i)
	return ac
}

// SetTicketBalance sets the "ticket_balance" field.
func (ac *AccountCreate) SetTicketBalance(i int32) *AccountCreate {
	ac.mutation.SetTicketBalance(i)
	return ac
}

// SetOhdatTicketBalance sets the "ohdat_ticket_balance" field.
func (ac *AccountCreate) SetOhdatTicketBalance(i int32) *AccountCreate {
	ac.mutation.SetOhdatTicketBalance(i)
	return ac
}

// SetSpaceExpeditionChance sets the "space_expedition_chance" field.
func (ac *AccountCreate) SetSpaceExpeditionChance(b bool) *AccountCreate {
	ac.mutation.SetSpaceExpeditionChance(b)
	return ac
}

// SetBambLockedBalance sets the "bamb_locked_balance" field.
func (ac *AccountCreate) SetBambLockedBalance(f float64) *AccountCreate {
	ac.mutation.SetBambLockedBalance(f)
	return ac
}

// SetBambClaimableBalance sets the "bamb_claimable_balance" field.
func (ac *AccountCreate) SetBambClaimableBalance(f float64) *AccountCreate {
	ac.mutation.SetBambClaimableBalance(f)
	return ac
}

// SetBambStaking sets the "bamb_staking" field.
func (ac *AccountCreate) SetBambStaking(f float64) *AccountCreate {
	ac.mutation.SetBambStaking(f)
	return ac
}

// SetBamblpStaking sets the "bamblp_staking" field.
func (ac *AccountCreate) SetBamblpStaking(f float64) *AccountCreate {
	ac.mutation.SetBamblpStaking(f)
	return ac
}

// SetBamblpCollect sets the "bamblp_collect" field.
func (ac *AccountCreate) SetBamblpCollect(f float64) *AccountCreate {
	ac.mutation.SetBamblpCollect(f)
	return ac
}

// SetChipBalance sets the "chip_balance" field.
func (ac *AccountCreate) SetChipBalance(f float64) *AccountCreate {
	ac.mutation.SetChipBalance(f)
	return ac
}

// SetBambooShootBalance sets the "bamboo_shoot_balance" field.
func (ac *AccountCreate) SetBambooShootBalance(i int32) *AccountCreate {
	ac.mutation.SetBambooShootBalance(i)
	return ac
}

// SetPandaAirdropCount sets the "panda_airdrop_count" field.
func (ac *AccountCreate) SetPandaAirdropCount(i int32) *AccountCreate {
	ac.mutation.SetPandaAirdropCount(i)
	return ac
}

// SetFirstLogin sets the "first_login" field.
func (ac *AccountCreate) SetFirstLogin(b bool) *AccountCreate {
	ac.mutation.SetFirstLogin(b)
	return ac
}

// SetPassedSpaceExpeditionCount sets the "passed_space_expedition_count" field.
func (ac *AccountCreate) SetPassedSpaceExpeditionCount(i int32) *AccountCreate {
	ac.mutation.SetPassedSpaceExpeditionCount(i)
	return ac
}

// SetPassedSpaceExpeditionReward sets the "passed_space_expedition_reward" field.
func (ac *AccountCreate) SetPassedSpaceExpeditionReward(f float64) *AccountCreate {
	ac.mutation.SetPassedSpaceExpeditionReward(f)
	return ac
}

// SetReserved sets the "reserved" field.
func (ac *AccountCreate) SetReserved(s string) *AccountCreate {
	ac.mutation.SetReserved(s)
	return ac
}

// SetCentralizedBeerCapsBalance sets the "centralized_beer_caps_balance" field.
func (ac *AccountCreate) SetCentralizedBeerCapsBalance(i int32) *AccountCreate {
	ac.mutation.SetCentralizedBeerCapsBalance(i)
	return ac
}

// SetID sets the "id" field.
func (ac *AccountCreate) SetID(i int32) *AccountCreate {
	ac.mutation.SetID(i)
	return ac
}

// Mutation returns the AccountMutation object of the builder.
func (ac *AccountCreate) Mutation() *AccountMutation {
	return ac.mutation
}

// Save creates the Account in the database.
func (ac *AccountCreate) Save(ctx context.Context) (*Account, error) {
	var (
		err  error
		node *Account
	)
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Account)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AccountMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccountCreate) SaveX(ctx context.Context) *Account {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AccountCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AccountCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccountCreate) check() error {
	if _, ok := ac.mutation.Audit(); !ok {
		return &ValidationError{Name: "audit", err: errors.New(`ent: missing required field "Account.audit"`)}
	}
	if _, ok := ac.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Account.email"`)}
	}
	if _, ok := ac.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "Account.nickname"`)}
	}
	if _, ok := ac.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "Account.avatar"`)}
	}
	if _, ok := ac.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "Account.password"`)}
	}
	if _, ok := ac.mutation.Disable(); !ok {
		return &ValidationError{Name: "disable", err: errors.New(`ent: missing required field "Account.disable"`)}
	}
	if _, ok := ac.mutation.PwdErrorNum(); !ok {
		return &ValidationError{Name: "pwd_error_num", err: errors.New(`ent: missing required field "Account.pwd_error_num"`)}
	}
	if _, ok := ac.mutation.PwdErrorExpireTime(); !ok {
		return &ValidationError{Name: "pwd_error_expire_time", err: errors.New(`ent: missing required field "Account.pwd_error_expire_time"`)}
	}
	if _, ok := ac.mutation.PhoneToken(); !ok {
		return &ValidationError{Name: "phone_token", err: errors.New(`ent: missing required field "Account.phone_token"`)}
	}
	if _, ok := ac.mutation.Facebook(); !ok {
		return &ValidationError{Name: "facebook", err: errors.New(`ent: missing required field "Account.facebook"`)}
	}
	if _, ok := ac.mutation.Line(); !ok {
		return &ValidationError{Name: "line", err: errors.New(`ent: missing required field "Account.line"`)}
	}
	if _, ok := ac.mutation.Weibo(); !ok {
		return &ValidationError{Name: "weibo", err: errors.New(`ent: missing required field "Account.weibo"`)}
	}
	if _, ok := ac.mutation.Google(); !ok {
		return &ValidationError{Name: "google", err: errors.New(`ent: missing required field "Account.google"`)}
	}
	if _, ok := ac.mutation.Instagram(); !ok {
		return &ValidationError{Name: "instagram", err: errors.New(`ent: missing required field "Account.instagram"`)}
	}
	if _, ok := ac.mutation.Linkedin(); !ok {
		return &ValidationError{Name: "linkedin", err: errors.New(`ent: missing required field "Account.linkedin"`)}
	}
	if _, ok := ac.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Account.language"`)}
	}
	if _, ok := ac.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "Account.phone"`)}
	}
	if _, ok := ac.mutation.CountryCode(); !ok {
		return &ValidationError{Name: "country_code", err: errors.New(`ent: missing required field "Account.country_code"`)}
	}
	if _, ok := ac.mutation.Qrcode(); !ok {
		return &ValidationError{Name: "qrcode", err: errors.New(`ent: missing required field "Account.qrcode"`)}
	}
	if _, ok := ac.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "Account.gender"`)}
	}
	if _, ok := ac.mutation.BirthDate(); !ok {
		return &ValidationError{Name: "birth_date", err: errors.New(`ent: missing required field "Account.birth_date"`)}
	}
	if _, ok := ac.mutation.SelfIntroduction(); !ok {
		return &ValidationError{Name: "self_introduction", err: errors.New(`ent: missing required field "Account.self_introduction"`)}
	}
	if _, ok := ac.mutation.Cover(); !ok {
		return &ValidationError{Name: "cover", err: errors.New(`ent: missing required field "Account.cover"`)}
	}
	if _, ok := ac.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "Account.platform"`)}
	}
	if _, ok := ac.mutation.LastLoginTime(); !ok {
		return &ValidationError{Name: "last_login_time", err: errors.New(`ent: missing required field "Account.last_login_time"`)}
	}
	if _, ok := ac.mutation.Credit(); !ok {
		return &ValidationError{Name: "credit", err: errors.New(`ent: missing required field "Account.credit"`)}
	}
	if _, ok := ac.mutation.HeatNum(); !ok {
		return &ValidationError{Name: "heat_num", err: errors.New(`ent: missing required field "Account.heat_num"`)}
	}
	if _, ok := ac.mutation.DesignerID(); !ok {
		return &ValidationError{Name: "designer_id", err: errors.New(`ent: missing required field "Account.designer_id"`)}
	}
	if _, ok := ac.mutation.Identity(); !ok {
		return &ValidationError{Name: "identity", err: errors.New(`ent: missing required field "Account.identity"`)}
	}
	if _, ok := ac.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Account.level"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Account.updated_at"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Account.created_at"`)}
	}
	if _, ok := ac.mutation.ChainWalletID(); !ok {
		return &ValidationError{Name: "chain_wallet_id", err: errors.New(`ent: missing required field "Account.chain_wallet_id"`)}
	}
	if _, ok := ac.mutation.DiscordAid(); !ok {
		return &ValidationError{Name: "discord_aid", err: errors.New(`ent: missing required field "Account.discord_aid"`)}
	}
	if _, ok := ac.mutation.TicketBalance(); !ok {
		return &ValidationError{Name: "ticket_balance", err: errors.New(`ent: missing required field "Account.ticket_balance"`)}
	}
	if _, ok := ac.mutation.OhdatTicketBalance(); !ok {
		return &ValidationError{Name: "ohdat_ticket_balance", err: errors.New(`ent: missing required field "Account.ohdat_ticket_balance"`)}
	}
	if _, ok := ac.mutation.SpaceExpeditionChance(); !ok {
		return &ValidationError{Name: "space_expedition_chance", err: errors.New(`ent: missing required field "Account.space_expedition_chance"`)}
	}
	if _, ok := ac.mutation.BambLockedBalance(); !ok {
		return &ValidationError{Name: "bamb_locked_balance", err: errors.New(`ent: missing required field "Account.bamb_locked_balance"`)}
	}
	if _, ok := ac.mutation.BambClaimableBalance(); !ok {
		return &ValidationError{Name: "bamb_claimable_balance", err: errors.New(`ent: missing required field "Account.bamb_claimable_balance"`)}
	}
	if _, ok := ac.mutation.BambStaking(); !ok {
		return &ValidationError{Name: "bamb_staking", err: errors.New(`ent: missing required field "Account.bamb_staking"`)}
	}
	if _, ok := ac.mutation.BamblpStaking(); !ok {
		return &ValidationError{Name: "bamblp_staking", err: errors.New(`ent: missing required field "Account.bamblp_staking"`)}
	}
	if _, ok := ac.mutation.BamblpCollect(); !ok {
		return &ValidationError{Name: "bamblp_collect", err: errors.New(`ent: missing required field "Account.bamblp_collect"`)}
	}
	if _, ok := ac.mutation.ChipBalance(); !ok {
		return &ValidationError{Name: "chip_balance", err: errors.New(`ent: missing required field "Account.chip_balance"`)}
	}
	if _, ok := ac.mutation.BambooShootBalance(); !ok {
		return &ValidationError{Name: "bamboo_shoot_balance", err: errors.New(`ent: missing required field "Account.bamboo_shoot_balance"`)}
	}
	if _, ok := ac.mutation.PandaAirdropCount(); !ok {
		return &ValidationError{Name: "panda_airdrop_count", err: errors.New(`ent: missing required field "Account.panda_airdrop_count"`)}
	}
	if _, ok := ac.mutation.FirstLogin(); !ok {
		return &ValidationError{Name: "first_login", err: errors.New(`ent: missing required field "Account.first_login"`)}
	}
	if _, ok := ac.mutation.PassedSpaceExpeditionCount(); !ok {
		return &ValidationError{Name: "passed_space_expedition_count", err: errors.New(`ent: missing required field "Account.passed_space_expedition_count"`)}
	}
	if _, ok := ac.mutation.PassedSpaceExpeditionReward(); !ok {
		return &ValidationError{Name: "passed_space_expedition_reward", err: errors.New(`ent: missing required field "Account.passed_space_expedition_reward"`)}
	}
	if _, ok := ac.mutation.Reserved(); !ok {
		return &ValidationError{Name: "reserved", err: errors.New(`ent: missing required field "Account.reserved"`)}
	}
	if _, ok := ac.mutation.CentralizedBeerCapsBalance(); !ok {
		return &ValidationError{Name: "centralized_beer_caps_balance", err: errors.New(`ent: missing required field "Account.centralized_beer_caps_balance"`)}
	}
	return nil
}

func (ac *AccountCreate) sqlSave(ctx context.Context) (*Account, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	return _node, nil
}

func (ac *AccountCreate) createSpec() (*Account, *sqlgraph.CreateSpec) {
	var (
		_node = &Account{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: account.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt32,
				Column: account.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Audit(); ok {
		_spec.SetField(account.FieldAudit, field.TypeUint8, value)
		_node.Audit = value
	}
	if value, ok := ac.mutation.Email(); ok {
		_spec.SetField(account.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := ac.mutation.Nickname(); ok {
		_spec.SetField(account.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := ac.mutation.Avatar(); ok {
		_spec.SetField(account.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := ac.mutation.Password(); ok {
		_spec.SetField(account.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := ac.mutation.Disable(); ok {
		_spec.SetField(account.FieldDisable, field.TypeBool, value)
		_node.Disable = value
	}
	if value, ok := ac.mutation.PwdErrorNum(); ok {
		_spec.SetField(account.FieldPwdErrorNum, field.TypeInt32, value)
		_node.PwdErrorNum = value
	}
	if value, ok := ac.mutation.PwdErrorExpireTime(); ok {
		_spec.SetField(account.FieldPwdErrorExpireTime, field.TypeInt32, value)
		_node.PwdErrorExpireTime = value
	}
	if value, ok := ac.mutation.PhoneToken(); ok {
		_spec.SetField(account.FieldPhoneToken, field.TypeString, value)
		_node.PhoneToken = value
	}
	if value, ok := ac.mutation.Facebook(); ok {
		_spec.SetField(account.FieldFacebook, field.TypeString, value)
		_node.Facebook = value
	}
	if value, ok := ac.mutation.Line(); ok {
		_spec.SetField(account.FieldLine, field.TypeString, value)
		_node.Line = value
	}
	if value, ok := ac.mutation.Weibo(); ok {
		_spec.SetField(account.FieldWeibo, field.TypeString, value)
		_node.Weibo = value
	}
	if value, ok := ac.mutation.Google(); ok {
		_spec.SetField(account.FieldGoogle, field.TypeString, value)
		_node.Google = value
	}
	if value, ok := ac.mutation.Instagram(); ok {
		_spec.SetField(account.FieldInstagram, field.TypeString, value)
		_node.Instagram = value
	}
	if value, ok := ac.mutation.Linkedin(); ok {
		_spec.SetField(account.FieldLinkedin, field.TypeString, value)
		_node.Linkedin = value
	}
	if value, ok := ac.mutation.Language(); ok {
		_spec.SetField(account.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := ac.mutation.Phone(); ok {
		_spec.SetField(account.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := ac.mutation.CountryCode(); ok {
		_spec.SetField(account.FieldCountryCode, field.TypeInt32, value)
		_node.CountryCode = value
	}
	if value, ok := ac.mutation.Qrcode(); ok {
		_spec.SetField(account.FieldQrcode, field.TypeString, value)
		_node.Qrcode = value
	}
	if value, ok := ac.mutation.Gender(); ok {
		_spec.SetField(account.FieldGender, field.TypeBool, value)
		_node.Gender = value
	}
	if value, ok := ac.mutation.BirthDate(); ok {
		_spec.SetField(account.FieldBirthDate, field.TypeTime, value)
		_node.BirthDate = value
	}
	if value, ok := ac.mutation.SelfIntroduction(); ok {
		_spec.SetField(account.FieldSelfIntroduction, field.TypeString, value)
		_node.SelfIntroduction = value
	}
	if value, ok := ac.mutation.Cover(); ok {
		_spec.SetField(account.FieldCover, field.TypeString, value)
		_node.Cover = value
	}
	if value, ok := ac.mutation.Photo(); ok {
		_spec.SetField(account.FieldPhoto, field.TypeString, value)
		_node.Photo = value
	}
	if value, ok := ac.mutation.Platform(); ok {
		_spec.SetField(account.FieldPlatform, field.TypeBool, value)
		_node.Platform = value
	}
	if value, ok := ac.mutation.LastLoginTime(); ok {
		_spec.SetField(account.FieldLastLoginTime, field.TypeTime, value)
		_node.LastLoginTime = value
	}
	if value, ok := ac.mutation.Credit(); ok {
		_spec.SetField(account.FieldCredit, field.TypeInt32, value)
		_node.Credit = value
	}
	if value, ok := ac.mutation.HeatNum(); ok {
		_spec.SetField(account.FieldHeatNum, field.TypeInt32, value)
		_node.HeatNum = value
	}
	if value, ok := ac.mutation.DesignerID(); ok {
		_spec.SetField(account.FieldDesignerID, field.TypeInt32, value)
		_node.DesignerID = value
	}
	if value, ok := ac.mutation.Identity(); ok {
		_spec.SetField(account.FieldIdentity, field.TypeBool, value)
		_node.Identity = value
	}
	if value, ok := ac.mutation.Level(); ok {
		_spec.SetField(account.FieldLevel, field.TypeInt32, value)
		_node.Level = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(account.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.SetField(account.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(account.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.ChainWalletID(); ok {
		_spec.SetField(account.FieldChainWalletID, field.TypeString, value)
		_node.ChainWalletID = value
	}
	if value, ok := ac.mutation.DiscordAid(); ok {
		_spec.SetField(account.FieldDiscordAid, field.TypeInt32, value)
		_node.DiscordAid = value
	}
	if value, ok := ac.mutation.TicketBalance(); ok {
		_spec.SetField(account.FieldTicketBalance, field.TypeInt32, value)
		_node.TicketBalance = value
	}
	if value, ok := ac.mutation.OhdatTicketBalance(); ok {
		_spec.SetField(account.FieldOhdatTicketBalance, field.TypeInt32, value)
		_node.OhdatTicketBalance = value
	}
	if value, ok := ac.mutation.SpaceExpeditionChance(); ok {
		_spec.SetField(account.FieldSpaceExpeditionChance, field.TypeBool, value)
		_node.SpaceExpeditionChance = value
	}
	if value, ok := ac.mutation.BambLockedBalance(); ok {
		_spec.SetField(account.FieldBambLockedBalance, field.TypeFloat64, value)
		_node.BambLockedBalance = value
	}
	if value, ok := ac.mutation.BambClaimableBalance(); ok {
		_spec.SetField(account.FieldBambClaimableBalance, field.TypeFloat64, value)
		_node.BambClaimableBalance = value
	}
	if value, ok := ac.mutation.BambStaking(); ok {
		_spec.SetField(account.FieldBambStaking, field.TypeFloat64, value)
		_node.BambStaking = value
	}
	if value, ok := ac.mutation.BamblpStaking(); ok {
		_spec.SetField(account.FieldBamblpStaking, field.TypeFloat64, value)
		_node.BamblpStaking = value
	}
	if value, ok := ac.mutation.BamblpCollect(); ok {
		_spec.SetField(account.FieldBamblpCollect, field.TypeFloat64, value)
		_node.BamblpCollect = value
	}
	if value, ok := ac.mutation.ChipBalance(); ok {
		_spec.SetField(account.FieldChipBalance, field.TypeFloat64, value)
		_node.ChipBalance = value
	}
	if value, ok := ac.mutation.BambooShootBalance(); ok {
		_spec.SetField(account.FieldBambooShootBalance, field.TypeInt32, value)
		_node.BambooShootBalance = value
	}
	if value, ok := ac.mutation.PandaAirdropCount(); ok {
		_spec.SetField(account.FieldPandaAirdropCount, field.TypeInt32, value)
		_node.PandaAirdropCount = value
	}
	if value, ok := ac.mutation.FirstLogin(); ok {
		_spec.SetField(account.FieldFirstLogin, field.TypeBool, value)
		_node.FirstLogin = value
	}
	if value, ok := ac.mutation.PassedSpaceExpeditionCount(); ok {
		_spec.SetField(account.FieldPassedSpaceExpeditionCount, field.TypeInt32, value)
		_node.PassedSpaceExpeditionCount = value
	}
	if value, ok := ac.mutation.PassedSpaceExpeditionReward(); ok {
		_spec.SetField(account.FieldPassedSpaceExpeditionReward, field.TypeFloat64, value)
		_node.PassedSpaceExpeditionReward = value
	}
	if value, ok := ac.mutation.Reserved(); ok {
		_spec.SetField(account.FieldReserved, field.TypeString, value)
		_node.Reserved = value
	}
	if value, ok := ac.mutation.CentralizedBeerCapsBalance(); ok {
		_spec.SetField(account.FieldCentralizedBeerCapsBalance, field.TypeInt32, value)
		_node.CentralizedBeerCapsBalance = value
	}
	return _node, _spec
}

// AccountCreateBulk is the builder for creating many Account entities in bulk.
type AccountCreateBulk struct {
	config
	builders []*AccountCreate
}

// Save creates the Account entities in the database.
func (acb *AccountCreateBulk) Save(ctx context.Context) ([]*Account, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Account, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccountCreateBulk) SaveX(ctx context.Context) []*Account {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AccountCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AccountCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
