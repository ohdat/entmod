// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/ohdat/entmod/ent/account"
	"github.com/ohdat/entmod/ent/predicate"
	"github.com/ohdat/entmod/ent/questionnaireiqiyi"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccount            = "Account"
	TypeQuestionnaireIqiyi = "QuestionnaireIqiyi"
)

// AccountMutation represents an operation that mutates the Account nodes in the graph.
type AccountMutation struct {
	config
	op                                Op
	typ                               string
	id                                *int32
	audit                             *uint8
	addaudit                          *int8
	email                             *string
	nickname                          *string
	avatar                            *string
	password                          *string
	disable                           *bool
	pwd_error_num                     *int32
	addpwd_error_num                  *int32
	pwd_error_expire_time             *int32
	addpwd_error_expire_time          *int32
	phone_token                       *string
	facebook                          *string
	line                              *string
	weibo                             *string
	google                            *string
	instagram                         *string
	linkedin                          *string
	language                          *string
	phone                             *string
	country_code                      *int32
	addcountry_code                   *int32
	qrcode                            *string
	gender                            *bool
	birth_date                        *time.Time
	self_introduction                 *string
	cover                             *string
	photo                             *string
	platform                          *bool
	last_login_time                   *time.Time
	credit                            *int32
	addcredit                         *int32
	heat_num                          *int32
	addheat_num                       *int32
	designer_id                       *int32
	adddesigner_id                    *int32
	identity                          *bool
	level                             *int32
	addlevel                          *int32
	updated_at                        *time.Time
	deleted_at                        *time.Time
	created_at                        *time.Time
	chain_wallet_id                   *string
	discord_aid                       *int32
	adddiscord_aid                    *int32
	ticket_balance                    *int32
	addticket_balance                 *int32
	ohdat_ticket_balance              *int32
	addohdat_ticket_balance           *int32
	space_expedition_chance           *bool
	bamb_locked_balance               *float64
	addbamb_locked_balance            *float64
	bamb_claimable_balance            *float64
	addbamb_claimable_balance         *float64
	bamb_staking                      *float64
	addbamb_staking                   *float64
	bamblp_staking                    *float64
	addbamblp_staking                 *float64
	bamblp_collect                    *float64
	addbamblp_collect                 *float64
	chip_balance                      *float64
	addchip_balance                   *float64
	bamboo_shoot_balance              *int32
	addbamboo_shoot_balance           *int32
	panda_airdrop_count               *int32
	addpanda_airdrop_count            *int32
	first_login                       *bool
	passed_space_expedition_count     *int32
	addpassed_space_expedition_count  *int32
	passed_space_expedition_reward    *float64
	addpassed_space_expedition_reward *float64
	reserved                          *string
	centralized_beer_caps_balance     *int32
	addcentralized_beer_caps_balance  *int32
	clearedFields                     map[string]struct{}
	done                              bool
	oldValue                          func(context.Context) (*Account, error)
	predicates                        []predicate.Account
}

var _ ent.Mutation = (*AccountMutation)(nil)

// accountOption allows management of the mutation configuration using functional options.
type accountOption func(*AccountMutation)

// newAccountMutation creates new mutation for the Account entity.
func newAccountMutation(c config, op Op, opts ...accountOption) *AccountMutation {
	m := &AccountMutation{
		config:        c,
		op:            op,
		typ:           TypeAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccountID sets the ID field of the mutation.
func withAccountID(id int32) accountOption {
	return func(m *AccountMutation) {
		var (
			err   error
			once  sync.Once
			value *Account
		)
		m.oldValue = func(ctx context.Context) (*Account, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Account.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccount sets the old Account of the mutation.
func withAccount(node *Account) accountOption {
	return func(m *AccountMutation) {
		m.oldValue = func(context.Context) (*Account, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Account entities.
func (m *AccountMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccountMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccountMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Account.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAudit sets the "audit" field.
func (m *AccountMutation) SetAudit(u uint8) {
	m.audit = &u
	m.addaudit = nil
}

// Audit returns the value of the "audit" field in the mutation.
func (m *AccountMutation) Audit() (r uint8, exists bool) {
	v := m.audit
	if v == nil {
		return
	}
	return *v, true
}

// OldAudit returns the old "audit" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldAudit(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAudit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAudit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAudit: %w", err)
	}
	return oldValue.Audit, nil
}

// AddAudit adds u to the "audit" field.
func (m *AccountMutation) AddAudit(u int8) {
	if m.addaudit != nil {
		*m.addaudit += u
	} else {
		m.addaudit = &u
	}
}

// AddedAudit returns the value that was added to the "audit" field in this mutation.
func (m *AccountMutation) AddedAudit() (r int8, exists bool) {
	v := m.addaudit
	if v == nil {
		return
	}
	return *v, true
}

// ResetAudit resets all changes to the "audit" field.
func (m *AccountMutation) ResetAudit() {
	m.audit = nil
	m.addaudit = nil
}

// SetEmail sets the "email" field.
func (m *AccountMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *AccountMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *AccountMutation) ResetEmail() {
	m.email = nil
}

// SetNickname sets the "nickname" field.
func (m *AccountMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *AccountMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *AccountMutation) ResetNickname() {
	m.nickname = nil
}

// SetAvatar sets the "avatar" field.
func (m *AccountMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *AccountMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *AccountMutation) ResetAvatar() {
	m.avatar = nil
}

// SetPassword sets the "password" field.
func (m *AccountMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *AccountMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *AccountMutation) ResetPassword() {
	m.password = nil
}

// SetDisable sets the "disable" field.
func (m *AccountMutation) SetDisable(b bool) {
	m.disable = &b
}

// Disable returns the value of the "disable" field in the mutation.
func (m *AccountMutation) Disable() (r bool, exists bool) {
	v := m.disable
	if v == nil {
		return
	}
	return *v, true
}

// OldDisable returns the old "disable" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldDisable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisable: %w", err)
	}
	return oldValue.Disable, nil
}

// ResetDisable resets all changes to the "disable" field.
func (m *AccountMutation) ResetDisable() {
	m.disable = nil
}

// SetPwdErrorNum sets the "pwd_error_num" field.
func (m *AccountMutation) SetPwdErrorNum(i int32) {
	m.pwd_error_num = &i
	m.addpwd_error_num = nil
}

// PwdErrorNum returns the value of the "pwd_error_num" field in the mutation.
func (m *AccountMutation) PwdErrorNum() (r int32, exists bool) {
	v := m.pwd_error_num
	if v == nil {
		return
	}
	return *v, true
}

// OldPwdErrorNum returns the old "pwd_error_num" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPwdErrorNum(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPwdErrorNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPwdErrorNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPwdErrorNum: %w", err)
	}
	return oldValue.PwdErrorNum, nil
}

// AddPwdErrorNum adds i to the "pwd_error_num" field.
func (m *AccountMutation) AddPwdErrorNum(i int32) {
	if m.addpwd_error_num != nil {
		*m.addpwd_error_num += i
	} else {
		m.addpwd_error_num = &i
	}
}

// AddedPwdErrorNum returns the value that was added to the "pwd_error_num" field in this mutation.
func (m *AccountMutation) AddedPwdErrorNum() (r int32, exists bool) {
	v := m.addpwd_error_num
	if v == nil {
		return
	}
	return *v, true
}

// ResetPwdErrorNum resets all changes to the "pwd_error_num" field.
func (m *AccountMutation) ResetPwdErrorNum() {
	m.pwd_error_num = nil
	m.addpwd_error_num = nil
}

// SetPwdErrorExpireTime sets the "pwd_error_expire_time" field.
func (m *AccountMutation) SetPwdErrorExpireTime(i int32) {
	m.pwd_error_expire_time = &i
	m.addpwd_error_expire_time = nil
}

// PwdErrorExpireTime returns the value of the "pwd_error_expire_time" field in the mutation.
func (m *AccountMutation) PwdErrorExpireTime() (r int32, exists bool) {
	v := m.pwd_error_expire_time
	if v == nil {
		return
	}
	return *v, true
}

// OldPwdErrorExpireTime returns the old "pwd_error_expire_time" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPwdErrorExpireTime(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPwdErrorExpireTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPwdErrorExpireTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPwdErrorExpireTime: %w", err)
	}
	return oldValue.PwdErrorExpireTime, nil
}

// AddPwdErrorExpireTime adds i to the "pwd_error_expire_time" field.
func (m *AccountMutation) AddPwdErrorExpireTime(i int32) {
	if m.addpwd_error_expire_time != nil {
		*m.addpwd_error_expire_time += i
	} else {
		m.addpwd_error_expire_time = &i
	}
}

// AddedPwdErrorExpireTime returns the value that was added to the "pwd_error_expire_time" field in this mutation.
func (m *AccountMutation) AddedPwdErrorExpireTime() (r int32, exists bool) {
	v := m.addpwd_error_expire_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetPwdErrorExpireTime resets all changes to the "pwd_error_expire_time" field.
func (m *AccountMutation) ResetPwdErrorExpireTime() {
	m.pwd_error_expire_time = nil
	m.addpwd_error_expire_time = nil
}

// SetPhoneToken sets the "phone_token" field.
func (m *AccountMutation) SetPhoneToken(s string) {
	m.phone_token = &s
}

// PhoneToken returns the value of the "phone_token" field in the mutation.
func (m *AccountMutation) PhoneToken() (r string, exists bool) {
	v := m.phone_token
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneToken returns the old "phone_token" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPhoneToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneToken: %w", err)
	}
	return oldValue.PhoneToken, nil
}

// ResetPhoneToken resets all changes to the "phone_token" field.
func (m *AccountMutation) ResetPhoneToken() {
	m.phone_token = nil
}

// SetFacebook sets the "facebook" field.
func (m *AccountMutation) SetFacebook(s string) {
	m.facebook = &s
}

// Facebook returns the value of the "facebook" field in the mutation.
func (m *AccountMutation) Facebook() (r string, exists bool) {
	v := m.facebook
	if v == nil {
		return
	}
	return *v, true
}

// OldFacebook returns the old "facebook" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldFacebook(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFacebook is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFacebook requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFacebook: %w", err)
	}
	return oldValue.Facebook, nil
}

// ResetFacebook resets all changes to the "facebook" field.
func (m *AccountMutation) ResetFacebook() {
	m.facebook = nil
}

// SetLine sets the "line" field.
func (m *AccountMutation) SetLine(s string) {
	m.line = &s
}

// Line returns the value of the "line" field in the mutation.
func (m *AccountMutation) Line() (r string, exists bool) {
	v := m.line
	if v == nil {
		return
	}
	return *v, true
}

// OldLine returns the old "line" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldLine(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLine is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLine: %w", err)
	}
	return oldValue.Line, nil
}

// ResetLine resets all changes to the "line" field.
func (m *AccountMutation) ResetLine() {
	m.line = nil
}

// SetWeibo sets the "weibo" field.
func (m *AccountMutation) SetWeibo(s string) {
	m.weibo = &s
}

// Weibo returns the value of the "weibo" field in the mutation.
func (m *AccountMutation) Weibo() (r string, exists bool) {
	v := m.weibo
	if v == nil {
		return
	}
	return *v, true
}

// OldWeibo returns the old "weibo" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldWeibo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeibo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeibo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeibo: %w", err)
	}
	return oldValue.Weibo, nil
}

// ResetWeibo resets all changes to the "weibo" field.
func (m *AccountMutation) ResetWeibo() {
	m.weibo = nil
}

// SetGoogle sets the "google" field.
func (m *AccountMutation) SetGoogle(s string) {
	m.google = &s
}

// Google returns the value of the "google" field in the mutation.
func (m *AccountMutation) Google() (r string, exists bool) {
	v := m.google
	if v == nil {
		return
	}
	return *v, true
}

// OldGoogle returns the old "google" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldGoogle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoogle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoogle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoogle: %w", err)
	}
	return oldValue.Google, nil
}

// ResetGoogle resets all changes to the "google" field.
func (m *AccountMutation) ResetGoogle() {
	m.google = nil
}

// SetInstagram sets the "instagram" field.
func (m *AccountMutation) SetInstagram(s string) {
	m.instagram = &s
}

// Instagram returns the value of the "instagram" field in the mutation.
func (m *AccountMutation) Instagram() (r string, exists bool) {
	v := m.instagram
	if v == nil {
		return
	}
	return *v, true
}

// OldInstagram returns the old "instagram" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldInstagram(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInstagram is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInstagram requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstagram: %w", err)
	}
	return oldValue.Instagram, nil
}

// ResetInstagram resets all changes to the "instagram" field.
func (m *AccountMutation) ResetInstagram() {
	m.instagram = nil
}

// SetLinkedin sets the "linkedin" field.
func (m *AccountMutation) SetLinkedin(s string) {
	m.linkedin = &s
}

// Linkedin returns the value of the "linkedin" field in the mutation.
func (m *AccountMutation) Linkedin() (r string, exists bool) {
	v := m.linkedin
	if v == nil {
		return
	}
	return *v, true
}

// OldLinkedin returns the old "linkedin" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldLinkedin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLinkedin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLinkedin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLinkedin: %w", err)
	}
	return oldValue.Linkedin, nil
}

// ResetLinkedin resets all changes to the "linkedin" field.
func (m *AccountMutation) ResetLinkedin() {
	m.linkedin = nil
}

// SetLanguage sets the "language" field.
func (m *AccountMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *AccountMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *AccountMutation) ResetLanguage() {
	m.language = nil
}

// SetPhone sets the "phone" field.
func (m *AccountMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *AccountMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *AccountMutation) ResetPhone() {
	m.phone = nil
}

// SetCountryCode sets the "country_code" field.
func (m *AccountMutation) SetCountryCode(i int32) {
	m.country_code = &i
	m.addcountry_code = nil
}

// CountryCode returns the value of the "country_code" field in the mutation.
func (m *AccountMutation) CountryCode() (r int32, exists bool) {
	v := m.country_code
	if v == nil {
		return
	}
	return *v, true
}

// OldCountryCode returns the old "country_code" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCountryCode(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountryCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountryCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountryCode: %w", err)
	}
	return oldValue.CountryCode, nil
}

// AddCountryCode adds i to the "country_code" field.
func (m *AccountMutation) AddCountryCode(i int32) {
	if m.addcountry_code != nil {
		*m.addcountry_code += i
	} else {
		m.addcountry_code = &i
	}
}

// AddedCountryCode returns the value that was added to the "country_code" field in this mutation.
func (m *AccountMutation) AddedCountryCode() (r int32, exists bool) {
	v := m.addcountry_code
	if v == nil {
		return
	}
	return *v, true
}

// ResetCountryCode resets all changes to the "country_code" field.
func (m *AccountMutation) ResetCountryCode() {
	m.country_code = nil
	m.addcountry_code = nil
}

// SetQrcode sets the "qrcode" field.
func (m *AccountMutation) SetQrcode(s string) {
	m.qrcode = &s
}

// Qrcode returns the value of the "qrcode" field in the mutation.
func (m *AccountMutation) Qrcode() (r string, exists bool) {
	v := m.qrcode
	if v == nil {
		return
	}
	return *v, true
}

// OldQrcode returns the old "qrcode" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldQrcode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQrcode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQrcode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQrcode: %w", err)
	}
	return oldValue.Qrcode, nil
}

// ResetQrcode resets all changes to the "qrcode" field.
func (m *AccountMutation) ResetQrcode() {
	m.qrcode = nil
}

// SetGender sets the "gender" field.
func (m *AccountMutation) SetGender(b bool) {
	m.gender = &b
}

// Gender returns the value of the "gender" field in the mutation.
func (m *AccountMutation) Gender() (r bool, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldGender(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *AccountMutation) ResetGender() {
	m.gender = nil
}

// SetBirthDate sets the "birth_date" field.
func (m *AccountMutation) SetBirthDate(t time.Time) {
	m.birth_date = &t
}

// BirthDate returns the value of the "birth_date" field in the mutation.
func (m *AccountMutation) BirthDate() (r time.Time, exists bool) {
	v := m.birth_date
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthDate returns the old "birth_date" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldBirthDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthDate: %w", err)
	}
	return oldValue.BirthDate, nil
}

// ResetBirthDate resets all changes to the "birth_date" field.
func (m *AccountMutation) ResetBirthDate() {
	m.birth_date = nil
}

// SetSelfIntroduction sets the "self_introduction" field.
func (m *AccountMutation) SetSelfIntroduction(s string) {
	m.self_introduction = &s
}

// SelfIntroduction returns the value of the "self_introduction" field in the mutation.
func (m *AccountMutation) SelfIntroduction() (r string, exists bool) {
	v := m.self_introduction
	if v == nil {
		return
	}
	return *v, true
}

// OldSelfIntroduction returns the old "self_introduction" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldSelfIntroduction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSelfIntroduction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSelfIntroduction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSelfIntroduction: %w", err)
	}
	return oldValue.SelfIntroduction, nil
}

// ResetSelfIntroduction resets all changes to the "self_introduction" field.
func (m *AccountMutation) ResetSelfIntroduction() {
	m.self_introduction = nil
}

// SetCover sets the "cover" field.
func (m *AccountMutation) SetCover(s string) {
	m.cover = &s
}

// Cover returns the value of the "cover" field in the mutation.
func (m *AccountMutation) Cover() (r string, exists bool) {
	v := m.cover
	if v == nil {
		return
	}
	return *v, true
}

// OldCover returns the old "cover" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCover(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCover is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCover requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCover: %w", err)
	}
	return oldValue.Cover, nil
}

// ResetCover resets all changes to the "cover" field.
func (m *AccountMutation) ResetCover() {
	m.cover = nil
}

// SetPhoto sets the "photo" field.
func (m *AccountMutation) SetPhoto(s string) {
	m.photo = &s
}

// Photo returns the value of the "photo" field in the mutation.
func (m *AccountMutation) Photo() (r string, exists bool) {
	v := m.photo
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoto returns the old "photo" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPhoto(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoto is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoto requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoto: %w", err)
	}
	return oldValue.Photo, nil
}

// ClearPhoto clears the value of the "photo" field.
func (m *AccountMutation) ClearPhoto() {
	m.photo = nil
	m.clearedFields[account.FieldPhoto] = struct{}{}
}

// PhotoCleared returns if the "photo" field was cleared in this mutation.
func (m *AccountMutation) PhotoCleared() bool {
	_, ok := m.clearedFields[account.FieldPhoto]
	return ok
}

// ResetPhoto resets all changes to the "photo" field.
func (m *AccountMutation) ResetPhoto() {
	m.photo = nil
	delete(m.clearedFields, account.FieldPhoto)
}

// SetPlatform sets the "platform" field.
func (m *AccountMutation) SetPlatform(b bool) {
	m.platform = &b
}

// Platform returns the value of the "platform" field in the mutation.
func (m *AccountMutation) Platform() (r bool, exists bool) {
	v := m.platform
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatform returns the old "platform" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPlatform(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatform: %w", err)
	}
	return oldValue.Platform, nil
}

// ResetPlatform resets all changes to the "platform" field.
func (m *AccountMutation) ResetPlatform() {
	m.platform = nil
}

// SetLastLoginTime sets the "last_login_time" field.
func (m *AccountMutation) SetLastLoginTime(t time.Time) {
	m.last_login_time = &t
}

// LastLoginTime returns the value of the "last_login_time" field in the mutation.
func (m *AccountMutation) LastLoginTime() (r time.Time, exists bool) {
	v := m.last_login_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginTime returns the old "last_login_time" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldLastLoginTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginTime: %w", err)
	}
	return oldValue.LastLoginTime, nil
}

// ResetLastLoginTime resets all changes to the "last_login_time" field.
func (m *AccountMutation) ResetLastLoginTime() {
	m.last_login_time = nil
}

// SetCredit sets the "credit" field.
func (m *AccountMutation) SetCredit(i int32) {
	m.credit = &i
	m.addcredit = nil
}

// Credit returns the value of the "credit" field in the mutation.
func (m *AccountMutation) Credit() (r int32, exists bool) {
	v := m.credit
	if v == nil {
		return
	}
	return *v, true
}

// OldCredit returns the old "credit" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCredit(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCredit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCredit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredit: %w", err)
	}
	return oldValue.Credit, nil
}

// AddCredit adds i to the "credit" field.
func (m *AccountMutation) AddCredit(i int32) {
	if m.addcredit != nil {
		*m.addcredit += i
	} else {
		m.addcredit = &i
	}
}

// AddedCredit returns the value that was added to the "credit" field in this mutation.
func (m *AccountMutation) AddedCredit() (r int32, exists bool) {
	v := m.addcredit
	if v == nil {
		return
	}
	return *v, true
}

// ResetCredit resets all changes to the "credit" field.
func (m *AccountMutation) ResetCredit() {
	m.credit = nil
	m.addcredit = nil
}

// SetHeatNum sets the "heat_num" field.
func (m *AccountMutation) SetHeatNum(i int32) {
	m.heat_num = &i
	m.addheat_num = nil
}

// HeatNum returns the value of the "heat_num" field in the mutation.
func (m *AccountMutation) HeatNum() (r int32, exists bool) {
	v := m.heat_num
	if v == nil {
		return
	}
	return *v, true
}

// OldHeatNum returns the old "heat_num" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldHeatNum(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeatNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeatNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeatNum: %w", err)
	}
	return oldValue.HeatNum, nil
}

// AddHeatNum adds i to the "heat_num" field.
func (m *AccountMutation) AddHeatNum(i int32) {
	if m.addheat_num != nil {
		*m.addheat_num += i
	} else {
		m.addheat_num = &i
	}
}

// AddedHeatNum returns the value that was added to the "heat_num" field in this mutation.
func (m *AccountMutation) AddedHeatNum() (r int32, exists bool) {
	v := m.addheat_num
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeatNum resets all changes to the "heat_num" field.
func (m *AccountMutation) ResetHeatNum() {
	m.heat_num = nil
	m.addheat_num = nil
}

// SetDesignerID sets the "designer_id" field.
func (m *AccountMutation) SetDesignerID(i int32) {
	m.designer_id = &i
	m.adddesigner_id = nil
}

// DesignerID returns the value of the "designer_id" field in the mutation.
func (m *AccountMutation) DesignerID() (r int32, exists bool) {
	v := m.designer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDesignerID returns the old "designer_id" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldDesignerID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesignerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesignerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesignerID: %w", err)
	}
	return oldValue.DesignerID, nil
}

// AddDesignerID adds i to the "designer_id" field.
func (m *AccountMutation) AddDesignerID(i int32) {
	if m.adddesigner_id != nil {
		*m.adddesigner_id += i
	} else {
		m.adddesigner_id = &i
	}
}

// AddedDesignerID returns the value that was added to the "designer_id" field in this mutation.
func (m *AccountMutation) AddedDesignerID() (r int32, exists bool) {
	v := m.adddesigner_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetDesignerID resets all changes to the "designer_id" field.
func (m *AccountMutation) ResetDesignerID() {
	m.designer_id = nil
	m.adddesigner_id = nil
}

// SetIdentity sets the "identity" field.
func (m *AccountMutation) SetIdentity(b bool) {
	m.identity = &b
}

// Identity returns the value of the "identity" field in the mutation.
func (m *AccountMutation) Identity() (r bool, exists bool) {
	v := m.identity
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentity returns the old "identity" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldIdentity(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdentity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdentity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentity: %w", err)
	}
	return oldValue.Identity, nil
}

// ResetIdentity resets all changes to the "identity" field.
func (m *AccountMutation) ResetIdentity() {
	m.identity = nil
}

// SetLevel sets the "level" field.
func (m *AccountMutation) SetLevel(i int32) {
	m.level = &i
	m.addlevel = nil
}

// Level returns the value of the "level" field in the mutation.
func (m *AccountMutation) Level() (r int32, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldLevel(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// AddLevel adds i to the "level" field.
func (m *AccountMutation) AddLevel(i int32) {
	if m.addlevel != nil {
		*m.addlevel += i
	} else {
		m.addlevel = &i
	}
}

// AddedLevel returns the value that was added to the "level" field in this mutation.
func (m *AccountMutation) AddedLevel() (r int32, exists bool) {
	v := m.addlevel
	if v == nil {
		return
	}
	return *v, true
}

// ResetLevel resets all changes to the "level" field.
func (m *AccountMutation) ResetLevel() {
	m.level = nil
	m.addlevel = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AccountMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AccountMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AccountMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *AccountMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *AccountMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *AccountMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[account.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *AccountMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[account.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *AccountMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, account.FieldDeletedAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *AccountMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AccountMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AccountMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetChainWalletID sets the "chain_wallet_id" field.
func (m *AccountMutation) SetChainWalletID(s string) {
	m.chain_wallet_id = &s
}

// ChainWalletID returns the value of the "chain_wallet_id" field in the mutation.
func (m *AccountMutation) ChainWalletID() (r string, exists bool) {
	v := m.chain_wallet_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChainWalletID returns the old "chain_wallet_id" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldChainWalletID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainWalletID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainWalletID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainWalletID: %w", err)
	}
	return oldValue.ChainWalletID, nil
}

// ResetChainWalletID resets all changes to the "chain_wallet_id" field.
func (m *AccountMutation) ResetChainWalletID() {
	m.chain_wallet_id = nil
}

// SetDiscordAid sets the "discord_aid" field.
func (m *AccountMutation) SetDiscordAid(i int32) {
	m.discord_aid = &i
	m.adddiscord_aid = nil
}

// DiscordAid returns the value of the "discord_aid" field in the mutation.
func (m *AccountMutation) DiscordAid() (r int32, exists bool) {
	v := m.discord_aid
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscordAid returns the old "discord_aid" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldDiscordAid(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscordAid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscordAid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscordAid: %w", err)
	}
	return oldValue.DiscordAid, nil
}

// AddDiscordAid adds i to the "discord_aid" field.
func (m *AccountMutation) AddDiscordAid(i int32) {
	if m.adddiscord_aid != nil {
		*m.adddiscord_aid += i
	} else {
		m.adddiscord_aid = &i
	}
}

// AddedDiscordAid returns the value that was added to the "discord_aid" field in this mutation.
func (m *AccountMutation) AddedDiscordAid() (r int32, exists bool) {
	v := m.adddiscord_aid
	if v == nil {
		return
	}
	return *v, true
}

// ResetDiscordAid resets all changes to the "discord_aid" field.
func (m *AccountMutation) ResetDiscordAid() {
	m.discord_aid = nil
	m.adddiscord_aid = nil
}

// SetTicketBalance sets the "ticket_balance" field.
func (m *AccountMutation) SetTicketBalance(i int32) {
	m.ticket_balance = &i
	m.addticket_balance = nil
}

// TicketBalance returns the value of the "ticket_balance" field in the mutation.
func (m *AccountMutation) TicketBalance() (r int32, exists bool) {
	v := m.ticket_balance
	if v == nil {
		return
	}
	return *v, true
}

// OldTicketBalance returns the old "ticket_balance" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldTicketBalance(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTicketBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTicketBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTicketBalance: %w", err)
	}
	return oldValue.TicketBalance, nil
}

// AddTicketBalance adds i to the "ticket_balance" field.
func (m *AccountMutation) AddTicketBalance(i int32) {
	if m.addticket_balance != nil {
		*m.addticket_balance += i
	} else {
		m.addticket_balance = &i
	}
}

// AddedTicketBalance returns the value that was added to the "ticket_balance" field in this mutation.
func (m *AccountMutation) AddedTicketBalance() (r int32, exists bool) {
	v := m.addticket_balance
	if v == nil {
		return
	}
	return *v, true
}

// ResetTicketBalance resets all changes to the "ticket_balance" field.
func (m *AccountMutation) ResetTicketBalance() {
	m.ticket_balance = nil
	m.addticket_balance = nil
}

// SetOhdatTicketBalance sets the "ohdat_ticket_balance" field.
func (m *AccountMutation) SetOhdatTicketBalance(i int32) {
	m.ohdat_ticket_balance = &i
	m.addohdat_ticket_balance = nil
}

// OhdatTicketBalance returns the value of the "ohdat_ticket_balance" field in the mutation.
func (m *AccountMutation) OhdatTicketBalance() (r int32, exists bool) {
	v := m.ohdat_ticket_balance
	if v == nil {
		return
	}
	return *v, true
}

// OldOhdatTicketBalance returns the old "ohdat_ticket_balance" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldOhdatTicketBalance(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOhdatTicketBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOhdatTicketBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOhdatTicketBalance: %w", err)
	}
	return oldValue.OhdatTicketBalance, nil
}

// AddOhdatTicketBalance adds i to the "ohdat_ticket_balance" field.
func (m *AccountMutation) AddOhdatTicketBalance(i int32) {
	if m.addohdat_ticket_balance != nil {
		*m.addohdat_ticket_balance += i
	} else {
		m.addohdat_ticket_balance = &i
	}
}

// AddedOhdatTicketBalance returns the value that was added to the "ohdat_ticket_balance" field in this mutation.
func (m *AccountMutation) AddedOhdatTicketBalance() (r int32, exists bool) {
	v := m.addohdat_ticket_balance
	if v == nil {
		return
	}
	return *v, true
}

// ResetOhdatTicketBalance resets all changes to the "ohdat_ticket_balance" field.
func (m *AccountMutation) ResetOhdatTicketBalance() {
	m.ohdat_ticket_balance = nil
	m.addohdat_ticket_balance = nil
}

// SetSpaceExpeditionChance sets the "space_expedition_chance" field.
func (m *AccountMutation) SetSpaceExpeditionChance(b bool) {
	m.space_expedition_chance = &b
}

// SpaceExpeditionChance returns the value of the "space_expedition_chance" field in the mutation.
func (m *AccountMutation) SpaceExpeditionChance() (r bool, exists bool) {
	v := m.space_expedition_chance
	if v == nil {
		return
	}
	return *v, true
}

// OldSpaceExpeditionChance returns the old "space_expedition_chance" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldSpaceExpeditionChance(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpaceExpeditionChance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpaceExpeditionChance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpaceExpeditionChance: %w", err)
	}
	return oldValue.SpaceExpeditionChance, nil
}

// ResetSpaceExpeditionChance resets all changes to the "space_expedition_chance" field.
func (m *AccountMutation) ResetSpaceExpeditionChance() {
	m.space_expedition_chance = nil
}

// SetBambLockedBalance sets the "bamb_locked_balance" field.
func (m *AccountMutation) SetBambLockedBalance(f float64) {
	m.bamb_locked_balance = &f
	m.addbamb_locked_balance = nil
}

// BambLockedBalance returns the value of the "bamb_locked_balance" field in the mutation.
func (m *AccountMutation) BambLockedBalance() (r float64, exists bool) {
	v := m.bamb_locked_balance
	if v == nil {
		return
	}
	return *v, true
}

// OldBambLockedBalance returns the old "bamb_locked_balance" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldBambLockedBalance(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBambLockedBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBambLockedBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBambLockedBalance: %w", err)
	}
	return oldValue.BambLockedBalance, nil
}

// AddBambLockedBalance adds f to the "bamb_locked_balance" field.
func (m *AccountMutation) AddBambLockedBalance(f float64) {
	if m.addbamb_locked_balance != nil {
		*m.addbamb_locked_balance += f
	} else {
		m.addbamb_locked_balance = &f
	}
}

// AddedBambLockedBalance returns the value that was added to the "bamb_locked_balance" field in this mutation.
func (m *AccountMutation) AddedBambLockedBalance() (r float64, exists bool) {
	v := m.addbamb_locked_balance
	if v == nil {
		return
	}
	return *v, true
}

// ResetBambLockedBalance resets all changes to the "bamb_locked_balance" field.
func (m *AccountMutation) ResetBambLockedBalance() {
	m.bamb_locked_balance = nil
	m.addbamb_locked_balance = nil
}

// SetBambClaimableBalance sets the "bamb_claimable_balance" field.
func (m *AccountMutation) SetBambClaimableBalance(f float64) {
	m.bamb_claimable_balance = &f
	m.addbamb_claimable_balance = nil
}

// BambClaimableBalance returns the value of the "bamb_claimable_balance" field in the mutation.
func (m *AccountMutation) BambClaimableBalance() (r float64, exists bool) {
	v := m.bamb_claimable_balance
	if v == nil {
		return
	}
	return *v, true
}

// OldBambClaimableBalance returns the old "bamb_claimable_balance" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldBambClaimableBalance(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBambClaimableBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBambClaimableBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBambClaimableBalance: %w", err)
	}
	return oldValue.BambClaimableBalance, nil
}

// AddBambClaimableBalance adds f to the "bamb_claimable_balance" field.
func (m *AccountMutation) AddBambClaimableBalance(f float64) {
	if m.addbamb_claimable_balance != nil {
		*m.addbamb_claimable_balance += f
	} else {
		m.addbamb_claimable_balance = &f
	}
}

// AddedBambClaimableBalance returns the value that was added to the "bamb_claimable_balance" field in this mutation.
func (m *AccountMutation) AddedBambClaimableBalance() (r float64, exists bool) {
	v := m.addbamb_claimable_balance
	if v == nil {
		return
	}
	return *v, true
}

// ResetBambClaimableBalance resets all changes to the "bamb_claimable_balance" field.
func (m *AccountMutation) ResetBambClaimableBalance() {
	m.bamb_claimable_balance = nil
	m.addbamb_claimable_balance = nil
}

// SetBambStaking sets the "bamb_staking" field.
func (m *AccountMutation) SetBambStaking(f float64) {
	m.bamb_staking = &f
	m.addbamb_staking = nil
}

// BambStaking returns the value of the "bamb_staking" field in the mutation.
func (m *AccountMutation) BambStaking() (r float64, exists bool) {
	v := m.bamb_staking
	if v == nil {
		return
	}
	return *v, true
}

// OldBambStaking returns the old "bamb_staking" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldBambStaking(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBambStaking is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBambStaking requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBambStaking: %w", err)
	}
	return oldValue.BambStaking, nil
}

// AddBambStaking adds f to the "bamb_staking" field.
func (m *AccountMutation) AddBambStaking(f float64) {
	if m.addbamb_staking != nil {
		*m.addbamb_staking += f
	} else {
		m.addbamb_staking = &f
	}
}

// AddedBambStaking returns the value that was added to the "bamb_staking" field in this mutation.
func (m *AccountMutation) AddedBambStaking() (r float64, exists bool) {
	v := m.addbamb_staking
	if v == nil {
		return
	}
	return *v, true
}

// ResetBambStaking resets all changes to the "bamb_staking" field.
func (m *AccountMutation) ResetBambStaking() {
	m.bamb_staking = nil
	m.addbamb_staking = nil
}

// SetBamblpStaking sets the "bamblp_staking" field.
func (m *AccountMutation) SetBamblpStaking(f float64) {
	m.bamblp_staking = &f
	m.addbamblp_staking = nil
}

// BamblpStaking returns the value of the "bamblp_staking" field in the mutation.
func (m *AccountMutation) BamblpStaking() (r float64, exists bool) {
	v := m.bamblp_staking
	if v == nil {
		return
	}
	return *v, true
}

// OldBamblpStaking returns the old "bamblp_staking" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldBamblpStaking(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBamblpStaking is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBamblpStaking requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBamblpStaking: %w", err)
	}
	return oldValue.BamblpStaking, nil
}

// AddBamblpStaking adds f to the "bamblp_staking" field.
func (m *AccountMutation) AddBamblpStaking(f float64) {
	if m.addbamblp_staking != nil {
		*m.addbamblp_staking += f
	} else {
		m.addbamblp_staking = &f
	}
}

// AddedBamblpStaking returns the value that was added to the "bamblp_staking" field in this mutation.
func (m *AccountMutation) AddedBamblpStaking() (r float64, exists bool) {
	v := m.addbamblp_staking
	if v == nil {
		return
	}
	return *v, true
}

// ResetBamblpStaking resets all changes to the "bamblp_staking" field.
func (m *AccountMutation) ResetBamblpStaking() {
	m.bamblp_staking = nil
	m.addbamblp_staking = nil
}

// SetBamblpCollect sets the "bamblp_collect" field.
func (m *AccountMutation) SetBamblpCollect(f float64) {
	m.bamblp_collect = &f
	m.addbamblp_collect = nil
}

// BamblpCollect returns the value of the "bamblp_collect" field in the mutation.
func (m *AccountMutation) BamblpCollect() (r float64, exists bool) {
	v := m.bamblp_collect
	if v == nil {
		return
	}
	return *v, true
}

// OldBamblpCollect returns the old "bamblp_collect" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldBamblpCollect(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBamblpCollect is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBamblpCollect requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBamblpCollect: %w", err)
	}
	return oldValue.BamblpCollect, nil
}

// AddBamblpCollect adds f to the "bamblp_collect" field.
func (m *AccountMutation) AddBamblpCollect(f float64) {
	if m.addbamblp_collect != nil {
		*m.addbamblp_collect += f
	} else {
		m.addbamblp_collect = &f
	}
}

// AddedBamblpCollect returns the value that was added to the "bamblp_collect" field in this mutation.
func (m *AccountMutation) AddedBamblpCollect() (r float64, exists bool) {
	v := m.addbamblp_collect
	if v == nil {
		return
	}
	return *v, true
}

// ResetBamblpCollect resets all changes to the "bamblp_collect" field.
func (m *AccountMutation) ResetBamblpCollect() {
	m.bamblp_collect = nil
	m.addbamblp_collect = nil
}

// SetChipBalance sets the "chip_balance" field.
func (m *AccountMutation) SetChipBalance(f float64) {
	m.chip_balance = &f
	m.addchip_balance = nil
}

// ChipBalance returns the value of the "chip_balance" field in the mutation.
func (m *AccountMutation) ChipBalance() (r float64, exists bool) {
	v := m.chip_balance
	if v == nil {
		return
	}
	return *v, true
}

// OldChipBalance returns the old "chip_balance" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldChipBalance(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChipBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChipBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChipBalance: %w", err)
	}
	return oldValue.ChipBalance, nil
}

// AddChipBalance adds f to the "chip_balance" field.
func (m *AccountMutation) AddChipBalance(f float64) {
	if m.addchip_balance != nil {
		*m.addchip_balance += f
	} else {
		m.addchip_balance = &f
	}
}

// AddedChipBalance returns the value that was added to the "chip_balance" field in this mutation.
func (m *AccountMutation) AddedChipBalance() (r float64, exists bool) {
	v := m.addchip_balance
	if v == nil {
		return
	}
	return *v, true
}

// ResetChipBalance resets all changes to the "chip_balance" field.
func (m *AccountMutation) ResetChipBalance() {
	m.chip_balance = nil
	m.addchip_balance = nil
}

// SetBambooShootBalance sets the "bamboo_shoot_balance" field.
func (m *AccountMutation) SetBambooShootBalance(i int32) {
	m.bamboo_shoot_balance = &i
	m.addbamboo_shoot_balance = nil
}

// BambooShootBalance returns the value of the "bamboo_shoot_balance" field in the mutation.
func (m *AccountMutation) BambooShootBalance() (r int32, exists bool) {
	v := m.bamboo_shoot_balance
	if v == nil {
		return
	}
	return *v, true
}

// OldBambooShootBalance returns the old "bamboo_shoot_balance" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldBambooShootBalance(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBambooShootBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBambooShootBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBambooShootBalance: %w", err)
	}
	return oldValue.BambooShootBalance, nil
}

// AddBambooShootBalance adds i to the "bamboo_shoot_balance" field.
func (m *AccountMutation) AddBambooShootBalance(i int32) {
	if m.addbamboo_shoot_balance != nil {
		*m.addbamboo_shoot_balance += i
	} else {
		m.addbamboo_shoot_balance = &i
	}
}

// AddedBambooShootBalance returns the value that was added to the "bamboo_shoot_balance" field in this mutation.
func (m *AccountMutation) AddedBambooShootBalance() (r int32, exists bool) {
	v := m.addbamboo_shoot_balance
	if v == nil {
		return
	}
	return *v, true
}

// ResetBambooShootBalance resets all changes to the "bamboo_shoot_balance" field.
func (m *AccountMutation) ResetBambooShootBalance() {
	m.bamboo_shoot_balance = nil
	m.addbamboo_shoot_balance = nil
}

// SetPandaAirdropCount sets the "panda_airdrop_count" field.
func (m *AccountMutation) SetPandaAirdropCount(i int32) {
	m.panda_airdrop_count = &i
	m.addpanda_airdrop_count = nil
}

// PandaAirdropCount returns the value of the "panda_airdrop_count" field in the mutation.
func (m *AccountMutation) PandaAirdropCount() (r int32, exists bool) {
	v := m.panda_airdrop_count
	if v == nil {
		return
	}
	return *v, true
}

// OldPandaAirdropCount returns the old "panda_airdrop_count" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPandaAirdropCount(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPandaAirdropCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPandaAirdropCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPandaAirdropCount: %w", err)
	}
	return oldValue.PandaAirdropCount, nil
}

// AddPandaAirdropCount adds i to the "panda_airdrop_count" field.
func (m *AccountMutation) AddPandaAirdropCount(i int32) {
	if m.addpanda_airdrop_count != nil {
		*m.addpanda_airdrop_count += i
	} else {
		m.addpanda_airdrop_count = &i
	}
}

// AddedPandaAirdropCount returns the value that was added to the "panda_airdrop_count" field in this mutation.
func (m *AccountMutation) AddedPandaAirdropCount() (r int32, exists bool) {
	v := m.addpanda_airdrop_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetPandaAirdropCount resets all changes to the "panda_airdrop_count" field.
func (m *AccountMutation) ResetPandaAirdropCount() {
	m.panda_airdrop_count = nil
	m.addpanda_airdrop_count = nil
}

// SetFirstLogin sets the "first_login" field.
func (m *AccountMutation) SetFirstLogin(b bool) {
	m.first_login = &b
}

// FirstLogin returns the value of the "first_login" field in the mutation.
func (m *AccountMutation) FirstLogin() (r bool, exists bool) {
	v := m.first_login
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstLogin returns the old "first_login" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldFirstLogin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstLogin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstLogin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstLogin: %w", err)
	}
	return oldValue.FirstLogin, nil
}

// ResetFirstLogin resets all changes to the "first_login" field.
func (m *AccountMutation) ResetFirstLogin() {
	m.first_login = nil
}

// SetPassedSpaceExpeditionCount sets the "passed_space_expedition_count" field.
func (m *AccountMutation) SetPassedSpaceExpeditionCount(i int32) {
	m.passed_space_expedition_count = &i
	m.addpassed_space_expedition_count = nil
}

// PassedSpaceExpeditionCount returns the value of the "passed_space_expedition_count" field in the mutation.
func (m *AccountMutation) PassedSpaceExpeditionCount() (r int32, exists bool) {
	v := m.passed_space_expedition_count
	if v == nil {
		return
	}
	return *v, true
}

// OldPassedSpaceExpeditionCount returns the old "passed_space_expedition_count" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPassedSpaceExpeditionCount(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassedSpaceExpeditionCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassedSpaceExpeditionCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassedSpaceExpeditionCount: %w", err)
	}
	return oldValue.PassedSpaceExpeditionCount, nil
}

// AddPassedSpaceExpeditionCount adds i to the "passed_space_expedition_count" field.
func (m *AccountMutation) AddPassedSpaceExpeditionCount(i int32) {
	if m.addpassed_space_expedition_count != nil {
		*m.addpassed_space_expedition_count += i
	} else {
		m.addpassed_space_expedition_count = &i
	}
}

// AddedPassedSpaceExpeditionCount returns the value that was added to the "passed_space_expedition_count" field in this mutation.
func (m *AccountMutation) AddedPassedSpaceExpeditionCount() (r int32, exists bool) {
	v := m.addpassed_space_expedition_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetPassedSpaceExpeditionCount resets all changes to the "passed_space_expedition_count" field.
func (m *AccountMutation) ResetPassedSpaceExpeditionCount() {
	m.passed_space_expedition_count = nil
	m.addpassed_space_expedition_count = nil
}

// SetPassedSpaceExpeditionReward sets the "passed_space_expedition_reward" field.
func (m *AccountMutation) SetPassedSpaceExpeditionReward(f float64) {
	m.passed_space_expedition_reward = &f
	m.addpassed_space_expedition_reward = nil
}

// PassedSpaceExpeditionReward returns the value of the "passed_space_expedition_reward" field in the mutation.
func (m *AccountMutation) PassedSpaceExpeditionReward() (r float64, exists bool) {
	v := m.passed_space_expedition_reward
	if v == nil {
		return
	}
	return *v, true
}

// OldPassedSpaceExpeditionReward returns the old "passed_space_expedition_reward" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPassedSpaceExpeditionReward(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassedSpaceExpeditionReward is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassedSpaceExpeditionReward requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassedSpaceExpeditionReward: %w", err)
	}
	return oldValue.PassedSpaceExpeditionReward, nil
}

// AddPassedSpaceExpeditionReward adds f to the "passed_space_expedition_reward" field.
func (m *AccountMutation) AddPassedSpaceExpeditionReward(f float64) {
	if m.addpassed_space_expedition_reward != nil {
		*m.addpassed_space_expedition_reward += f
	} else {
		m.addpassed_space_expedition_reward = &f
	}
}

// AddedPassedSpaceExpeditionReward returns the value that was added to the "passed_space_expedition_reward" field in this mutation.
func (m *AccountMutation) AddedPassedSpaceExpeditionReward() (r float64, exists bool) {
	v := m.addpassed_space_expedition_reward
	if v == nil {
		return
	}
	return *v, true
}

// ResetPassedSpaceExpeditionReward resets all changes to the "passed_space_expedition_reward" field.
func (m *AccountMutation) ResetPassedSpaceExpeditionReward() {
	m.passed_space_expedition_reward = nil
	m.addpassed_space_expedition_reward = nil
}

// SetReserved sets the "reserved" field.
func (m *AccountMutation) SetReserved(s string) {
	m.reserved = &s
}

// Reserved returns the value of the "reserved" field in the mutation.
func (m *AccountMutation) Reserved() (r string, exists bool) {
	v := m.reserved
	if v == nil {
		return
	}
	return *v, true
}

// OldReserved returns the old "reserved" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldReserved(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReserved is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReserved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReserved: %w", err)
	}
	return oldValue.Reserved, nil
}

// ResetReserved resets all changes to the "reserved" field.
func (m *AccountMutation) ResetReserved() {
	m.reserved = nil
}

// SetCentralizedBeerCapsBalance sets the "centralized_beer_caps_balance" field.
func (m *AccountMutation) SetCentralizedBeerCapsBalance(i int32) {
	m.centralized_beer_caps_balance = &i
	m.addcentralized_beer_caps_balance = nil
}

// CentralizedBeerCapsBalance returns the value of the "centralized_beer_caps_balance" field in the mutation.
func (m *AccountMutation) CentralizedBeerCapsBalance() (r int32, exists bool) {
	v := m.centralized_beer_caps_balance
	if v == nil {
		return
	}
	return *v, true
}

// OldCentralizedBeerCapsBalance returns the old "centralized_beer_caps_balance" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCentralizedBeerCapsBalance(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCentralizedBeerCapsBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCentralizedBeerCapsBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCentralizedBeerCapsBalance: %w", err)
	}
	return oldValue.CentralizedBeerCapsBalance, nil
}

// AddCentralizedBeerCapsBalance adds i to the "centralized_beer_caps_balance" field.
func (m *AccountMutation) AddCentralizedBeerCapsBalance(i int32) {
	if m.addcentralized_beer_caps_balance != nil {
		*m.addcentralized_beer_caps_balance += i
	} else {
		m.addcentralized_beer_caps_balance = &i
	}
}

// AddedCentralizedBeerCapsBalance returns the value that was added to the "centralized_beer_caps_balance" field in this mutation.
func (m *AccountMutation) AddedCentralizedBeerCapsBalance() (r int32, exists bool) {
	v := m.addcentralized_beer_caps_balance
	if v == nil {
		return
	}
	return *v, true
}

// ResetCentralizedBeerCapsBalance resets all changes to the "centralized_beer_caps_balance" field.
func (m *AccountMutation) ResetCentralizedBeerCapsBalance() {
	m.centralized_beer_caps_balance = nil
	m.addcentralized_beer_caps_balance = nil
}

// Where appends a list predicates to the AccountMutation builder.
func (m *AccountMutation) Where(ps ...predicate.Account) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AccountMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Account).
func (m *AccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccountMutation) Fields() []string {
	fields := make([]string, 0, 52)
	if m.audit != nil {
		fields = append(fields, account.FieldAudit)
	}
	if m.email != nil {
		fields = append(fields, account.FieldEmail)
	}
	if m.nickname != nil {
		fields = append(fields, account.FieldNickname)
	}
	if m.avatar != nil {
		fields = append(fields, account.FieldAvatar)
	}
	if m.password != nil {
		fields = append(fields, account.FieldPassword)
	}
	if m.disable != nil {
		fields = append(fields, account.FieldDisable)
	}
	if m.pwd_error_num != nil {
		fields = append(fields, account.FieldPwdErrorNum)
	}
	if m.pwd_error_expire_time != nil {
		fields = append(fields, account.FieldPwdErrorExpireTime)
	}
	if m.phone_token != nil {
		fields = append(fields, account.FieldPhoneToken)
	}
	if m.facebook != nil {
		fields = append(fields, account.FieldFacebook)
	}
	if m.line != nil {
		fields = append(fields, account.FieldLine)
	}
	if m.weibo != nil {
		fields = append(fields, account.FieldWeibo)
	}
	if m.google != nil {
		fields = append(fields, account.FieldGoogle)
	}
	if m.instagram != nil {
		fields = append(fields, account.FieldInstagram)
	}
	if m.linkedin != nil {
		fields = append(fields, account.FieldLinkedin)
	}
	if m.language != nil {
		fields = append(fields, account.FieldLanguage)
	}
	if m.phone != nil {
		fields = append(fields, account.FieldPhone)
	}
	if m.country_code != nil {
		fields = append(fields, account.FieldCountryCode)
	}
	if m.qrcode != nil {
		fields = append(fields, account.FieldQrcode)
	}
	if m.gender != nil {
		fields = append(fields, account.FieldGender)
	}
	if m.birth_date != nil {
		fields = append(fields, account.FieldBirthDate)
	}
	if m.self_introduction != nil {
		fields = append(fields, account.FieldSelfIntroduction)
	}
	if m.cover != nil {
		fields = append(fields, account.FieldCover)
	}
	if m.photo != nil {
		fields = append(fields, account.FieldPhoto)
	}
	if m.platform != nil {
		fields = append(fields, account.FieldPlatform)
	}
	if m.last_login_time != nil {
		fields = append(fields, account.FieldLastLoginTime)
	}
	if m.credit != nil {
		fields = append(fields, account.FieldCredit)
	}
	if m.heat_num != nil {
		fields = append(fields, account.FieldHeatNum)
	}
	if m.designer_id != nil {
		fields = append(fields, account.FieldDesignerID)
	}
	if m.identity != nil {
		fields = append(fields, account.FieldIdentity)
	}
	if m.level != nil {
		fields = append(fields, account.FieldLevel)
	}
	if m.updated_at != nil {
		fields = append(fields, account.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, account.FieldDeletedAt)
	}
	if m.created_at != nil {
		fields = append(fields, account.FieldCreatedAt)
	}
	if m.chain_wallet_id != nil {
		fields = append(fields, account.FieldChainWalletID)
	}
	if m.discord_aid != nil {
		fields = append(fields, account.FieldDiscordAid)
	}
	if m.ticket_balance != nil {
		fields = append(fields, account.FieldTicketBalance)
	}
	if m.ohdat_ticket_balance != nil {
		fields = append(fields, account.FieldOhdatTicketBalance)
	}
	if m.space_expedition_chance != nil {
		fields = append(fields, account.FieldSpaceExpeditionChance)
	}
	if m.bamb_locked_balance != nil {
		fields = append(fields, account.FieldBambLockedBalance)
	}
	if m.bamb_claimable_balance != nil {
		fields = append(fields, account.FieldBambClaimableBalance)
	}
	if m.bamb_staking != nil {
		fields = append(fields, account.FieldBambStaking)
	}
	if m.bamblp_staking != nil {
		fields = append(fields, account.FieldBamblpStaking)
	}
	if m.bamblp_collect != nil {
		fields = append(fields, account.FieldBamblpCollect)
	}
	if m.chip_balance != nil {
		fields = append(fields, account.FieldChipBalance)
	}
	if m.bamboo_shoot_balance != nil {
		fields = append(fields, account.FieldBambooShootBalance)
	}
	if m.panda_airdrop_count != nil {
		fields = append(fields, account.FieldPandaAirdropCount)
	}
	if m.first_login != nil {
		fields = append(fields, account.FieldFirstLogin)
	}
	if m.passed_space_expedition_count != nil {
		fields = append(fields, account.FieldPassedSpaceExpeditionCount)
	}
	if m.passed_space_expedition_reward != nil {
		fields = append(fields, account.FieldPassedSpaceExpeditionReward)
	}
	if m.reserved != nil {
		fields = append(fields, account.FieldReserved)
	}
	if m.centralized_beer_caps_balance != nil {
		fields = append(fields, account.FieldCentralizedBeerCapsBalance)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case account.FieldAudit:
		return m.Audit()
	case account.FieldEmail:
		return m.Email()
	case account.FieldNickname:
		return m.Nickname()
	case account.FieldAvatar:
		return m.Avatar()
	case account.FieldPassword:
		return m.Password()
	case account.FieldDisable:
		return m.Disable()
	case account.FieldPwdErrorNum:
		return m.PwdErrorNum()
	case account.FieldPwdErrorExpireTime:
		return m.PwdErrorExpireTime()
	case account.FieldPhoneToken:
		return m.PhoneToken()
	case account.FieldFacebook:
		return m.Facebook()
	case account.FieldLine:
		return m.Line()
	case account.FieldWeibo:
		return m.Weibo()
	case account.FieldGoogle:
		return m.Google()
	case account.FieldInstagram:
		return m.Instagram()
	case account.FieldLinkedin:
		return m.Linkedin()
	case account.FieldLanguage:
		return m.Language()
	case account.FieldPhone:
		return m.Phone()
	case account.FieldCountryCode:
		return m.CountryCode()
	case account.FieldQrcode:
		return m.Qrcode()
	case account.FieldGender:
		return m.Gender()
	case account.FieldBirthDate:
		return m.BirthDate()
	case account.FieldSelfIntroduction:
		return m.SelfIntroduction()
	case account.FieldCover:
		return m.Cover()
	case account.FieldPhoto:
		return m.Photo()
	case account.FieldPlatform:
		return m.Platform()
	case account.FieldLastLoginTime:
		return m.LastLoginTime()
	case account.FieldCredit:
		return m.Credit()
	case account.FieldHeatNum:
		return m.HeatNum()
	case account.FieldDesignerID:
		return m.DesignerID()
	case account.FieldIdentity:
		return m.Identity()
	case account.FieldLevel:
		return m.Level()
	case account.FieldUpdatedAt:
		return m.UpdatedAt()
	case account.FieldDeletedAt:
		return m.DeletedAt()
	case account.FieldCreatedAt:
		return m.CreatedAt()
	case account.FieldChainWalletID:
		return m.ChainWalletID()
	case account.FieldDiscordAid:
		return m.DiscordAid()
	case account.FieldTicketBalance:
		return m.TicketBalance()
	case account.FieldOhdatTicketBalance:
		return m.OhdatTicketBalance()
	case account.FieldSpaceExpeditionChance:
		return m.SpaceExpeditionChance()
	case account.FieldBambLockedBalance:
		return m.BambLockedBalance()
	case account.FieldBambClaimableBalance:
		return m.BambClaimableBalance()
	case account.FieldBambStaking:
		return m.BambStaking()
	case account.FieldBamblpStaking:
		return m.BamblpStaking()
	case account.FieldBamblpCollect:
		return m.BamblpCollect()
	case account.FieldChipBalance:
		return m.ChipBalance()
	case account.FieldBambooShootBalance:
		return m.BambooShootBalance()
	case account.FieldPandaAirdropCount:
		return m.PandaAirdropCount()
	case account.FieldFirstLogin:
		return m.FirstLogin()
	case account.FieldPassedSpaceExpeditionCount:
		return m.PassedSpaceExpeditionCount()
	case account.FieldPassedSpaceExpeditionReward:
		return m.PassedSpaceExpeditionReward()
	case account.FieldReserved:
		return m.Reserved()
	case account.FieldCentralizedBeerCapsBalance:
		return m.CentralizedBeerCapsBalance()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case account.FieldAudit:
		return m.OldAudit(ctx)
	case account.FieldEmail:
		return m.OldEmail(ctx)
	case account.FieldNickname:
		return m.OldNickname(ctx)
	case account.FieldAvatar:
		return m.OldAvatar(ctx)
	case account.FieldPassword:
		return m.OldPassword(ctx)
	case account.FieldDisable:
		return m.OldDisable(ctx)
	case account.FieldPwdErrorNum:
		return m.OldPwdErrorNum(ctx)
	case account.FieldPwdErrorExpireTime:
		return m.OldPwdErrorExpireTime(ctx)
	case account.FieldPhoneToken:
		return m.OldPhoneToken(ctx)
	case account.FieldFacebook:
		return m.OldFacebook(ctx)
	case account.FieldLine:
		return m.OldLine(ctx)
	case account.FieldWeibo:
		return m.OldWeibo(ctx)
	case account.FieldGoogle:
		return m.OldGoogle(ctx)
	case account.FieldInstagram:
		return m.OldInstagram(ctx)
	case account.FieldLinkedin:
		return m.OldLinkedin(ctx)
	case account.FieldLanguage:
		return m.OldLanguage(ctx)
	case account.FieldPhone:
		return m.OldPhone(ctx)
	case account.FieldCountryCode:
		return m.OldCountryCode(ctx)
	case account.FieldQrcode:
		return m.OldQrcode(ctx)
	case account.FieldGender:
		return m.OldGender(ctx)
	case account.FieldBirthDate:
		return m.OldBirthDate(ctx)
	case account.FieldSelfIntroduction:
		return m.OldSelfIntroduction(ctx)
	case account.FieldCover:
		return m.OldCover(ctx)
	case account.FieldPhoto:
		return m.OldPhoto(ctx)
	case account.FieldPlatform:
		return m.OldPlatform(ctx)
	case account.FieldLastLoginTime:
		return m.OldLastLoginTime(ctx)
	case account.FieldCredit:
		return m.OldCredit(ctx)
	case account.FieldHeatNum:
		return m.OldHeatNum(ctx)
	case account.FieldDesignerID:
		return m.OldDesignerID(ctx)
	case account.FieldIdentity:
		return m.OldIdentity(ctx)
	case account.FieldLevel:
		return m.OldLevel(ctx)
	case account.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case account.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case account.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case account.FieldChainWalletID:
		return m.OldChainWalletID(ctx)
	case account.FieldDiscordAid:
		return m.OldDiscordAid(ctx)
	case account.FieldTicketBalance:
		return m.OldTicketBalance(ctx)
	case account.FieldOhdatTicketBalance:
		return m.OldOhdatTicketBalance(ctx)
	case account.FieldSpaceExpeditionChance:
		return m.OldSpaceExpeditionChance(ctx)
	case account.FieldBambLockedBalance:
		return m.OldBambLockedBalance(ctx)
	case account.FieldBambClaimableBalance:
		return m.OldBambClaimableBalance(ctx)
	case account.FieldBambStaking:
		return m.OldBambStaking(ctx)
	case account.FieldBamblpStaking:
		return m.OldBamblpStaking(ctx)
	case account.FieldBamblpCollect:
		return m.OldBamblpCollect(ctx)
	case account.FieldChipBalance:
		return m.OldChipBalance(ctx)
	case account.FieldBambooShootBalance:
		return m.OldBambooShootBalance(ctx)
	case account.FieldPandaAirdropCount:
		return m.OldPandaAirdropCount(ctx)
	case account.FieldFirstLogin:
		return m.OldFirstLogin(ctx)
	case account.FieldPassedSpaceExpeditionCount:
		return m.OldPassedSpaceExpeditionCount(ctx)
	case account.FieldPassedSpaceExpeditionReward:
		return m.OldPassedSpaceExpeditionReward(ctx)
	case account.FieldReserved:
		return m.OldReserved(ctx)
	case account.FieldCentralizedBeerCapsBalance:
		return m.OldCentralizedBeerCapsBalance(ctx)
	}
	return nil, fmt.Errorf("unknown Account field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case account.FieldAudit:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAudit(v)
		return nil
	case account.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case account.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case account.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case account.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case account.FieldDisable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisable(v)
		return nil
	case account.FieldPwdErrorNum:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPwdErrorNum(v)
		return nil
	case account.FieldPwdErrorExpireTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPwdErrorExpireTime(v)
		return nil
	case account.FieldPhoneToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneToken(v)
		return nil
	case account.FieldFacebook:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFacebook(v)
		return nil
	case account.FieldLine:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLine(v)
		return nil
	case account.FieldWeibo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeibo(v)
		return nil
	case account.FieldGoogle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoogle(v)
		return nil
	case account.FieldInstagram:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstagram(v)
		return nil
	case account.FieldLinkedin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLinkedin(v)
		return nil
	case account.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case account.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case account.FieldCountryCode:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountryCode(v)
		return nil
	case account.FieldQrcode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQrcode(v)
		return nil
	case account.FieldGender:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case account.FieldBirthDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthDate(v)
		return nil
	case account.FieldSelfIntroduction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSelfIntroduction(v)
		return nil
	case account.FieldCover:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCover(v)
		return nil
	case account.FieldPhoto:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoto(v)
		return nil
	case account.FieldPlatform:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatform(v)
		return nil
	case account.FieldLastLoginTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginTime(v)
		return nil
	case account.FieldCredit:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredit(v)
		return nil
	case account.FieldHeatNum:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeatNum(v)
		return nil
	case account.FieldDesignerID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesignerID(v)
		return nil
	case account.FieldIdentity:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentity(v)
		return nil
	case account.FieldLevel:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case account.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case account.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case account.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case account.FieldChainWalletID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainWalletID(v)
		return nil
	case account.FieldDiscordAid:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscordAid(v)
		return nil
	case account.FieldTicketBalance:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTicketBalance(v)
		return nil
	case account.FieldOhdatTicketBalance:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOhdatTicketBalance(v)
		return nil
	case account.FieldSpaceExpeditionChance:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpaceExpeditionChance(v)
		return nil
	case account.FieldBambLockedBalance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBambLockedBalance(v)
		return nil
	case account.FieldBambClaimableBalance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBambClaimableBalance(v)
		return nil
	case account.FieldBambStaking:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBambStaking(v)
		return nil
	case account.FieldBamblpStaking:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBamblpStaking(v)
		return nil
	case account.FieldBamblpCollect:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBamblpCollect(v)
		return nil
	case account.FieldChipBalance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChipBalance(v)
		return nil
	case account.FieldBambooShootBalance:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBambooShootBalance(v)
		return nil
	case account.FieldPandaAirdropCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPandaAirdropCount(v)
		return nil
	case account.FieldFirstLogin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstLogin(v)
		return nil
	case account.FieldPassedSpaceExpeditionCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassedSpaceExpeditionCount(v)
		return nil
	case account.FieldPassedSpaceExpeditionReward:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassedSpaceExpeditionReward(v)
		return nil
	case account.FieldReserved:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReserved(v)
		return nil
	case account.FieldCentralizedBeerCapsBalance:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCentralizedBeerCapsBalance(v)
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccountMutation) AddedFields() []string {
	var fields []string
	if m.addaudit != nil {
		fields = append(fields, account.FieldAudit)
	}
	if m.addpwd_error_num != nil {
		fields = append(fields, account.FieldPwdErrorNum)
	}
	if m.addpwd_error_expire_time != nil {
		fields = append(fields, account.FieldPwdErrorExpireTime)
	}
	if m.addcountry_code != nil {
		fields = append(fields, account.FieldCountryCode)
	}
	if m.addcredit != nil {
		fields = append(fields, account.FieldCredit)
	}
	if m.addheat_num != nil {
		fields = append(fields, account.FieldHeatNum)
	}
	if m.adddesigner_id != nil {
		fields = append(fields, account.FieldDesignerID)
	}
	if m.addlevel != nil {
		fields = append(fields, account.FieldLevel)
	}
	if m.adddiscord_aid != nil {
		fields = append(fields, account.FieldDiscordAid)
	}
	if m.addticket_balance != nil {
		fields = append(fields, account.FieldTicketBalance)
	}
	if m.addohdat_ticket_balance != nil {
		fields = append(fields, account.FieldOhdatTicketBalance)
	}
	if m.addbamb_locked_balance != nil {
		fields = append(fields, account.FieldBambLockedBalance)
	}
	if m.addbamb_claimable_balance != nil {
		fields = append(fields, account.FieldBambClaimableBalance)
	}
	if m.addbamb_staking != nil {
		fields = append(fields, account.FieldBambStaking)
	}
	if m.addbamblp_staking != nil {
		fields = append(fields, account.FieldBamblpStaking)
	}
	if m.addbamblp_collect != nil {
		fields = append(fields, account.FieldBamblpCollect)
	}
	if m.addchip_balance != nil {
		fields = append(fields, account.FieldChipBalance)
	}
	if m.addbamboo_shoot_balance != nil {
		fields = append(fields, account.FieldBambooShootBalance)
	}
	if m.addpanda_airdrop_count != nil {
		fields = append(fields, account.FieldPandaAirdropCount)
	}
	if m.addpassed_space_expedition_count != nil {
		fields = append(fields, account.FieldPassedSpaceExpeditionCount)
	}
	if m.addpassed_space_expedition_reward != nil {
		fields = append(fields, account.FieldPassedSpaceExpeditionReward)
	}
	if m.addcentralized_beer_caps_balance != nil {
		fields = append(fields, account.FieldCentralizedBeerCapsBalance)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccountMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case account.FieldAudit:
		return m.AddedAudit()
	case account.FieldPwdErrorNum:
		return m.AddedPwdErrorNum()
	case account.FieldPwdErrorExpireTime:
		return m.AddedPwdErrorExpireTime()
	case account.FieldCountryCode:
		return m.AddedCountryCode()
	case account.FieldCredit:
		return m.AddedCredit()
	case account.FieldHeatNum:
		return m.AddedHeatNum()
	case account.FieldDesignerID:
		return m.AddedDesignerID()
	case account.FieldLevel:
		return m.AddedLevel()
	case account.FieldDiscordAid:
		return m.AddedDiscordAid()
	case account.FieldTicketBalance:
		return m.AddedTicketBalance()
	case account.FieldOhdatTicketBalance:
		return m.AddedOhdatTicketBalance()
	case account.FieldBambLockedBalance:
		return m.AddedBambLockedBalance()
	case account.FieldBambClaimableBalance:
		return m.AddedBambClaimableBalance()
	case account.FieldBambStaking:
		return m.AddedBambStaking()
	case account.FieldBamblpStaking:
		return m.AddedBamblpStaking()
	case account.FieldBamblpCollect:
		return m.AddedBamblpCollect()
	case account.FieldChipBalance:
		return m.AddedChipBalance()
	case account.FieldBambooShootBalance:
		return m.AddedBambooShootBalance()
	case account.FieldPandaAirdropCount:
		return m.AddedPandaAirdropCount()
	case account.FieldPassedSpaceExpeditionCount:
		return m.AddedPassedSpaceExpeditionCount()
	case account.FieldPassedSpaceExpeditionReward:
		return m.AddedPassedSpaceExpeditionReward()
	case account.FieldCentralizedBeerCapsBalance:
		return m.AddedCentralizedBeerCapsBalance()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	case account.FieldAudit:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAudit(v)
		return nil
	case account.FieldPwdErrorNum:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPwdErrorNum(v)
		return nil
	case account.FieldPwdErrorExpireTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPwdErrorExpireTime(v)
		return nil
	case account.FieldCountryCode:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCountryCode(v)
		return nil
	case account.FieldCredit:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCredit(v)
		return nil
	case account.FieldHeatNum:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeatNum(v)
		return nil
	case account.FieldDesignerID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDesignerID(v)
		return nil
	case account.FieldLevel:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLevel(v)
		return nil
	case account.FieldDiscordAid:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDiscordAid(v)
		return nil
	case account.FieldTicketBalance:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTicketBalance(v)
		return nil
	case account.FieldOhdatTicketBalance:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOhdatTicketBalance(v)
		return nil
	case account.FieldBambLockedBalance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBambLockedBalance(v)
		return nil
	case account.FieldBambClaimableBalance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBambClaimableBalance(v)
		return nil
	case account.FieldBambStaking:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBambStaking(v)
		return nil
	case account.FieldBamblpStaking:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBamblpStaking(v)
		return nil
	case account.FieldBamblpCollect:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBamblpCollect(v)
		return nil
	case account.FieldChipBalance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddChipBalance(v)
		return nil
	case account.FieldBambooShootBalance:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBambooShootBalance(v)
		return nil
	case account.FieldPandaAirdropCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPandaAirdropCount(v)
		return nil
	case account.FieldPassedSpaceExpeditionCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPassedSpaceExpeditionCount(v)
		return nil
	case account.FieldPassedSpaceExpeditionReward:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPassedSpaceExpeditionReward(v)
		return nil
	case account.FieldCentralizedBeerCapsBalance:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCentralizedBeerCapsBalance(v)
		return nil
	}
	return fmt.Errorf("unknown Account numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccountMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(account.FieldPhoto) {
		fields = append(fields, account.FieldPhoto)
	}
	if m.FieldCleared(account.FieldDeletedAt) {
		fields = append(fields, account.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccountMutation) ClearField(name string) error {
	switch name {
	case account.FieldPhoto:
		m.ClearPhoto()
		return nil
	case account.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Account nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccountMutation) ResetField(name string) error {
	switch name {
	case account.FieldAudit:
		m.ResetAudit()
		return nil
	case account.FieldEmail:
		m.ResetEmail()
		return nil
	case account.FieldNickname:
		m.ResetNickname()
		return nil
	case account.FieldAvatar:
		m.ResetAvatar()
		return nil
	case account.FieldPassword:
		m.ResetPassword()
		return nil
	case account.FieldDisable:
		m.ResetDisable()
		return nil
	case account.FieldPwdErrorNum:
		m.ResetPwdErrorNum()
		return nil
	case account.FieldPwdErrorExpireTime:
		m.ResetPwdErrorExpireTime()
		return nil
	case account.FieldPhoneToken:
		m.ResetPhoneToken()
		return nil
	case account.FieldFacebook:
		m.ResetFacebook()
		return nil
	case account.FieldLine:
		m.ResetLine()
		return nil
	case account.FieldWeibo:
		m.ResetWeibo()
		return nil
	case account.FieldGoogle:
		m.ResetGoogle()
		return nil
	case account.FieldInstagram:
		m.ResetInstagram()
		return nil
	case account.FieldLinkedin:
		m.ResetLinkedin()
		return nil
	case account.FieldLanguage:
		m.ResetLanguage()
		return nil
	case account.FieldPhone:
		m.ResetPhone()
		return nil
	case account.FieldCountryCode:
		m.ResetCountryCode()
		return nil
	case account.FieldQrcode:
		m.ResetQrcode()
		return nil
	case account.FieldGender:
		m.ResetGender()
		return nil
	case account.FieldBirthDate:
		m.ResetBirthDate()
		return nil
	case account.FieldSelfIntroduction:
		m.ResetSelfIntroduction()
		return nil
	case account.FieldCover:
		m.ResetCover()
		return nil
	case account.FieldPhoto:
		m.ResetPhoto()
		return nil
	case account.FieldPlatform:
		m.ResetPlatform()
		return nil
	case account.FieldLastLoginTime:
		m.ResetLastLoginTime()
		return nil
	case account.FieldCredit:
		m.ResetCredit()
		return nil
	case account.FieldHeatNum:
		m.ResetHeatNum()
		return nil
	case account.FieldDesignerID:
		m.ResetDesignerID()
		return nil
	case account.FieldIdentity:
		m.ResetIdentity()
		return nil
	case account.FieldLevel:
		m.ResetLevel()
		return nil
	case account.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case account.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case account.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case account.FieldChainWalletID:
		m.ResetChainWalletID()
		return nil
	case account.FieldDiscordAid:
		m.ResetDiscordAid()
		return nil
	case account.FieldTicketBalance:
		m.ResetTicketBalance()
		return nil
	case account.FieldOhdatTicketBalance:
		m.ResetOhdatTicketBalance()
		return nil
	case account.FieldSpaceExpeditionChance:
		m.ResetSpaceExpeditionChance()
		return nil
	case account.FieldBambLockedBalance:
		m.ResetBambLockedBalance()
		return nil
	case account.FieldBambClaimableBalance:
		m.ResetBambClaimableBalance()
		return nil
	case account.FieldBambStaking:
		m.ResetBambStaking()
		return nil
	case account.FieldBamblpStaking:
		m.ResetBamblpStaking()
		return nil
	case account.FieldBamblpCollect:
		m.ResetBamblpCollect()
		return nil
	case account.FieldChipBalance:
		m.ResetChipBalance()
		return nil
	case account.FieldBambooShootBalance:
		m.ResetBambooShootBalance()
		return nil
	case account.FieldPandaAirdropCount:
		m.ResetPandaAirdropCount()
		return nil
	case account.FieldFirstLogin:
		m.ResetFirstLogin()
		return nil
	case account.FieldPassedSpaceExpeditionCount:
		m.ResetPassedSpaceExpeditionCount()
		return nil
	case account.FieldPassedSpaceExpeditionReward:
		m.ResetPassedSpaceExpeditionReward()
		return nil
	case account.FieldReserved:
		m.ResetReserved()
		return nil
	case account.FieldCentralizedBeerCapsBalance:
		m.ResetCentralizedBeerCapsBalance()
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Account unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Account edge %s", name)
}

// QuestionnaireIqiyiMutation represents an operation that mutates the QuestionnaireIqiyi nodes in the graph.
type QuestionnaireIqiyiMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int32
	wallet_address       *string
	twitter_url          *string
	invite_code          *string
	q1                   *string
	q2                   *string
	q3                   *string
	q4                   *string
	q5                   *string
	q6                   *string
	q7                   *string
	balance              *string
	amount               *int32
	addamount            *int32
	transaction_count    *int32
	addtransaction_count *int32
	answer               *int8
	addanswer            *int8
	updated_at           *time.Time
	deleted_at           *time.Time
	created_at           *time.Time
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*QuestionnaireIqiyi, error)
	predicates           []predicate.QuestionnaireIqiyi
}

var _ ent.Mutation = (*QuestionnaireIqiyiMutation)(nil)

// questionnaireiqiyiOption allows management of the mutation configuration using functional options.
type questionnaireiqiyiOption func(*QuestionnaireIqiyiMutation)

// newQuestionnaireIqiyiMutation creates new mutation for the QuestionnaireIqiyi entity.
func newQuestionnaireIqiyiMutation(c config, op Op, opts ...questionnaireiqiyiOption) *QuestionnaireIqiyiMutation {
	m := &QuestionnaireIqiyiMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestionnaireIqiyi,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionnaireIqiyiID sets the ID field of the mutation.
func withQuestionnaireIqiyiID(id int32) questionnaireiqiyiOption {
	return func(m *QuestionnaireIqiyiMutation) {
		var (
			err   error
			once  sync.Once
			value *QuestionnaireIqiyi
		)
		m.oldValue = func(ctx context.Context) (*QuestionnaireIqiyi, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().QuestionnaireIqiyi.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestionnaireIqiyi sets the old QuestionnaireIqiyi of the mutation.
func withQuestionnaireIqiyi(node *QuestionnaireIqiyi) questionnaireiqiyiOption {
	return func(m *QuestionnaireIqiyiMutation) {
		m.oldValue = func(context.Context) (*QuestionnaireIqiyi, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionnaireIqiyiMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionnaireIqiyiMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of QuestionnaireIqiyi entities.
func (m *QuestionnaireIqiyiMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestionnaireIqiyiMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuestionnaireIqiyiMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().QuestionnaireIqiyi.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetWalletAddress sets the "wallet_address" field.
func (m *QuestionnaireIqiyiMutation) SetWalletAddress(s string) {
	m.wallet_address = &s
}

// WalletAddress returns the value of the "wallet_address" field in the mutation.
func (m *QuestionnaireIqiyiMutation) WalletAddress() (r string, exists bool) {
	v := m.wallet_address
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletAddress returns the old "wallet_address" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldWalletAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletAddress: %w", err)
	}
	return oldValue.WalletAddress, nil
}

// ResetWalletAddress resets all changes to the "wallet_address" field.
func (m *QuestionnaireIqiyiMutation) ResetWalletAddress() {
	m.wallet_address = nil
}

// SetTwitterURL sets the "twitter_url" field.
func (m *QuestionnaireIqiyiMutation) SetTwitterURL(s string) {
	m.twitter_url = &s
}

// TwitterURL returns the value of the "twitter_url" field in the mutation.
func (m *QuestionnaireIqiyiMutation) TwitterURL() (r string, exists bool) {
	v := m.twitter_url
	if v == nil {
		return
	}
	return *v, true
}

// OldTwitterURL returns the old "twitter_url" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldTwitterURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTwitterURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTwitterURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTwitterURL: %w", err)
	}
	return oldValue.TwitterURL, nil
}

// ResetTwitterURL resets all changes to the "twitter_url" field.
func (m *QuestionnaireIqiyiMutation) ResetTwitterURL() {
	m.twitter_url = nil
}

// SetInviteCode sets the "invite_code" field.
func (m *QuestionnaireIqiyiMutation) SetInviteCode(s string) {
	m.invite_code = &s
}

// InviteCode returns the value of the "invite_code" field in the mutation.
func (m *QuestionnaireIqiyiMutation) InviteCode() (r string, exists bool) {
	v := m.invite_code
	if v == nil {
		return
	}
	return *v, true
}

// OldInviteCode returns the old "invite_code" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldInviteCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInviteCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInviteCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInviteCode: %w", err)
	}
	return oldValue.InviteCode, nil
}

// ResetInviteCode resets all changes to the "invite_code" field.
func (m *QuestionnaireIqiyiMutation) ResetInviteCode() {
	m.invite_code = nil
}

// SetQ1 sets the "q1" field.
func (m *QuestionnaireIqiyiMutation) SetQ1(s string) {
	m.q1 = &s
}

// Q1 returns the value of the "q1" field in the mutation.
func (m *QuestionnaireIqiyiMutation) Q1() (r string, exists bool) {
	v := m.q1
	if v == nil {
		return
	}
	return *v, true
}

// OldQ1 returns the old "q1" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldQ1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQ1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQ1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQ1: %w", err)
	}
	return oldValue.Q1, nil
}

// ResetQ1 resets all changes to the "q1" field.
func (m *QuestionnaireIqiyiMutation) ResetQ1() {
	m.q1 = nil
}

// SetQ2 sets the "q2" field.
func (m *QuestionnaireIqiyiMutation) SetQ2(s string) {
	m.q2 = &s
}

// Q2 returns the value of the "q2" field in the mutation.
func (m *QuestionnaireIqiyiMutation) Q2() (r string, exists bool) {
	v := m.q2
	if v == nil {
		return
	}
	return *v, true
}

// OldQ2 returns the old "q2" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldQ2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQ2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQ2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQ2: %w", err)
	}
	return oldValue.Q2, nil
}

// ResetQ2 resets all changes to the "q2" field.
func (m *QuestionnaireIqiyiMutation) ResetQ2() {
	m.q2 = nil
}

// SetQ3 sets the "q3" field.
func (m *QuestionnaireIqiyiMutation) SetQ3(s string) {
	m.q3 = &s
}

// Q3 returns the value of the "q3" field in the mutation.
func (m *QuestionnaireIqiyiMutation) Q3() (r string, exists bool) {
	v := m.q3
	if v == nil {
		return
	}
	return *v, true
}

// OldQ3 returns the old "q3" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldQ3(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQ3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQ3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQ3: %w", err)
	}
	return oldValue.Q3, nil
}

// ResetQ3 resets all changes to the "q3" field.
func (m *QuestionnaireIqiyiMutation) ResetQ3() {
	m.q3 = nil
}

// SetQ4 sets the "q4" field.
func (m *QuestionnaireIqiyiMutation) SetQ4(s string) {
	m.q4 = &s
}

// Q4 returns the value of the "q4" field in the mutation.
func (m *QuestionnaireIqiyiMutation) Q4() (r string, exists bool) {
	v := m.q4
	if v == nil {
		return
	}
	return *v, true
}

// OldQ4 returns the old "q4" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldQ4(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQ4 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQ4 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQ4: %w", err)
	}
	return oldValue.Q4, nil
}

// ResetQ4 resets all changes to the "q4" field.
func (m *QuestionnaireIqiyiMutation) ResetQ4() {
	m.q4 = nil
}

// SetQ5 sets the "q5" field.
func (m *QuestionnaireIqiyiMutation) SetQ5(s string) {
	m.q5 = &s
}

// Q5 returns the value of the "q5" field in the mutation.
func (m *QuestionnaireIqiyiMutation) Q5() (r string, exists bool) {
	v := m.q5
	if v == nil {
		return
	}
	return *v, true
}

// OldQ5 returns the old "q5" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldQ5(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQ5 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQ5 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQ5: %w", err)
	}
	return oldValue.Q5, nil
}

// ResetQ5 resets all changes to the "q5" field.
func (m *QuestionnaireIqiyiMutation) ResetQ5() {
	m.q5 = nil
}

// SetQ6 sets the "q6" field.
func (m *QuestionnaireIqiyiMutation) SetQ6(s string) {
	m.q6 = &s
}

// Q6 returns the value of the "q6" field in the mutation.
func (m *QuestionnaireIqiyiMutation) Q6() (r string, exists bool) {
	v := m.q6
	if v == nil {
		return
	}
	return *v, true
}

// OldQ6 returns the old "q6" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldQ6(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQ6 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQ6 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQ6: %w", err)
	}
	return oldValue.Q6, nil
}

// ResetQ6 resets all changes to the "q6" field.
func (m *QuestionnaireIqiyiMutation) ResetQ6() {
	m.q6 = nil
}

// SetQ7 sets the "q7" field.
func (m *QuestionnaireIqiyiMutation) SetQ7(s string) {
	m.q7 = &s
}

// Q7 returns the value of the "q7" field in the mutation.
func (m *QuestionnaireIqiyiMutation) Q7() (r string, exists bool) {
	v := m.q7
	if v == nil {
		return
	}
	return *v, true
}

// OldQ7 returns the old "q7" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldQ7(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQ7 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQ7 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQ7: %w", err)
	}
	return oldValue.Q7, nil
}

// ResetQ7 resets all changes to the "q7" field.
func (m *QuestionnaireIqiyiMutation) ResetQ7() {
	m.q7 = nil
}

// SetBalance sets the "balance" field.
func (m *QuestionnaireIqiyiMutation) SetBalance(s string) {
	m.balance = &s
}

// Balance returns the value of the "balance" field in the mutation.
func (m *QuestionnaireIqiyiMutation) Balance() (r string, exists bool) {
	v := m.balance
	if v == nil {
		return
	}
	return *v, true
}

// OldBalance returns the old "balance" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldBalance(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalance: %w", err)
	}
	return oldValue.Balance, nil
}

// ClearBalance clears the value of the "balance" field.
func (m *QuestionnaireIqiyiMutation) ClearBalance() {
	m.balance = nil
	m.clearedFields[questionnaireiqiyi.FieldBalance] = struct{}{}
}

// BalanceCleared returns if the "balance" field was cleared in this mutation.
func (m *QuestionnaireIqiyiMutation) BalanceCleared() bool {
	_, ok := m.clearedFields[questionnaireiqiyi.FieldBalance]
	return ok
}

// ResetBalance resets all changes to the "balance" field.
func (m *QuestionnaireIqiyiMutation) ResetBalance() {
	m.balance = nil
	delete(m.clearedFields, questionnaireiqiyi.FieldBalance)
}

// SetAmount sets the "amount" field.
func (m *QuestionnaireIqiyiMutation) SetAmount(i int32) {
	m.amount = &i
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *QuestionnaireIqiyiMutation) Amount() (r int32, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldAmount(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds i to the "amount" field.
func (m *QuestionnaireIqiyiMutation) AddAmount(i int32) {
	if m.addamount != nil {
		*m.addamount += i
	} else {
		m.addamount = &i
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *QuestionnaireIqiyiMutation) AddedAmount() (r int32, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ClearAmount clears the value of the "amount" field.
func (m *QuestionnaireIqiyiMutation) ClearAmount() {
	m.amount = nil
	m.addamount = nil
	m.clearedFields[questionnaireiqiyi.FieldAmount] = struct{}{}
}

// AmountCleared returns if the "amount" field was cleared in this mutation.
func (m *QuestionnaireIqiyiMutation) AmountCleared() bool {
	_, ok := m.clearedFields[questionnaireiqiyi.FieldAmount]
	return ok
}

// ResetAmount resets all changes to the "amount" field.
func (m *QuestionnaireIqiyiMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
	delete(m.clearedFields, questionnaireiqiyi.FieldAmount)
}

// SetTransactionCount sets the "transaction_count" field.
func (m *QuestionnaireIqiyiMutation) SetTransactionCount(i int32) {
	m.transaction_count = &i
	m.addtransaction_count = nil
}

// TransactionCount returns the value of the "transaction_count" field in the mutation.
func (m *QuestionnaireIqiyiMutation) TransactionCount() (r int32, exists bool) {
	v := m.transaction_count
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionCount returns the old "transaction_count" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldTransactionCount(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionCount: %w", err)
	}
	return oldValue.TransactionCount, nil
}

// AddTransactionCount adds i to the "transaction_count" field.
func (m *QuestionnaireIqiyiMutation) AddTransactionCount(i int32) {
	if m.addtransaction_count != nil {
		*m.addtransaction_count += i
	} else {
		m.addtransaction_count = &i
	}
}

// AddedTransactionCount returns the value that was added to the "transaction_count" field in this mutation.
func (m *QuestionnaireIqiyiMutation) AddedTransactionCount() (r int32, exists bool) {
	v := m.addtransaction_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearTransactionCount clears the value of the "transaction_count" field.
func (m *QuestionnaireIqiyiMutation) ClearTransactionCount() {
	m.transaction_count = nil
	m.addtransaction_count = nil
	m.clearedFields[questionnaireiqiyi.FieldTransactionCount] = struct{}{}
}

// TransactionCountCleared returns if the "transaction_count" field was cleared in this mutation.
func (m *QuestionnaireIqiyiMutation) TransactionCountCleared() bool {
	_, ok := m.clearedFields[questionnaireiqiyi.FieldTransactionCount]
	return ok
}

// ResetTransactionCount resets all changes to the "transaction_count" field.
func (m *QuestionnaireIqiyiMutation) ResetTransactionCount() {
	m.transaction_count = nil
	m.addtransaction_count = nil
	delete(m.clearedFields, questionnaireiqiyi.FieldTransactionCount)
}

// SetAnswer sets the "answer" field.
func (m *QuestionnaireIqiyiMutation) SetAnswer(i int8) {
	m.answer = &i
	m.addanswer = nil
}

// Answer returns the value of the "answer" field in the mutation.
func (m *QuestionnaireIqiyiMutation) Answer() (r int8, exists bool) {
	v := m.answer
	if v == nil {
		return
	}
	return *v, true
}

// OldAnswer returns the old "answer" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldAnswer(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnswer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnswer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnswer: %w", err)
	}
	return oldValue.Answer, nil
}

// AddAnswer adds i to the "answer" field.
func (m *QuestionnaireIqiyiMutation) AddAnswer(i int8) {
	if m.addanswer != nil {
		*m.addanswer += i
	} else {
		m.addanswer = &i
	}
}

// AddedAnswer returns the value that was added to the "answer" field in this mutation.
func (m *QuestionnaireIqiyiMutation) AddedAnswer() (r int8, exists bool) {
	v := m.addanswer
	if v == nil {
		return
	}
	return *v, true
}

// ClearAnswer clears the value of the "answer" field.
func (m *QuestionnaireIqiyiMutation) ClearAnswer() {
	m.answer = nil
	m.addanswer = nil
	m.clearedFields[questionnaireiqiyi.FieldAnswer] = struct{}{}
}

// AnswerCleared returns if the "answer" field was cleared in this mutation.
func (m *QuestionnaireIqiyiMutation) AnswerCleared() bool {
	_, ok := m.clearedFields[questionnaireiqiyi.FieldAnswer]
	return ok
}

// ResetAnswer resets all changes to the "answer" field.
func (m *QuestionnaireIqiyiMutation) ResetAnswer() {
	m.answer = nil
	m.addanswer = nil
	delete(m.clearedFields, questionnaireiqiyi.FieldAnswer)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *QuestionnaireIqiyiMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *QuestionnaireIqiyiMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *QuestionnaireIqiyiMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *QuestionnaireIqiyiMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *QuestionnaireIqiyiMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *QuestionnaireIqiyiMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[questionnaireiqiyi.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *QuestionnaireIqiyiMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[questionnaireiqiyi.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *QuestionnaireIqiyiMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, questionnaireiqiyi.FieldDeletedAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *QuestionnaireIqiyiMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QuestionnaireIqiyiMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the QuestionnaireIqiyi entity.
// If the QuestionnaireIqiyi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireIqiyiMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QuestionnaireIqiyiMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the QuestionnaireIqiyiMutation builder.
func (m *QuestionnaireIqiyiMutation) Where(ps ...predicate.QuestionnaireIqiyi) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *QuestionnaireIqiyiMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (QuestionnaireIqiyi).
func (m *QuestionnaireIqiyiMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionnaireIqiyiMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.wallet_address != nil {
		fields = append(fields, questionnaireiqiyi.FieldWalletAddress)
	}
	if m.twitter_url != nil {
		fields = append(fields, questionnaireiqiyi.FieldTwitterURL)
	}
	if m.invite_code != nil {
		fields = append(fields, questionnaireiqiyi.FieldInviteCode)
	}
	if m.q1 != nil {
		fields = append(fields, questionnaireiqiyi.FieldQ1)
	}
	if m.q2 != nil {
		fields = append(fields, questionnaireiqiyi.FieldQ2)
	}
	if m.q3 != nil {
		fields = append(fields, questionnaireiqiyi.FieldQ3)
	}
	if m.q4 != nil {
		fields = append(fields, questionnaireiqiyi.FieldQ4)
	}
	if m.q5 != nil {
		fields = append(fields, questionnaireiqiyi.FieldQ5)
	}
	if m.q6 != nil {
		fields = append(fields, questionnaireiqiyi.FieldQ6)
	}
	if m.q7 != nil {
		fields = append(fields, questionnaireiqiyi.FieldQ7)
	}
	if m.balance != nil {
		fields = append(fields, questionnaireiqiyi.FieldBalance)
	}
	if m.amount != nil {
		fields = append(fields, questionnaireiqiyi.FieldAmount)
	}
	if m.transaction_count != nil {
		fields = append(fields, questionnaireiqiyi.FieldTransactionCount)
	}
	if m.answer != nil {
		fields = append(fields, questionnaireiqiyi.FieldAnswer)
	}
	if m.updated_at != nil {
		fields = append(fields, questionnaireiqiyi.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, questionnaireiqiyi.FieldDeletedAt)
	}
	if m.created_at != nil {
		fields = append(fields, questionnaireiqiyi.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionnaireIqiyiMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case questionnaireiqiyi.FieldWalletAddress:
		return m.WalletAddress()
	case questionnaireiqiyi.FieldTwitterURL:
		return m.TwitterURL()
	case questionnaireiqiyi.FieldInviteCode:
		return m.InviteCode()
	case questionnaireiqiyi.FieldQ1:
		return m.Q1()
	case questionnaireiqiyi.FieldQ2:
		return m.Q2()
	case questionnaireiqiyi.FieldQ3:
		return m.Q3()
	case questionnaireiqiyi.FieldQ4:
		return m.Q4()
	case questionnaireiqiyi.FieldQ5:
		return m.Q5()
	case questionnaireiqiyi.FieldQ6:
		return m.Q6()
	case questionnaireiqiyi.FieldQ7:
		return m.Q7()
	case questionnaireiqiyi.FieldBalance:
		return m.Balance()
	case questionnaireiqiyi.FieldAmount:
		return m.Amount()
	case questionnaireiqiyi.FieldTransactionCount:
		return m.TransactionCount()
	case questionnaireiqiyi.FieldAnswer:
		return m.Answer()
	case questionnaireiqiyi.FieldUpdatedAt:
		return m.UpdatedAt()
	case questionnaireiqiyi.FieldDeletedAt:
		return m.DeletedAt()
	case questionnaireiqiyi.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionnaireIqiyiMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case questionnaireiqiyi.FieldWalletAddress:
		return m.OldWalletAddress(ctx)
	case questionnaireiqiyi.FieldTwitterURL:
		return m.OldTwitterURL(ctx)
	case questionnaireiqiyi.FieldInviteCode:
		return m.OldInviteCode(ctx)
	case questionnaireiqiyi.FieldQ1:
		return m.OldQ1(ctx)
	case questionnaireiqiyi.FieldQ2:
		return m.OldQ2(ctx)
	case questionnaireiqiyi.FieldQ3:
		return m.OldQ3(ctx)
	case questionnaireiqiyi.FieldQ4:
		return m.OldQ4(ctx)
	case questionnaireiqiyi.FieldQ5:
		return m.OldQ5(ctx)
	case questionnaireiqiyi.FieldQ6:
		return m.OldQ6(ctx)
	case questionnaireiqiyi.FieldQ7:
		return m.OldQ7(ctx)
	case questionnaireiqiyi.FieldBalance:
		return m.OldBalance(ctx)
	case questionnaireiqiyi.FieldAmount:
		return m.OldAmount(ctx)
	case questionnaireiqiyi.FieldTransactionCount:
		return m.OldTransactionCount(ctx)
	case questionnaireiqiyi.FieldAnswer:
		return m.OldAnswer(ctx)
	case questionnaireiqiyi.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case questionnaireiqiyi.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case questionnaireiqiyi.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown QuestionnaireIqiyi field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionnaireIqiyiMutation) SetField(name string, value ent.Value) error {
	switch name {
	case questionnaireiqiyi.FieldWalletAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletAddress(v)
		return nil
	case questionnaireiqiyi.FieldTwitterURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTwitterURL(v)
		return nil
	case questionnaireiqiyi.FieldInviteCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInviteCode(v)
		return nil
	case questionnaireiqiyi.FieldQ1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQ1(v)
		return nil
	case questionnaireiqiyi.FieldQ2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQ2(v)
		return nil
	case questionnaireiqiyi.FieldQ3:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQ3(v)
		return nil
	case questionnaireiqiyi.FieldQ4:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQ4(v)
		return nil
	case questionnaireiqiyi.FieldQ5:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQ5(v)
		return nil
	case questionnaireiqiyi.FieldQ6:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQ6(v)
		return nil
	case questionnaireiqiyi.FieldQ7:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQ7(v)
		return nil
	case questionnaireiqiyi.FieldBalance:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalance(v)
		return nil
	case questionnaireiqiyi.FieldAmount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case questionnaireiqiyi.FieldTransactionCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionCount(v)
		return nil
	case questionnaireiqiyi.FieldAnswer:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnswer(v)
		return nil
	case questionnaireiqiyi.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case questionnaireiqiyi.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case questionnaireiqiyi.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown QuestionnaireIqiyi field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionnaireIqiyiMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, questionnaireiqiyi.FieldAmount)
	}
	if m.addtransaction_count != nil {
		fields = append(fields, questionnaireiqiyi.FieldTransactionCount)
	}
	if m.addanswer != nil {
		fields = append(fields, questionnaireiqiyi.FieldAnswer)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionnaireIqiyiMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case questionnaireiqiyi.FieldAmount:
		return m.AddedAmount()
	case questionnaireiqiyi.FieldTransactionCount:
		return m.AddedTransactionCount()
	case questionnaireiqiyi.FieldAnswer:
		return m.AddedAnswer()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionnaireIqiyiMutation) AddField(name string, value ent.Value) error {
	switch name {
	case questionnaireiqiyi.FieldAmount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case questionnaireiqiyi.FieldTransactionCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTransactionCount(v)
		return nil
	case questionnaireiqiyi.FieldAnswer:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAnswer(v)
		return nil
	}
	return fmt.Errorf("unknown QuestionnaireIqiyi numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionnaireIqiyiMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(questionnaireiqiyi.FieldBalance) {
		fields = append(fields, questionnaireiqiyi.FieldBalance)
	}
	if m.FieldCleared(questionnaireiqiyi.FieldAmount) {
		fields = append(fields, questionnaireiqiyi.FieldAmount)
	}
	if m.FieldCleared(questionnaireiqiyi.FieldTransactionCount) {
		fields = append(fields, questionnaireiqiyi.FieldTransactionCount)
	}
	if m.FieldCleared(questionnaireiqiyi.FieldAnswer) {
		fields = append(fields, questionnaireiqiyi.FieldAnswer)
	}
	if m.FieldCleared(questionnaireiqiyi.FieldDeletedAt) {
		fields = append(fields, questionnaireiqiyi.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionnaireIqiyiMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionnaireIqiyiMutation) ClearField(name string) error {
	switch name {
	case questionnaireiqiyi.FieldBalance:
		m.ClearBalance()
		return nil
	case questionnaireiqiyi.FieldAmount:
		m.ClearAmount()
		return nil
	case questionnaireiqiyi.FieldTransactionCount:
		m.ClearTransactionCount()
		return nil
	case questionnaireiqiyi.FieldAnswer:
		m.ClearAnswer()
		return nil
	case questionnaireiqiyi.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown QuestionnaireIqiyi nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionnaireIqiyiMutation) ResetField(name string) error {
	switch name {
	case questionnaireiqiyi.FieldWalletAddress:
		m.ResetWalletAddress()
		return nil
	case questionnaireiqiyi.FieldTwitterURL:
		m.ResetTwitterURL()
		return nil
	case questionnaireiqiyi.FieldInviteCode:
		m.ResetInviteCode()
		return nil
	case questionnaireiqiyi.FieldQ1:
		m.ResetQ1()
		return nil
	case questionnaireiqiyi.FieldQ2:
		m.ResetQ2()
		return nil
	case questionnaireiqiyi.FieldQ3:
		m.ResetQ3()
		return nil
	case questionnaireiqiyi.FieldQ4:
		m.ResetQ4()
		return nil
	case questionnaireiqiyi.FieldQ5:
		m.ResetQ5()
		return nil
	case questionnaireiqiyi.FieldQ6:
		m.ResetQ6()
		return nil
	case questionnaireiqiyi.FieldQ7:
		m.ResetQ7()
		return nil
	case questionnaireiqiyi.FieldBalance:
		m.ResetBalance()
		return nil
	case questionnaireiqiyi.FieldAmount:
		m.ResetAmount()
		return nil
	case questionnaireiqiyi.FieldTransactionCount:
		m.ResetTransactionCount()
		return nil
	case questionnaireiqiyi.FieldAnswer:
		m.ResetAnswer()
		return nil
	case questionnaireiqiyi.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case questionnaireiqiyi.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case questionnaireiqiyi.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown QuestionnaireIqiyi field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionnaireIqiyiMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionnaireIqiyiMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionnaireIqiyiMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionnaireIqiyiMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionnaireIqiyiMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionnaireIqiyiMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionnaireIqiyiMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown QuestionnaireIqiyi unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionnaireIqiyiMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown QuestionnaireIqiyi edge %s", name)
}
