// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ohdat/entmod/ent/account"
)

// Account is the model entity for the Account schema.
type Account struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// 审核状态 0审核中，1已通过
	Audit uint8 `json:"audit,omitempty"`
	// 邮箱
	Email string `json:"email,omitempty"`
	// 昵称
	Nickname string `json:"nickname,omitempty"`
	// 头像
	Avatar string `json:"avatar,omitempty"`
	// 密码
	Password string `json:"password,omitempty"`
	// 是否黑名单 0否1是
	Disable bool `json:"disable,omitempty"`
	// 密码错误次数
	PwdErrorNum int32 `json:"pwd_error_num,omitempty"`
	// 超过错误次数后能够登陆的时间
	PwdErrorExpireTime int32 `json:"pwd_error_expire_time,omitempty"`
	// 手机标识phoneToken
	PhoneToken string `json:"phone_token,omitempty"`
	// facebook第三方登录id
	Facebook string `json:"facebook,omitempty"`
	// line第三方登录id
	Line string `json:"line,omitempty"`
	// weibo第三方登录id
	Weibo string `json:"weibo,omitempty"`
	// google第三方登录id
	Google string `json:"google,omitempty"`
	// instagram第三方登录id
	Instagram string `json:"instagram,omitempty"`
	// linkedin第三方登录id
	Linkedin string `json:"linkedin,omitempty"`
	// 首选语言
	Language string `json:"language,omitempty"`
	// 手机号
	Phone string `json:"phone,omitempty"`
	// 手机号国家代码
	CountryCode int32 `json:"country_code,omitempty"`
	// 二维码地址
	Qrcode string `json:"qrcode,omitempty"`
	// 性别0女1男2其他
	Gender bool `json:"gender,omitempty"`
	// 生日
	BirthDate time.Time `json:"birth_date,omitempty"`
	// 自我简介限120字
	SelfIntroduction string `json:"self_introduction,omitempty"`
	// 个人主页封面
	Cover string `json:"cover,omitempty"`
	// 个人主页照片
	Photo string `json:"photo,omitempty"`
	// 1IOS, 2安卓
	Platform bool `json:"platform,omitempty"`
	// 上次登录时间
	LastLoginTime time.Time `json:"last_login_time,omitempty"`
	// 信用分
	Credit int32 `json:"credit,omitempty"`
	// 热度
	HeatNum int32 `json:"heat_num,omitempty"`
	// 设计师ID（如果是的话）
	DesignerID int32 `json:"designer_id,omitempty"`
	// 认证的身份 0普通人 1设计师 2厂商
	Identity bool `json:"identity,omitempty"`
	// 用户等级
	Level int32 `json:"level,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 钱包地址
	ChainWalletID string `json:"chain_wallet_id,omitempty"`
	// Discord Account表ID
	DiscordAid int32 `json:"discord_aid,omitempty"`
	// 奖券余额
	TicketBalance int32 `json:"ticket_balance,omitempty"`
	// 中心化奖券余额
	OhdatTicketBalance int32 `json:"ohdat_ticket_balance,omitempty"`
	// PvE剩余体力数
	SpaceExpeditionChance bool `json:"space_expedition_chance,omitempty"`
	// 未解锁bamb余额
	BambLockedBalance float64 `json:"bamb_locked_balance,omitempty"`
	// 可提取bamb余额
	BambClaimableBalance float64 `json:"bamb_claimable_balance,omitempty"`
	// 质押的bamb的数量
	BambStaking float64 `json:"bamb_staking,omitempty"`
	// 质押的bamb_lp的数量
	BamblpStaking float64 `json:"bamblp_staking,omitempty"`
	// 质押的bamb_lp的可提现奖励
	BamblpCollect float64 `json:"bamblp_collect,omitempty"`
	// 筹码余额
	ChipBalance float64 `json:"chip_balance,omitempty"`
	// 竹笋矿余额
	BambooShootBalance int32 `json:"bamboo_shoot_balance,omitempty"`
	// 空投时持有熊猫数量
	PandaAirdropCount int32 `json:"panda_airdrop_count,omitempty"`
	// 第一次登录网站
	FirstLogin bool `json:"first_login,omitempty"`
	// PvE过去游戏场数
	PassedSpaceExpeditionCount int32 `json:"passed_space_expedition_count,omitempty"`
	// PvE过去游戏奖励
	PassedSpaceExpeditionReward float64 `json:"passed_space_expedition_reward,omitempty"`
	// 工会账号
	Reserved string `json:"reserved,omitempty"`
	// 中心化瓶盖余额
	CentralizedBeerCapsBalance int32 `json:"centralized_beer_caps_balance,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Account) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case account.FieldDisable, account.FieldGender, account.FieldPlatform, account.FieldIdentity, account.FieldSpaceExpeditionChance, account.FieldFirstLogin:
			values[i] = new(sql.NullBool)
		case account.FieldBambLockedBalance, account.FieldBambClaimableBalance, account.FieldBambStaking, account.FieldBamblpStaking, account.FieldBamblpCollect, account.FieldChipBalance, account.FieldPassedSpaceExpeditionReward:
			values[i] = new(sql.NullFloat64)
		case account.FieldID, account.FieldAudit, account.FieldPwdErrorNum, account.FieldPwdErrorExpireTime, account.FieldCountryCode, account.FieldCredit, account.FieldHeatNum, account.FieldDesignerID, account.FieldLevel, account.FieldDiscordAid, account.FieldTicketBalance, account.FieldOhdatTicketBalance, account.FieldBambooShootBalance, account.FieldPandaAirdropCount, account.FieldPassedSpaceExpeditionCount, account.FieldCentralizedBeerCapsBalance:
			values[i] = new(sql.NullInt64)
		case account.FieldEmail, account.FieldNickname, account.FieldAvatar, account.FieldPassword, account.FieldPhoneToken, account.FieldFacebook, account.FieldLine, account.FieldWeibo, account.FieldGoogle, account.FieldInstagram, account.FieldLinkedin, account.FieldLanguage, account.FieldPhone, account.FieldQrcode, account.FieldSelfIntroduction, account.FieldCover, account.FieldPhoto, account.FieldChainWalletID, account.FieldReserved:
			values[i] = new(sql.NullString)
		case account.FieldBirthDate, account.FieldLastLoginTime, account.FieldUpdatedAt, account.FieldDeletedAt, account.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Account", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Account fields.
func (a *Account) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case account.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int32(value.Int64)
		case account.FieldAudit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field audit", values[i])
			} else if value.Valid {
				a.Audit = uint8(value.Int64)
			}
		case account.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				a.Email = value.String
			}
		case account.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				a.Nickname = value.String
			}
		case account.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				a.Avatar = value.String
			}
		case account.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				a.Password = value.String
			}
		case account.FieldDisable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disable", values[i])
			} else if value.Valid {
				a.Disable = value.Bool
			}
		case account.FieldPwdErrorNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pwd_error_num", values[i])
			} else if value.Valid {
				a.PwdErrorNum = int32(value.Int64)
			}
		case account.FieldPwdErrorExpireTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pwd_error_expire_time", values[i])
			} else if value.Valid {
				a.PwdErrorExpireTime = int32(value.Int64)
			}
		case account.FieldPhoneToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_token", values[i])
			} else if value.Valid {
				a.PhoneToken = value.String
			}
		case account.FieldFacebook:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field facebook", values[i])
			} else if value.Valid {
				a.Facebook = value.String
			}
		case account.FieldLine:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field line", values[i])
			} else if value.Valid {
				a.Line = value.String
			}
		case account.FieldWeibo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field weibo", values[i])
			} else if value.Valid {
				a.Weibo = value.String
			}
		case account.FieldGoogle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field google", values[i])
			} else if value.Valid {
				a.Google = value.String
			}
		case account.FieldInstagram:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instagram", values[i])
			} else if value.Valid {
				a.Instagram = value.String
			}
		case account.FieldLinkedin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field linkedin", values[i])
			} else if value.Valid {
				a.Linkedin = value.String
			}
		case account.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				a.Language = value.String
			}
		case account.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				a.Phone = value.String
			}
		case account.FieldCountryCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field country_code", values[i])
			} else if value.Valid {
				a.CountryCode = int32(value.Int64)
			}
		case account.FieldQrcode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field qrcode", values[i])
			} else if value.Valid {
				a.Qrcode = value.String
			}
		case account.FieldGender:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				a.Gender = value.Bool
			}
		case account.FieldBirthDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birth_date", values[i])
			} else if value.Valid {
				a.BirthDate = value.Time
			}
		case account.FieldSelfIntroduction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field self_introduction", values[i])
			} else if value.Valid {
				a.SelfIntroduction = value.String
			}
		case account.FieldCover:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover", values[i])
			} else if value.Valid {
				a.Cover = value.String
			}
		case account.FieldPhoto:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field photo", values[i])
			} else if value.Valid {
				a.Photo = value.String
			}
		case account.FieldPlatform:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				a.Platform = value.Bool
			}
		case account.FieldLastLoginTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_login_time", values[i])
			} else if value.Valid {
				a.LastLoginTime = value.Time
			}
		case account.FieldCredit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field credit", values[i])
			} else if value.Valid {
				a.Credit = int32(value.Int64)
			}
		case account.FieldHeatNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field heat_num", values[i])
			} else if value.Valid {
				a.HeatNum = int32(value.Int64)
			}
		case account.FieldDesignerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field designer_id", values[i])
			} else if value.Valid {
				a.DesignerID = int32(value.Int64)
			}
		case account.FieldIdentity:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field identity", values[i])
			} else if value.Valid {
				a.Identity = value.Bool
			}
		case account.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				a.Level = int32(value.Int64)
			}
		case account.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case account.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = value.Time
			}
		case account.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case account.FieldChainWalletID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chain_wallet_id", values[i])
			} else if value.Valid {
				a.ChainWalletID = value.String
			}
		case account.FieldDiscordAid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field discord_aid", values[i])
			} else if value.Valid {
				a.DiscordAid = int32(value.Int64)
			}
		case account.FieldTicketBalance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_balance", values[i])
			} else if value.Valid {
				a.TicketBalance = int32(value.Int64)
			}
		case account.FieldOhdatTicketBalance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ohdat_ticket_balance", values[i])
			} else if value.Valid {
				a.OhdatTicketBalance = int32(value.Int64)
			}
		case account.FieldSpaceExpeditionChance:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field space_expedition_chance", values[i])
			} else if value.Valid {
				a.SpaceExpeditionChance = value.Bool
			}
		case account.FieldBambLockedBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bamb_locked_balance", values[i])
			} else if value.Valid {
				a.BambLockedBalance = value.Float64
			}
		case account.FieldBambClaimableBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bamb_claimable_balance", values[i])
			} else if value.Valid {
				a.BambClaimableBalance = value.Float64
			}
		case account.FieldBambStaking:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bamb_staking", values[i])
			} else if value.Valid {
				a.BambStaking = value.Float64
			}
		case account.FieldBamblpStaking:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bamblp_staking", values[i])
			} else if value.Valid {
				a.BamblpStaking = value.Float64
			}
		case account.FieldBamblpCollect:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bamblp_collect", values[i])
			} else if value.Valid {
				a.BamblpCollect = value.Float64
			}
		case account.FieldChipBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field chip_balance", values[i])
			} else if value.Valid {
				a.ChipBalance = value.Float64
			}
		case account.FieldBambooShootBalance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bamboo_shoot_balance", values[i])
			} else if value.Valid {
				a.BambooShootBalance = int32(value.Int64)
			}
		case account.FieldPandaAirdropCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field panda_airdrop_count", values[i])
			} else if value.Valid {
				a.PandaAirdropCount = int32(value.Int64)
			}
		case account.FieldFirstLogin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field first_login", values[i])
			} else if value.Valid {
				a.FirstLogin = value.Bool
			}
		case account.FieldPassedSpaceExpeditionCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field passed_space_expedition_count", values[i])
			} else if value.Valid {
				a.PassedSpaceExpeditionCount = int32(value.Int64)
			}
		case account.FieldPassedSpaceExpeditionReward:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field passed_space_expedition_reward", values[i])
			} else if value.Valid {
				a.PassedSpaceExpeditionReward = value.Float64
			}
		case account.FieldReserved:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reserved", values[i])
			} else if value.Valid {
				a.Reserved = value.String
			}
		case account.FieldCentralizedBeerCapsBalance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field centralized_beer_caps_balance", values[i])
			} else if value.Valid {
				a.CentralizedBeerCapsBalance = int32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Account.
// Note that you need to call Account.Unwrap() before calling this method if this Account
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Account) Update() *AccountUpdateOne {
	return (&AccountClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Account entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Account) Unwrap() *Account {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Account is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Account) String() string {
	var builder strings.Builder
	builder.WriteString("Account(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("audit=")
	builder.WriteString(fmt.Sprintf("%v", a.Audit))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(a.Email)
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(a.Nickname)
	builder.WriteString(", ")
	builder.WriteString("avatar=")
	builder.WriteString(a.Avatar)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(a.Password)
	builder.WriteString(", ")
	builder.WriteString("disable=")
	builder.WriteString(fmt.Sprintf("%v", a.Disable))
	builder.WriteString(", ")
	builder.WriteString("pwd_error_num=")
	builder.WriteString(fmt.Sprintf("%v", a.PwdErrorNum))
	builder.WriteString(", ")
	builder.WriteString("pwd_error_expire_time=")
	builder.WriteString(fmt.Sprintf("%v", a.PwdErrorExpireTime))
	builder.WriteString(", ")
	builder.WriteString("phone_token=")
	builder.WriteString(a.PhoneToken)
	builder.WriteString(", ")
	builder.WriteString("facebook=")
	builder.WriteString(a.Facebook)
	builder.WriteString(", ")
	builder.WriteString("line=")
	builder.WriteString(a.Line)
	builder.WriteString(", ")
	builder.WriteString("weibo=")
	builder.WriteString(a.Weibo)
	builder.WriteString(", ")
	builder.WriteString("google=")
	builder.WriteString(a.Google)
	builder.WriteString(", ")
	builder.WriteString("instagram=")
	builder.WriteString(a.Instagram)
	builder.WriteString(", ")
	builder.WriteString("linkedin=")
	builder.WriteString(a.Linkedin)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(a.Language)
	builder.WriteString(", ")
	builder.WriteString("phone=")
	builder.WriteString(a.Phone)
	builder.WriteString(", ")
	builder.WriteString("country_code=")
	builder.WriteString(fmt.Sprintf("%v", a.CountryCode))
	builder.WriteString(", ")
	builder.WriteString("qrcode=")
	builder.WriteString(a.Qrcode)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", a.Gender))
	builder.WriteString(", ")
	builder.WriteString("birth_date=")
	builder.WriteString(a.BirthDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("self_introduction=")
	builder.WriteString(a.SelfIntroduction)
	builder.WriteString(", ")
	builder.WriteString("cover=")
	builder.WriteString(a.Cover)
	builder.WriteString(", ")
	builder.WriteString("photo=")
	builder.WriteString(a.Photo)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(fmt.Sprintf("%v", a.Platform))
	builder.WriteString(", ")
	builder.WriteString("last_login_time=")
	builder.WriteString(a.LastLoginTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("credit=")
	builder.WriteString(fmt.Sprintf("%v", a.Credit))
	builder.WriteString(", ")
	builder.WriteString("heat_num=")
	builder.WriteString(fmt.Sprintf("%v", a.HeatNum))
	builder.WriteString(", ")
	builder.WriteString("designer_id=")
	builder.WriteString(fmt.Sprintf("%v", a.DesignerID))
	builder.WriteString(", ")
	builder.WriteString("identity=")
	builder.WriteString(fmt.Sprintf("%v", a.Identity))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", a.Level))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(a.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("chain_wallet_id=")
	builder.WriteString(a.ChainWalletID)
	builder.WriteString(", ")
	builder.WriteString("discord_aid=")
	builder.WriteString(fmt.Sprintf("%v", a.DiscordAid))
	builder.WriteString(", ")
	builder.WriteString("ticket_balance=")
	builder.WriteString(fmt.Sprintf("%v", a.TicketBalance))
	builder.WriteString(", ")
	builder.WriteString("ohdat_ticket_balance=")
	builder.WriteString(fmt.Sprintf("%v", a.OhdatTicketBalance))
	builder.WriteString(", ")
	builder.WriteString("space_expedition_chance=")
	builder.WriteString(fmt.Sprintf("%v", a.SpaceExpeditionChance))
	builder.WriteString(", ")
	builder.WriteString("bamb_locked_balance=")
	builder.WriteString(fmt.Sprintf("%v", a.BambLockedBalance))
	builder.WriteString(", ")
	builder.WriteString("bamb_claimable_balance=")
	builder.WriteString(fmt.Sprintf("%v", a.BambClaimableBalance))
	builder.WriteString(", ")
	builder.WriteString("bamb_staking=")
	builder.WriteString(fmt.Sprintf("%v", a.BambStaking))
	builder.WriteString(", ")
	builder.WriteString("bamblp_staking=")
	builder.WriteString(fmt.Sprintf("%v", a.BamblpStaking))
	builder.WriteString(", ")
	builder.WriteString("bamblp_collect=")
	builder.WriteString(fmt.Sprintf("%v", a.BamblpCollect))
	builder.WriteString(", ")
	builder.WriteString("chip_balance=")
	builder.WriteString(fmt.Sprintf("%v", a.ChipBalance))
	builder.WriteString(", ")
	builder.WriteString("bamboo_shoot_balance=")
	builder.WriteString(fmt.Sprintf("%v", a.BambooShootBalance))
	builder.WriteString(", ")
	builder.WriteString("panda_airdrop_count=")
	builder.WriteString(fmt.Sprintf("%v", a.PandaAirdropCount))
	builder.WriteString(", ")
	builder.WriteString("first_login=")
	builder.WriteString(fmt.Sprintf("%v", a.FirstLogin))
	builder.WriteString(", ")
	builder.WriteString("passed_space_expedition_count=")
	builder.WriteString(fmt.Sprintf("%v", a.PassedSpaceExpeditionCount))
	builder.WriteString(", ")
	builder.WriteString("passed_space_expedition_reward=")
	builder.WriteString(fmt.Sprintf("%v", a.PassedSpaceExpeditionReward))
	builder.WriteString(", ")
	builder.WriteString("reserved=")
	builder.WriteString(a.Reserved)
	builder.WriteString(", ")
	builder.WriteString("centralized_beer_caps_balance=")
	builder.WriteString(fmt.Sprintf("%v", a.CentralizedBeerCapsBalance))
	builder.WriteByte(')')
	return builder.String()
}

// Accounts is a parsable slice of Account.
type Accounts []*Account

func (a Accounts) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
