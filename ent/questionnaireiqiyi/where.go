// Code generated by ent, DO NOT EDIT.

package questionnaireiqiyi

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ohdat/entmod/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// WalletAddress applies equality check predicate on the "wallet_address" field. It's identical to WalletAddressEQ.
func WalletAddress(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletAddress), v))
	})
}

// TwitterURL applies equality check predicate on the "twitter_url" field. It's identical to TwitterURLEQ.
func TwitterURL(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTwitterURL), v))
	})
}

// InviteCode applies equality check predicate on the "invite_code" field. It's identical to InviteCodeEQ.
func InviteCode(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInviteCode), v))
	})
}

// Q1 applies equality check predicate on the "q1" field. It's identical to Q1EQ.
func Q1(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQ1), v))
	})
}

// Q2 applies equality check predicate on the "q2" field. It's identical to Q2EQ.
func Q2(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQ2), v))
	})
}

// Q3 applies equality check predicate on the "q3" field. It's identical to Q3EQ.
func Q3(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQ3), v))
	})
}

// Q4 applies equality check predicate on the "q4" field. It's identical to Q4EQ.
func Q4(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQ4), v))
	})
}

// Q5 applies equality check predicate on the "q5" field. It's identical to Q5EQ.
func Q5(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQ5), v))
	})
}

// Q6 applies equality check predicate on the "q6" field. It's identical to Q6EQ.
func Q6(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQ6), v))
	})
}

// Q7 applies equality check predicate on the "q7" field. It's identical to Q7EQ.
func Q7(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQ7), v))
	})
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// TransactionCount applies equality check predicate on the "transaction_count" field. It's identical to TransactionCountEQ.
func TransactionCount(v int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionCount), v))
	})
}

// Answer applies equality check predicate on the "answer" field. It's identical to AnswerEQ.
func Answer(v int8) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnswer), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// WalletAddressEQ applies the EQ predicate on the "wallet_address" field.
func WalletAddressEQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWalletAddress), v))
	})
}

// WalletAddressNEQ applies the NEQ predicate on the "wallet_address" field.
func WalletAddressNEQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWalletAddress), v))
	})
}

// WalletAddressIn applies the In predicate on the "wallet_address" field.
func WalletAddressIn(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWalletAddress), v...))
	})
}

// WalletAddressNotIn applies the NotIn predicate on the "wallet_address" field.
func WalletAddressNotIn(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWalletAddress), v...))
	})
}

// WalletAddressGT applies the GT predicate on the "wallet_address" field.
func WalletAddressGT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWalletAddress), v))
	})
}

// WalletAddressGTE applies the GTE predicate on the "wallet_address" field.
func WalletAddressGTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWalletAddress), v))
	})
}

// WalletAddressLT applies the LT predicate on the "wallet_address" field.
func WalletAddressLT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWalletAddress), v))
	})
}

// WalletAddressLTE applies the LTE predicate on the "wallet_address" field.
func WalletAddressLTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWalletAddress), v))
	})
}

// WalletAddressContains applies the Contains predicate on the "wallet_address" field.
func WalletAddressContains(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWalletAddress), v))
	})
}

// WalletAddressHasPrefix applies the HasPrefix predicate on the "wallet_address" field.
func WalletAddressHasPrefix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWalletAddress), v))
	})
}

// WalletAddressHasSuffix applies the HasSuffix predicate on the "wallet_address" field.
func WalletAddressHasSuffix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWalletAddress), v))
	})
}

// WalletAddressEqualFold applies the EqualFold predicate on the "wallet_address" field.
func WalletAddressEqualFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWalletAddress), v))
	})
}

// WalletAddressContainsFold applies the ContainsFold predicate on the "wallet_address" field.
func WalletAddressContainsFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWalletAddress), v))
	})
}

// TwitterURLEQ applies the EQ predicate on the "twitter_url" field.
func TwitterURLEQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLNEQ applies the NEQ predicate on the "twitter_url" field.
func TwitterURLNEQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLIn applies the In predicate on the "twitter_url" field.
func TwitterURLIn(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTwitterURL), v...))
	})
}

// TwitterURLNotIn applies the NotIn predicate on the "twitter_url" field.
func TwitterURLNotIn(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTwitterURL), v...))
	})
}

// TwitterURLGT applies the GT predicate on the "twitter_url" field.
func TwitterURLGT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLGTE applies the GTE predicate on the "twitter_url" field.
func TwitterURLGTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLLT applies the LT predicate on the "twitter_url" field.
func TwitterURLLT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLLTE applies the LTE predicate on the "twitter_url" field.
func TwitterURLLTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLContains applies the Contains predicate on the "twitter_url" field.
func TwitterURLContains(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLHasPrefix applies the HasPrefix predicate on the "twitter_url" field.
func TwitterURLHasPrefix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLHasSuffix applies the HasSuffix predicate on the "twitter_url" field.
func TwitterURLHasSuffix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLEqualFold applies the EqualFold predicate on the "twitter_url" field.
func TwitterURLEqualFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTwitterURL), v))
	})
}

// TwitterURLContainsFold applies the ContainsFold predicate on the "twitter_url" field.
func TwitterURLContainsFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTwitterURL), v))
	})
}

// InviteCodeEQ applies the EQ predicate on the "invite_code" field.
func InviteCodeEQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInviteCode), v))
	})
}

// InviteCodeNEQ applies the NEQ predicate on the "invite_code" field.
func InviteCodeNEQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInviteCode), v))
	})
}

// InviteCodeIn applies the In predicate on the "invite_code" field.
func InviteCodeIn(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInviteCode), v...))
	})
}

// InviteCodeNotIn applies the NotIn predicate on the "invite_code" field.
func InviteCodeNotIn(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInviteCode), v...))
	})
}

// InviteCodeGT applies the GT predicate on the "invite_code" field.
func InviteCodeGT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInviteCode), v))
	})
}

// InviteCodeGTE applies the GTE predicate on the "invite_code" field.
func InviteCodeGTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInviteCode), v))
	})
}

// InviteCodeLT applies the LT predicate on the "invite_code" field.
func InviteCodeLT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInviteCode), v))
	})
}

// InviteCodeLTE applies the LTE predicate on the "invite_code" field.
func InviteCodeLTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInviteCode), v))
	})
}

// InviteCodeContains applies the Contains predicate on the "invite_code" field.
func InviteCodeContains(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInviteCode), v))
	})
}

// InviteCodeHasPrefix applies the HasPrefix predicate on the "invite_code" field.
func InviteCodeHasPrefix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInviteCode), v))
	})
}

// InviteCodeHasSuffix applies the HasSuffix predicate on the "invite_code" field.
func InviteCodeHasSuffix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInviteCode), v))
	})
}

// InviteCodeEqualFold applies the EqualFold predicate on the "invite_code" field.
func InviteCodeEqualFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInviteCode), v))
	})
}

// InviteCodeContainsFold applies the ContainsFold predicate on the "invite_code" field.
func InviteCodeContainsFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInviteCode), v))
	})
}

// Q1EQ applies the EQ predicate on the "q1" field.
func Q1EQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQ1), v))
	})
}

// Q1NEQ applies the NEQ predicate on the "q1" field.
func Q1NEQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQ1), v))
	})
}

// Q1In applies the In predicate on the "q1" field.
func Q1In(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQ1), v...))
	})
}

// Q1NotIn applies the NotIn predicate on the "q1" field.
func Q1NotIn(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQ1), v...))
	})
}

// Q1GT applies the GT predicate on the "q1" field.
func Q1GT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQ1), v))
	})
}

// Q1GTE applies the GTE predicate on the "q1" field.
func Q1GTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQ1), v))
	})
}

// Q1LT applies the LT predicate on the "q1" field.
func Q1LT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQ1), v))
	})
}

// Q1LTE applies the LTE predicate on the "q1" field.
func Q1LTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQ1), v))
	})
}

// Q1Contains applies the Contains predicate on the "q1" field.
func Q1Contains(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldQ1), v))
	})
}

// Q1HasPrefix applies the HasPrefix predicate on the "q1" field.
func Q1HasPrefix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldQ1), v))
	})
}

// Q1HasSuffix applies the HasSuffix predicate on the "q1" field.
func Q1HasSuffix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldQ1), v))
	})
}

// Q1EqualFold applies the EqualFold predicate on the "q1" field.
func Q1EqualFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldQ1), v))
	})
}

// Q1ContainsFold applies the ContainsFold predicate on the "q1" field.
func Q1ContainsFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldQ1), v))
	})
}

// Q2EQ applies the EQ predicate on the "q2" field.
func Q2EQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQ2), v))
	})
}

// Q2NEQ applies the NEQ predicate on the "q2" field.
func Q2NEQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQ2), v))
	})
}

// Q2In applies the In predicate on the "q2" field.
func Q2In(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQ2), v...))
	})
}

// Q2NotIn applies the NotIn predicate on the "q2" field.
func Q2NotIn(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQ2), v...))
	})
}

// Q2GT applies the GT predicate on the "q2" field.
func Q2GT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQ2), v))
	})
}

// Q2GTE applies the GTE predicate on the "q2" field.
func Q2GTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQ2), v))
	})
}

// Q2LT applies the LT predicate on the "q2" field.
func Q2LT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQ2), v))
	})
}

// Q2LTE applies the LTE predicate on the "q2" field.
func Q2LTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQ2), v))
	})
}

// Q2Contains applies the Contains predicate on the "q2" field.
func Q2Contains(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldQ2), v))
	})
}

// Q2HasPrefix applies the HasPrefix predicate on the "q2" field.
func Q2HasPrefix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldQ2), v))
	})
}

// Q2HasSuffix applies the HasSuffix predicate on the "q2" field.
func Q2HasSuffix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldQ2), v))
	})
}

// Q2EqualFold applies the EqualFold predicate on the "q2" field.
func Q2EqualFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldQ2), v))
	})
}

// Q2ContainsFold applies the ContainsFold predicate on the "q2" field.
func Q2ContainsFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldQ2), v))
	})
}

// Q3EQ applies the EQ predicate on the "q3" field.
func Q3EQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQ3), v))
	})
}

// Q3NEQ applies the NEQ predicate on the "q3" field.
func Q3NEQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQ3), v))
	})
}

// Q3In applies the In predicate on the "q3" field.
func Q3In(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQ3), v...))
	})
}

// Q3NotIn applies the NotIn predicate on the "q3" field.
func Q3NotIn(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQ3), v...))
	})
}

// Q3GT applies the GT predicate on the "q3" field.
func Q3GT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQ3), v))
	})
}

// Q3GTE applies the GTE predicate on the "q3" field.
func Q3GTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQ3), v))
	})
}

// Q3LT applies the LT predicate on the "q3" field.
func Q3LT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQ3), v))
	})
}

// Q3LTE applies the LTE predicate on the "q3" field.
func Q3LTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQ3), v))
	})
}

// Q3Contains applies the Contains predicate on the "q3" field.
func Q3Contains(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldQ3), v))
	})
}

// Q3HasPrefix applies the HasPrefix predicate on the "q3" field.
func Q3HasPrefix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldQ3), v))
	})
}

// Q3HasSuffix applies the HasSuffix predicate on the "q3" field.
func Q3HasSuffix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldQ3), v))
	})
}

// Q3EqualFold applies the EqualFold predicate on the "q3" field.
func Q3EqualFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldQ3), v))
	})
}

// Q3ContainsFold applies the ContainsFold predicate on the "q3" field.
func Q3ContainsFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldQ3), v))
	})
}

// Q4EQ applies the EQ predicate on the "q4" field.
func Q4EQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQ4), v))
	})
}

// Q4NEQ applies the NEQ predicate on the "q4" field.
func Q4NEQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQ4), v))
	})
}

// Q4In applies the In predicate on the "q4" field.
func Q4In(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQ4), v...))
	})
}

// Q4NotIn applies the NotIn predicate on the "q4" field.
func Q4NotIn(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQ4), v...))
	})
}

// Q4GT applies the GT predicate on the "q4" field.
func Q4GT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQ4), v))
	})
}

// Q4GTE applies the GTE predicate on the "q4" field.
func Q4GTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQ4), v))
	})
}

// Q4LT applies the LT predicate on the "q4" field.
func Q4LT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQ4), v))
	})
}

// Q4LTE applies the LTE predicate on the "q4" field.
func Q4LTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQ4), v))
	})
}

// Q4Contains applies the Contains predicate on the "q4" field.
func Q4Contains(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldQ4), v))
	})
}

// Q4HasPrefix applies the HasPrefix predicate on the "q4" field.
func Q4HasPrefix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldQ4), v))
	})
}

// Q4HasSuffix applies the HasSuffix predicate on the "q4" field.
func Q4HasSuffix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldQ4), v))
	})
}

// Q4EqualFold applies the EqualFold predicate on the "q4" field.
func Q4EqualFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldQ4), v))
	})
}

// Q4ContainsFold applies the ContainsFold predicate on the "q4" field.
func Q4ContainsFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldQ4), v))
	})
}

// Q5EQ applies the EQ predicate on the "q5" field.
func Q5EQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQ5), v))
	})
}

// Q5NEQ applies the NEQ predicate on the "q5" field.
func Q5NEQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQ5), v))
	})
}

// Q5In applies the In predicate on the "q5" field.
func Q5In(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQ5), v...))
	})
}

// Q5NotIn applies the NotIn predicate on the "q5" field.
func Q5NotIn(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQ5), v...))
	})
}

// Q5GT applies the GT predicate on the "q5" field.
func Q5GT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQ5), v))
	})
}

// Q5GTE applies the GTE predicate on the "q5" field.
func Q5GTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQ5), v))
	})
}

// Q5LT applies the LT predicate on the "q5" field.
func Q5LT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQ5), v))
	})
}

// Q5LTE applies the LTE predicate on the "q5" field.
func Q5LTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQ5), v))
	})
}

// Q5Contains applies the Contains predicate on the "q5" field.
func Q5Contains(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldQ5), v))
	})
}

// Q5HasPrefix applies the HasPrefix predicate on the "q5" field.
func Q5HasPrefix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldQ5), v))
	})
}

// Q5HasSuffix applies the HasSuffix predicate on the "q5" field.
func Q5HasSuffix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldQ5), v))
	})
}

// Q5EqualFold applies the EqualFold predicate on the "q5" field.
func Q5EqualFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldQ5), v))
	})
}

// Q5ContainsFold applies the ContainsFold predicate on the "q5" field.
func Q5ContainsFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldQ5), v))
	})
}

// Q6EQ applies the EQ predicate on the "q6" field.
func Q6EQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQ6), v))
	})
}

// Q6NEQ applies the NEQ predicate on the "q6" field.
func Q6NEQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQ6), v))
	})
}

// Q6In applies the In predicate on the "q6" field.
func Q6In(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQ6), v...))
	})
}

// Q6NotIn applies the NotIn predicate on the "q6" field.
func Q6NotIn(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQ6), v...))
	})
}

// Q6GT applies the GT predicate on the "q6" field.
func Q6GT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQ6), v))
	})
}

// Q6GTE applies the GTE predicate on the "q6" field.
func Q6GTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQ6), v))
	})
}

// Q6LT applies the LT predicate on the "q6" field.
func Q6LT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQ6), v))
	})
}

// Q6LTE applies the LTE predicate on the "q6" field.
func Q6LTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQ6), v))
	})
}

// Q6Contains applies the Contains predicate on the "q6" field.
func Q6Contains(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldQ6), v))
	})
}

// Q6HasPrefix applies the HasPrefix predicate on the "q6" field.
func Q6HasPrefix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldQ6), v))
	})
}

// Q6HasSuffix applies the HasSuffix predicate on the "q6" field.
func Q6HasSuffix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldQ6), v))
	})
}

// Q6EqualFold applies the EqualFold predicate on the "q6" field.
func Q6EqualFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldQ6), v))
	})
}

// Q6ContainsFold applies the ContainsFold predicate on the "q6" field.
func Q6ContainsFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldQ6), v))
	})
}

// Q7EQ applies the EQ predicate on the "q7" field.
func Q7EQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQ7), v))
	})
}

// Q7NEQ applies the NEQ predicate on the "q7" field.
func Q7NEQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQ7), v))
	})
}

// Q7In applies the In predicate on the "q7" field.
func Q7In(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQ7), v...))
	})
}

// Q7NotIn applies the NotIn predicate on the "q7" field.
func Q7NotIn(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQ7), v...))
	})
}

// Q7GT applies the GT predicate on the "q7" field.
func Q7GT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQ7), v))
	})
}

// Q7GTE applies the GTE predicate on the "q7" field.
func Q7GTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQ7), v))
	})
}

// Q7LT applies the LT predicate on the "q7" field.
func Q7LT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQ7), v))
	})
}

// Q7LTE applies the LTE predicate on the "q7" field.
func Q7LTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQ7), v))
	})
}

// Q7Contains applies the Contains predicate on the "q7" field.
func Q7Contains(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldQ7), v))
	})
}

// Q7HasPrefix applies the HasPrefix predicate on the "q7" field.
func Q7HasPrefix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldQ7), v))
	})
}

// Q7HasSuffix applies the HasSuffix predicate on the "q7" field.
func Q7HasSuffix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldQ7), v))
	})
}

// Q7EqualFold applies the EqualFold predicate on the "q7" field.
func Q7EqualFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldQ7), v))
	})
}

// Q7ContainsFold applies the ContainsFold predicate on the "q7" field.
func Q7ContainsFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldQ7), v))
	})
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBalance), v))
	})
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBalance), v))
	})
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBalance), v...))
	})
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...string) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBalance), v...))
	})
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBalance), v))
	})
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBalance), v))
	})
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBalance), v))
	})
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBalance), v))
	})
}

// BalanceContains applies the Contains predicate on the "balance" field.
func BalanceContains(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBalance), v))
	})
}

// BalanceHasPrefix applies the HasPrefix predicate on the "balance" field.
func BalanceHasPrefix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBalance), v))
	})
}

// BalanceHasSuffix applies the HasSuffix predicate on the "balance" field.
func BalanceHasSuffix(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBalance), v))
	})
}

// BalanceIsNil applies the IsNil predicate on the "balance" field.
func BalanceIsNil() predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBalance)))
	})
}

// BalanceNotNil applies the NotNil predicate on the "balance" field.
func BalanceNotNil() predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBalance)))
	})
}

// BalanceEqualFold applies the EqualFold predicate on the "balance" field.
func BalanceEqualFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBalance), v))
	})
}

// BalanceContainsFold applies the ContainsFold predicate on the "balance" field.
func BalanceContainsFold(v string) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBalance), v))
	})
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	})
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	})
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int32) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAmount), v...))
	})
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int32) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	})
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	})
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	})
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	})
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	})
}

// AmountIsNil applies the IsNil predicate on the "amount" field.
func AmountIsNil() predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAmount)))
	})
}

// AmountNotNil applies the NotNil predicate on the "amount" field.
func AmountNotNil() predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAmount)))
	})
}

// TransactionCountEQ applies the EQ predicate on the "transaction_count" field.
func TransactionCountEQ(v int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTransactionCount), v))
	})
}

// TransactionCountNEQ applies the NEQ predicate on the "transaction_count" field.
func TransactionCountNEQ(v int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTransactionCount), v))
	})
}

// TransactionCountIn applies the In predicate on the "transaction_count" field.
func TransactionCountIn(vs ...int32) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTransactionCount), v...))
	})
}

// TransactionCountNotIn applies the NotIn predicate on the "transaction_count" field.
func TransactionCountNotIn(vs ...int32) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTransactionCount), v...))
	})
}

// TransactionCountGT applies the GT predicate on the "transaction_count" field.
func TransactionCountGT(v int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTransactionCount), v))
	})
}

// TransactionCountGTE applies the GTE predicate on the "transaction_count" field.
func TransactionCountGTE(v int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTransactionCount), v))
	})
}

// TransactionCountLT applies the LT predicate on the "transaction_count" field.
func TransactionCountLT(v int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTransactionCount), v))
	})
}

// TransactionCountLTE applies the LTE predicate on the "transaction_count" field.
func TransactionCountLTE(v int32) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTransactionCount), v))
	})
}

// TransactionCountIsNil applies the IsNil predicate on the "transaction_count" field.
func TransactionCountIsNil() predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTransactionCount)))
	})
}

// TransactionCountNotNil applies the NotNil predicate on the "transaction_count" field.
func TransactionCountNotNil() predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTransactionCount)))
	})
}

// AnswerEQ applies the EQ predicate on the "answer" field.
func AnswerEQ(v int8) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnswer), v))
	})
}

// AnswerNEQ applies the NEQ predicate on the "answer" field.
func AnswerNEQ(v int8) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnswer), v))
	})
}

// AnswerIn applies the In predicate on the "answer" field.
func AnswerIn(vs ...int8) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAnswer), v...))
	})
}

// AnswerNotIn applies the NotIn predicate on the "answer" field.
func AnswerNotIn(vs ...int8) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAnswer), v...))
	})
}

// AnswerGT applies the GT predicate on the "answer" field.
func AnswerGT(v int8) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnswer), v))
	})
}

// AnswerGTE applies the GTE predicate on the "answer" field.
func AnswerGTE(v int8) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnswer), v))
	})
}

// AnswerLT applies the LT predicate on the "answer" field.
func AnswerLT(v int8) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnswer), v))
	})
}

// AnswerLTE applies the LTE predicate on the "answer" field.
func AnswerLTE(v int8) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnswer), v))
	})
}

// AnswerIsNil applies the IsNil predicate on the "answer" field.
func AnswerIsNil() predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAnswer)))
	})
}

// AnswerNotNil applies the NotNil predicate on the "answer" field.
func AnswerNotNil() predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAnswer)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.QuestionnaireIqiyi {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.QuestionnaireIqiyi) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.QuestionnaireIqiyi) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QuestionnaireIqiyi) predicate.QuestionnaireIqiyi {
	return predicate.QuestionnaireIqiyi(func(s *sql.Selector) {
		p(s.Not())
	})
}
