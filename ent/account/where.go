// Code generated by ent, DO NOT EDIT.

package account

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/ohdat/entmod/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Audit applies equality check predicate on the "audit" field. It's identical to AuditEQ.
func Audit(v uint8) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAudit), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickname), v))
	})
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatar), v))
	})
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// Disable applies equality check predicate on the "disable" field. It's identical to DisableEQ.
func Disable(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisable), v))
	})
}

// PwdErrorNum applies equality check predicate on the "pwd_error_num" field. It's identical to PwdErrorNumEQ.
func PwdErrorNum(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPwdErrorNum), v))
	})
}

// PwdErrorExpireTime applies equality check predicate on the "pwd_error_expire_time" field. It's identical to PwdErrorExpireTimeEQ.
func PwdErrorExpireTime(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPwdErrorExpireTime), v))
	})
}

// PhoneToken applies equality check predicate on the "phone_token" field. It's identical to PhoneTokenEQ.
func PhoneToken(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneToken), v))
	})
}

// Facebook applies equality check predicate on the "facebook" field. It's identical to FacebookEQ.
func Facebook(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacebook), v))
	})
}

// Line applies equality check predicate on the "line" field. It's identical to LineEQ.
func Line(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLine), v))
	})
}

// Weibo applies equality check predicate on the "weibo" field. It's identical to WeiboEQ.
func Weibo(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeibo), v))
	})
}

// Google applies equality check predicate on the "google" field. It's identical to GoogleEQ.
func Google(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoogle), v))
	})
}

// Instagram applies equality check predicate on the "instagram" field. It's identical to InstagramEQ.
func Instagram(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstagram), v))
	})
}

// Linkedin applies equality check predicate on the "linkedin" field. It's identical to LinkedinEQ.
func Linkedin(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLinkedin), v))
	})
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// CountryCode applies equality check predicate on the "country_code" field. It's identical to CountryCodeEQ.
func CountryCode(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountryCode), v))
	})
}

// Qrcode applies equality check predicate on the "qrcode" field. It's identical to QrcodeEQ.
func Qrcode(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQrcode), v))
	})
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// BirthDate applies equality check predicate on the "birth_date" field. It's identical to BirthDateEQ.
func BirthDate(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthDate), v))
	})
}

// SelfIntroduction applies equality check predicate on the "self_introduction" field. It's identical to SelfIntroductionEQ.
func SelfIntroduction(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfIntroduction), v))
	})
}

// Cover applies equality check predicate on the "cover" field. It's identical to CoverEQ.
func Cover(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCover), v))
	})
}

// Photo applies equality check predicate on the "photo" field. It's identical to PhotoEQ.
func Photo(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoto), v))
	})
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// LastLoginTime applies equality check predicate on the "last_login_time" field. It's identical to LastLoginTimeEQ.
func LastLoginTime(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastLoginTime), v))
	})
}

// Credit applies equality check predicate on the "credit" field. It's identical to CreditEQ.
func Credit(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCredit), v))
	})
}

// HeatNum applies equality check predicate on the "heat_num" field. It's identical to HeatNumEQ.
func HeatNum(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeatNum), v))
	})
}

// DesignerID applies equality check predicate on the "designer_id" field. It's identical to DesignerIDEQ.
func DesignerID(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesignerID), v))
	})
}

// Identity applies equality check predicate on the "identity" field. It's identical to IdentityEQ.
func Identity(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdentity), v))
	})
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// ChainWalletID applies equality check predicate on the "chain_wallet_id" field. It's identical to ChainWalletIDEQ.
func ChainWalletID(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainWalletID), v))
	})
}

// DiscordAid applies equality check predicate on the "discord_aid" field. It's identical to DiscordAidEQ.
func DiscordAid(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordAid), v))
	})
}

// TicketBalance applies equality check predicate on the "ticket_balance" field. It's identical to TicketBalanceEQ.
func TicketBalance(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTicketBalance), v))
	})
}

// OhdatTicketBalance applies equality check predicate on the "ohdat_ticket_balance" field. It's identical to OhdatTicketBalanceEQ.
func OhdatTicketBalance(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOhdatTicketBalance), v))
	})
}

// SpaceExpeditionChance applies equality check predicate on the "space_expedition_chance" field. It's identical to SpaceExpeditionChanceEQ.
func SpaceExpeditionChance(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpaceExpeditionChance), v))
	})
}

// BambLockedBalance applies equality check predicate on the "bamb_locked_balance" field. It's identical to BambLockedBalanceEQ.
func BambLockedBalance(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBambLockedBalance), v))
	})
}

// BambClaimableBalance applies equality check predicate on the "bamb_claimable_balance" field. It's identical to BambClaimableBalanceEQ.
func BambClaimableBalance(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBambClaimableBalance), v))
	})
}

// BambStaking applies equality check predicate on the "bamb_staking" field. It's identical to BambStakingEQ.
func BambStaking(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBambStaking), v))
	})
}

// BamblpStaking applies equality check predicate on the "bamblp_staking" field. It's identical to BamblpStakingEQ.
func BamblpStaking(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBamblpStaking), v))
	})
}

// BamblpCollect applies equality check predicate on the "bamblp_collect" field. It's identical to BamblpCollectEQ.
func BamblpCollect(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBamblpCollect), v))
	})
}

// ChipBalance applies equality check predicate on the "chip_balance" field. It's identical to ChipBalanceEQ.
func ChipBalance(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChipBalance), v))
	})
}

// BambooShootBalance applies equality check predicate on the "bamboo_shoot_balance" field. It's identical to BambooShootBalanceEQ.
func BambooShootBalance(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBambooShootBalance), v))
	})
}

// PandaAirdropCount applies equality check predicate on the "panda_airdrop_count" field. It's identical to PandaAirdropCountEQ.
func PandaAirdropCount(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPandaAirdropCount), v))
	})
}

// FirstLogin applies equality check predicate on the "first_login" field. It's identical to FirstLoginEQ.
func FirstLogin(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstLogin), v))
	})
}

// PassedSpaceExpeditionCount applies equality check predicate on the "passed_space_expedition_count" field. It's identical to PassedSpaceExpeditionCountEQ.
func PassedSpaceExpeditionCount(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassedSpaceExpeditionCount), v))
	})
}

// PassedSpaceExpeditionReward applies equality check predicate on the "passed_space_expedition_reward" field. It's identical to PassedSpaceExpeditionRewardEQ.
func PassedSpaceExpeditionReward(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassedSpaceExpeditionReward), v))
	})
}

// Reserved applies equality check predicate on the "reserved" field. It's identical to ReservedEQ.
func Reserved(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserved), v))
	})
}

// CentralizedBeerCapsBalance applies equality check predicate on the "centralized_beer_caps_balance" field. It's identical to CentralizedBeerCapsBalanceEQ.
func CentralizedBeerCapsBalance(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCentralizedBeerCapsBalance), v))
	})
}

// AuditEQ applies the EQ predicate on the "audit" field.
func AuditEQ(v uint8) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAudit), v))
	})
}

// AuditNEQ applies the NEQ predicate on the "audit" field.
func AuditNEQ(v uint8) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAudit), v))
	})
}

// AuditIn applies the In predicate on the "audit" field.
func AuditIn(vs ...uint8) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAudit), v...))
	})
}

// AuditNotIn applies the NotIn predicate on the "audit" field.
func AuditNotIn(vs ...uint8) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAudit), v...))
	})
}

// AuditGT applies the GT predicate on the "audit" field.
func AuditGT(v uint8) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAudit), v))
	})
}

// AuditGTE applies the GTE predicate on the "audit" field.
func AuditGTE(v uint8) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAudit), v))
	})
}

// AuditLT applies the LT predicate on the "audit" field.
func AuditLT(v uint8) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAudit), v))
	})
}

// AuditLTE applies the LTE predicate on the "audit" field.
func AuditLTE(v uint8) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAudit), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNickname), v))
	})
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNickname), v))
	})
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNickname), v...))
	})
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNickname), v...))
	})
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNickname), v))
	})
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNickname), v))
	})
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNickname), v))
	})
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNickname), v))
	})
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNickname), v))
	})
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNickname), v))
	})
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNickname), v))
	})
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNickname), v))
	})
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNickname), v))
	})
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatar), v))
	})
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvatar), v))
	})
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAvatar), v...))
	})
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAvatar), v...))
	})
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvatar), v))
	})
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvatar), v))
	})
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvatar), v))
	})
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvatar), v))
	})
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAvatar), v))
	})
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAvatar), v))
	})
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAvatar), v))
	})
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAvatar), v))
	})
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAvatar), v))
	})
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	})
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassword), v))
	})
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPassword), v...))
	})
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPassword), v...))
	})
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassword), v))
	})
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassword), v))
	})
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassword), v))
	})
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassword), v))
	})
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassword), v))
	})
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassword), v))
	})
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassword), v))
	})
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassword), v))
	})
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassword), v))
	})
}

// DisableEQ applies the EQ predicate on the "disable" field.
func DisableEQ(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisable), v))
	})
}

// DisableNEQ applies the NEQ predicate on the "disable" field.
func DisableNEQ(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisable), v))
	})
}

// PwdErrorNumEQ applies the EQ predicate on the "pwd_error_num" field.
func PwdErrorNumEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPwdErrorNum), v))
	})
}

// PwdErrorNumNEQ applies the NEQ predicate on the "pwd_error_num" field.
func PwdErrorNumNEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPwdErrorNum), v))
	})
}

// PwdErrorNumIn applies the In predicate on the "pwd_error_num" field.
func PwdErrorNumIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPwdErrorNum), v...))
	})
}

// PwdErrorNumNotIn applies the NotIn predicate on the "pwd_error_num" field.
func PwdErrorNumNotIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPwdErrorNum), v...))
	})
}

// PwdErrorNumGT applies the GT predicate on the "pwd_error_num" field.
func PwdErrorNumGT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPwdErrorNum), v))
	})
}

// PwdErrorNumGTE applies the GTE predicate on the "pwd_error_num" field.
func PwdErrorNumGTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPwdErrorNum), v))
	})
}

// PwdErrorNumLT applies the LT predicate on the "pwd_error_num" field.
func PwdErrorNumLT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPwdErrorNum), v))
	})
}

// PwdErrorNumLTE applies the LTE predicate on the "pwd_error_num" field.
func PwdErrorNumLTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPwdErrorNum), v))
	})
}

// PwdErrorExpireTimeEQ applies the EQ predicate on the "pwd_error_expire_time" field.
func PwdErrorExpireTimeEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPwdErrorExpireTime), v))
	})
}

// PwdErrorExpireTimeNEQ applies the NEQ predicate on the "pwd_error_expire_time" field.
func PwdErrorExpireTimeNEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPwdErrorExpireTime), v))
	})
}

// PwdErrorExpireTimeIn applies the In predicate on the "pwd_error_expire_time" field.
func PwdErrorExpireTimeIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPwdErrorExpireTime), v...))
	})
}

// PwdErrorExpireTimeNotIn applies the NotIn predicate on the "pwd_error_expire_time" field.
func PwdErrorExpireTimeNotIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPwdErrorExpireTime), v...))
	})
}

// PwdErrorExpireTimeGT applies the GT predicate on the "pwd_error_expire_time" field.
func PwdErrorExpireTimeGT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPwdErrorExpireTime), v))
	})
}

// PwdErrorExpireTimeGTE applies the GTE predicate on the "pwd_error_expire_time" field.
func PwdErrorExpireTimeGTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPwdErrorExpireTime), v))
	})
}

// PwdErrorExpireTimeLT applies the LT predicate on the "pwd_error_expire_time" field.
func PwdErrorExpireTimeLT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPwdErrorExpireTime), v))
	})
}

// PwdErrorExpireTimeLTE applies the LTE predicate on the "pwd_error_expire_time" field.
func PwdErrorExpireTimeLTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPwdErrorExpireTime), v))
	})
}

// PhoneTokenEQ applies the EQ predicate on the "phone_token" field.
func PhoneTokenEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoneToken), v))
	})
}

// PhoneTokenNEQ applies the NEQ predicate on the "phone_token" field.
func PhoneTokenNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhoneToken), v))
	})
}

// PhoneTokenIn applies the In predicate on the "phone_token" field.
func PhoneTokenIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPhoneToken), v...))
	})
}

// PhoneTokenNotIn applies the NotIn predicate on the "phone_token" field.
func PhoneTokenNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPhoneToken), v...))
	})
}

// PhoneTokenGT applies the GT predicate on the "phone_token" field.
func PhoneTokenGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhoneToken), v))
	})
}

// PhoneTokenGTE applies the GTE predicate on the "phone_token" field.
func PhoneTokenGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhoneToken), v))
	})
}

// PhoneTokenLT applies the LT predicate on the "phone_token" field.
func PhoneTokenLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhoneToken), v))
	})
}

// PhoneTokenLTE applies the LTE predicate on the "phone_token" field.
func PhoneTokenLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhoneToken), v))
	})
}

// PhoneTokenContains applies the Contains predicate on the "phone_token" field.
func PhoneTokenContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhoneToken), v))
	})
}

// PhoneTokenHasPrefix applies the HasPrefix predicate on the "phone_token" field.
func PhoneTokenHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhoneToken), v))
	})
}

// PhoneTokenHasSuffix applies the HasSuffix predicate on the "phone_token" field.
func PhoneTokenHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhoneToken), v))
	})
}

// PhoneTokenEqualFold applies the EqualFold predicate on the "phone_token" field.
func PhoneTokenEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhoneToken), v))
	})
}

// PhoneTokenContainsFold applies the ContainsFold predicate on the "phone_token" field.
func PhoneTokenContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhoneToken), v))
	})
}

// FacebookEQ applies the EQ predicate on the "facebook" field.
func FacebookEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFacebook), v))
	})
}

// FacebookNEQ applies the NEQ predicate on the "facebook" field.
func FacebookNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFacebook), v))
	})
}

// FacebookIn applies the In predicate on the "facebook" field.
func FacebookIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFacebook), v...))
	})
}

// FacebookNotIn applies the NotIn predicate on the "facebook" field.
func FacebookNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFacebook), v...))
	})
}

// FacebookGT applies the GT predicate on the "facebook" field.
func FacebookGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFacebook), v))
	})
}

// FacebookGTE applies the GTE predicate on the "facebook" field.
func FacebookGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFacebook), v))
	})
}

// FacebookLT applies the LT predicate on the "facebook" field.
func FacebookLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFacebook), v))
	})
}

// FacebookLTE applies the LTE predicate on the "facebook" field.
func FacebookLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFacebook), v))
	})
}

// FacebookContains applies the Contains predicate on the "facebook" field.
func FacebookContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFacebook), v))
	})
}

// FacebookHasPrefix applies the HasPrefix predicate on the "facebook" field.
func FacebookHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFacebook), v))
	})
}

// FacebookHasSuffix applies the HasSuffix predicate on the "facebook" field.
func FacebookHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFacebook), v))
	})
}

// FacebookEqualFold applies the EqualFold predicate on the "facebook" field.
func FacebookEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFacebook), v))
	})
}

// FacebookContainsFold applies the ContainsFold predicate on the "facebook" field.
func FacebookContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFacebook), v))
	})
}

// LineEQ applies the EQ predicate on the "line" field.
func LineEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLine), v))
	})
}

// LineNEQ applies the NEQ predicate on the "line" field.
func LineNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLine), v))
	})
}

// LineIn applies the In predicate on the "line" field.
func LineIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLine), v...))
	})
}

// LineNotIn applies the NotIn predicate on the "line" field.
func LineNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLine), v...))
	})
}

// LineGT applies the GT predicate on the "line" field.
func LineGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLine), v))
	})
}

// LineGTE applies the GTE predicate on the "line" field.
func LineGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLine), v))
	})
}

// LineLT applies the LT predicate on the "line" field.
func LineLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLine), v))
	})
}

// LineLTE applies the LTE predicate on the "line" field.
func LineLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLine), v))
	})
}

// LineContains applies the Contains predicate on the "line" field.
func LineContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLine), v))
	})
}

// LineHasPrefix applies the HasPrefix predicate on the "line" field.
func LineHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLine), v))
	})
}

// LineHasSuffix applies the HasSuffix predicate on the "line" field.
func LineHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLine), v))
	})
}

// LineEqualFold applies the EqualFold predicate on the "line" field.
func LineEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLine), v))
	})
}

// LineContainsFold applies the ContainsFold predicate on the "line" field.
func LineContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLine), v))
	})
}

// WeiboEQ applies the EQ predicate on the "weibo" field.
func WeiboEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWeibo), v))
	})
}

// WeiboNEQ applies the NEQ predicate on the "weibo" field.
func WeiboNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWeibo), v))
	})
}

// WeiboIn applies the In predicate on the "weibo" field.
func WeiboIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWeibo), v...))
	})
}

// WeiboNotIn applies the NotIn predicate on the "weibo" field.
func WeiboNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWeibo), v...))
	})
}

// WeiboGT applies the GT predicate on the "weibo" field.
func WeiboGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWeibo), v))
	})
}

// WeiboGTE applies the GTE predicate on the "weibo" field.
func WeiboGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWeibo), v))
	})
}

// WeiboLT applies the LT predicate on the "weibo" field.
func WeiboLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWeibo), v))
	})
}

// WeiboLTE applies the LTE predicate on the "weibo" field.
func WeiboLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWeibo), v))
	})
}

// WeiboContains applies the Contains predicate on the "weibo" field.
func WeiboContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWeibo), v))
	})
}

// WeiboHasPrefix applies the HasPrefix predicate on the "weibo" field.
func WeiboHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWeibo), v))
	})
}

// WeiboHasSuffix applies the HasSuffix predicate on the "weibo" field.
func WeiboHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWeibo), v))
	})
}

// WeiboEqualFold applies the EqualFold predicate on the "weibo" field.
func WeiboEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWeibo), v))
	})
}

// WeiboContainsFold applies the ContainsFold predicate on the "weibo" field.
func WeiboContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWeibo), v))
	})
}

// GoogleEQ applies the EQ predicate on the "google" field.
func GoogleEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoogle), v))
	})
}

// GoogleNEQ applies the NEQ predicate on the "google" field.
func GoogleNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoogle), v))
	})
}

// GoogleIn applies the In predicate on the "google" field.
func GoogleIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoogle), v...))
	})
}

// GoogleNotIn applies the NotIn predicate on the "google" field.
func GoogleNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoogle), v...))
	})
}

// GoogleGT applies the GT predicate on the "google" field.
func GoogleGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoogle), v))
	})
}

// GoogleGTE applies the GTE predicate on the "google" field.
func GoogleGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoogle), v))
	})
}

// GoogleLT applies the LT predicate on the "google" field.
func GoogleLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoogle), v))
	})
}

// GoogleLTE applies the LTE predicate on the "google" field.
func GoogleLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoogle), v))
	})
}

// GoogleContains applies the Contains predicate on the "google" field.
func GoogleContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGoogle), v))
	})
}

// GoogleHasPrefix applies the HasPrefix predicate on the "google" field.
func GoogleHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGoogle), v))
	})
}

// GoogleHasSuffix applies the HasSuffix predicate on the "google" field.
func GoogleHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGoogle), v))
	})
}

// GoogleEqualFold applies the EqualFold predicate on the "google" field.
func GoogleEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGoogle), v))
	})
}

// GoogleContainsFold applies the ContainsFold predicate on the "google" field.
func GoogleContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGoogle), v))
	})
}

// InstagramEQ applies the EQ predicate on the "instagram" field.
func InstagramEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInstagram), v))
	})
}

// InstagramNEQ applies the NEQ predicate on the "instagram" field.
func InstagramNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInstagram), v))
	})
}

// InstagramIn applies the In predicate on the "instagram" field.
func InstagramIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInstagram), v...))
	})
}

// InstagramNotIn applies the NotIn predicate on the "instagram" field.
func InstagramNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInstagram), v...))
	})
}

// InstagramGT applies the GT predicate on the "instagram" field.
func InstagramGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInstagram), v))
	})
}

// InstagramGTE applies the GTE predicate on the "instagram" field.
func InstagramGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInstagram), v))
	})
}

// InstagramLT applies the LT predicate on the "instagram" field.
func InstagramLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInstagram), v))
	})
}

// InstagramLTE applies the LTE predicate on the "instagram" field.
func InstagramLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInstagram), v))
	})
}

// InstagramContains applies the Contains predicate on the "instagram" field.
func InstagramContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInstagram), v))
	})
}

// InstagramHasPrefix applies the HasPrefix predicate on the "instagram" field.
func InstagramHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInstagram), v))
	})
}

// InstagramHasSuffix applies the HasSuffix predicate on the "instagram" field.
func InstagramHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInstagram), v))
	})
}

// InstagramEqualFold applies the EqualFold predicate on the "instagram" field.
func InstagramEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInstagram), v))
	})
}

// InstagramContainsFold applies the ContainsFold predicate on the "instagram" field.
func InstagramContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInstagram), v))
	})
}

// LinkedinEQ applies the EQ predicate on the "linkedin" field.
func LinkedinEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLinkedin), v))
	})
}

// LinkedinNEQ applies the NEQ predicate on the "linkedin" field.
func LinkedinNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLinkedin), v))
	})
}

// LinkedinIn applies the In predicate on the "linkedin" field.
func LinkedinIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLinkedin), v...))
	})
}

// LinkedinNotIn applies the NotIn predicate on the "linkedin" field.
func LinkedinNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLinkedin), v...))
	})
}

// LinkedinGT applies the GT predicate on the "linkedin" field.
func LinkedinGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLinkedin), v))
	})
}

// LinkedinGTE applies the GTE predicate on the "linkedin" field.
func LinkedinGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLinkedin), v))
	})
}

// LinkedinLT applies the LT predicate on the "linkedin" field.
func LinkedinLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLinkedin), v))
	})
}

// LinkedinLTE applies the LTE predicate on the "linkedin" field.
func LinkedinLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLinkedin), v))
	})
}

// LinkedinContains applies the Contains predicate on the "linkedin" field.
func LinkedinContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLinkedin), v))
	})
}

// LinkedinHasPrefix applies the HasPrefix predicate on the "linkedin" field.
func LinkedinHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLinkedin), v))
	})
}

// LinkedinHasSuffix applies the HasSuffix predicate on the "linkedin" field.
func LinkedinHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLinkedin), v))
	})
}

// LinkedinEqualFold applies the EqualFold predicate on the "linkedin" field.
func LinkedinEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLinkedin), v))
	})
}

// LinkedinContainsFold applies the ContainsFold predicate on the "linkedin" field.
func LinkedinContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLinkedin), v))
	})
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLanguage), v))
	})
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLanguage), v))
	})
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLanguage), v...))
	})
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLanguage), v...))
	})
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLanguage), v))
	})
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLanguage), v))
	})
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLanguage), v))
	})
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLanguage), v))
	})
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLanguage), v))
	})
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLanguage), v))
	})
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLanguage), v))
	})
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLanguage), v))
	})
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLanguage), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// CountryCodeEQ applies the EQ predicate on the "country_code" field.
func CountryCodeEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCountryCode), v))
	})
}

// CountryCodeNEQ applies the NEQ predicate on the "country_code" field.
func CountryCodeNEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCountryCode), v))
	})
}

// CountryCodeIn applies the In predicate on the "country_code" field.
func CountryCodeIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCountryCode), v...))
	})
}

// CountryCodeNotIn applies the NotIn predicate on the "country_code" field.
func CountryCodeNotIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCountryCode), v...))
	})
}

// CountryCodeGT applies the GT predicate on the "country_code" field.
func CountryCodeGT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCountryCode), v))
	})
}

// CountryCodeGTE applies the GTE predicate on the "country_code" field.
func CountryCodeGTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCountryCode), v))
	})
}

// CountryCodeLT applies the LT predicate on the "country_code" field.
func CountryCodeLT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCountryCode), v))
	})
}

// CountryCodeLTE applies the LTE predicate on the "country_code" field.
func CountryCodeLTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCountryCode), v))
	})
}

// QrcodeEQ applies the EQ predicate on the "qrcode" field.
func QrcodeEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQrcode), v))
	})
}

// QrcodeNEQ applies the NEQ predicate on the "qrcode" field.
func QrcodeNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQrcode), v))
	})
}

// QrcodeIn applies the In predicate on the "qrcode" field.
func QrcodeIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQrcode), v...))
	})
}

// QrcodeNotIn applies the NotIn predicate on the "qrcode" field.
func QrcodeNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQrcode), v...))
	})
}

// QrcodeGT applies the GT predicate on the "qrcode" field.
func QrcodeGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQrcode), v))
	})
}

// QrcodeGTE applies the GTE predicate on the "qrcode" field.
func QrcodeGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQrcode), v))
	})
}

// QrcodeLT applies the LT predicate on the "qrcode" field.
func QrcodeLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQrcode), v))
	})
}

// QrcodeLTE applies the LTE predicate on the "qrcode" field.
func QrcodeLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQrcode), v))
	})
}

// QrcodeContains applies the Contains predicate on the "qrcode" field.
func QrcodeContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldQrcode), v))
	})
}

// QrcodeHasPrefix applies the HasPrefix predicate on the "qrcode" field.
func QrcodeHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldQrcode), v))
	})
}

// QrcodeHasSuffix applies the HasSuffix predicate on the "qrcode" field.
func QrcodeHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldQrcode), v))
	})
}

// QrcodeEqualFold applies the EqualFold predicate on the "qrcode" field.
func QrcodeEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldQrcode), v))
	})
}

// QrcodeContainsFold applies the ContainsFold predicate on the "qrcode" field.
func QrcodeContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldQrcode), v))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// BirthDateEQ applies the EQ predicate on the "birth_date" field.
func BirthDateEQ(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthDate), v))
	})
}

// BirthDateNEQ applies the NEQ predicate on the "birth_date" field.
func BirthDateNEQ(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBirthDate), v))
	})
}

// BirthDateIn applies the In predicate on the "birth_date" field.
func BirthDateIn(vs ...time.Time) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBirthDate), v...))
	})
}

// BirthDateNotIn applies the NotIn predicate on the "birth_date" field.
func BirthDateNotIn(vs ...time.Time) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBirthDate), v...))
	})
}

// BirthDateGT applies the GT predicate on the "birth_date" field.
func BirthDateGT(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBirthDate), v))
	})
}

// BirthDateGTE applies the GTE predicate on the "birth_date" field.
func BirthDateGTE(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBirthDate), v))
	})
}

// BirthDateLT applies the LT predicate on the "birth_date" field.
func BirthDateLT(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBirthDate), v))
	})
}

// BirthDateLTE applies the LTE predicate on the "birth_date" field.
func BirthDateLTE(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBirthDate), v))
	})
}

// SelfIntroductionEQ applies the EQ predicate on the "self_introduction" field.
func SelfIntroductionEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSelfIntroduction), v))
	})
}

// SelfIntroductionNEQ applies the NEQ predicate on the "self_introduction" field.
func SelfIntroductionNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSelfIntroduction), v))
	})
}

// SelfIntroductionIn applies the In predicate on the "self_introduction" field.
func SelfIntroductionIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSelfIntroduction), v...))
	})
}

// SelfIntroductionNotIn applies the NotIn predicate on the "self_introduction" field.
func SelfIntroductionNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSelfIntroduction), v...))
	})
}

// SelfIntroductionGT applies the GT predicate on the "self_introduction" field.
func SelfIntroductionGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSelfIntroduction), v))
	})
}

// SelfIntroductionGTE applies the GTE predicate on the "self_introduction" field.
func SelfIntroductionGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSelfIntroduction), v))
	})
}

// SelfIntroductionLT applies the LT predicate on the "self_introduction" field.
func SelfIntroductionLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSelfIntroduction), v))
	})
}

// SelfIntroductionLTE applies the LTE predicate on the "self_introduction" field.
func SelfIntroductionLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSelfIntroduction), v))
	})
}

// SelfIntroductionContains applies the Contains predicate on the "self_introduction" field.
func SelfIntroductionContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSelfIntroduction), v))
	})
}

// SelfIntroductionHasPrefix applies the HasPrefix predicate on the "self_introduction" field.
func SelfIntroductionHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSelfIntroduction), v))
	})
}

// SelfIntroductionHasSuffix applies the HasSuffix predicate on the "self_introduction" field.
func SelfIntroductionHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSelfIntroduction), v))
	})
}

// SelfIntroductionEqualFold applies the EqualFold predicate on the "self_introduction" field.
func SelfIntroductionEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSelfIntroduction), v))
	})
}

// SelfIntroductionContainsFold applies the ContainsFold predicate on the "self_introduction" field.
func SelfIntroductionContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSelfIntroduction), v))
	})
}

// CoverEQ applies the EQ predicate on the "cover" field.
func CoverEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCover), v))
	})
}

// CoverNEQ applies the NEQ predicate on the "cover" field.
func CoverNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCover), v))
	})
}

// CoverIn applies the In predicate on the "cover" field.
func CoverIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCover), v...))
	})
}

// CoverNotIn applies the NotIn predicate on the "cover" field.
func CoverNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCover), v...))
	})
}

// CoverGT applies the GT predicate on the "cover" field.
func CoverGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCover), v))
	})
}

// CoverGTE applies the GTE predicate on the "cover" field.
func CoverGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCover), v))
	})
}

// CoverLT applies the LT predicate on the "cover" field.
func CoverLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCover), v))
	})
}

// CoverLTE applies the LTE predicate on the "cover" field.
func CoverLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCover), v))
	})
}

// CoverContains applies the Contains predicate on the "cover" field.
func CoverContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCover), v))
	})
}

// CoverHasPrefix applies the HasPrefix predicate on the "cover" field.
func CoverHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCover), v))
	})
}

// CoverHasSuffix applies the HasSuffix predicate on the "cover" field.
func CoverHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCover), v))
	})
}

// CoverEqualFold applies the EqualFold predicate on the "cover" field.
func CoverEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCover), v))
	})
}

// CoverContainsFold applies the ContainsFold predicate on the "cover" field.
func CoverContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCover), v))
	})
}

// PhotoEQ applies the EQ predicate on the "photo" field.
func PhotoEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhoto), v))
	})
}

// PhotoNEQ applies the NEQ predicate on the "photo" field.
func PhotoNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhoto), v))
	})
}

// PhotoIn applies the In predicate on the "photo" field.
func PhotoIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPhoto), v...))
	})
}

// PhotoNotIn applies the NotIn predicate on the "photo" field.
func PhotoNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPhoto), v...))
	})
}

// PhotoGT applies the GT predicate on the "photo" field.
func PhotoGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhoto), v))
	})
}

// PhotoGTE applies the GTE predicate on the "photo" field.
func PhotoGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhoto), v))
	})
}

// PhotoLT applies the LT predicate on the "photo" field.
func PhotoLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhoto), v))
	})
}

// PhotoLTE applies the LTE predicate on the "photo" field.
func PhotoLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhoto), v))
	})
}

// PhotoContains applies the Contains predicate on the "photo" field.
func PhotoContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhoto), v))
	})
}

// PhotoHasPrefix applies the HasPrefix predicate on the "photo" field.
func PhotoHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhoto), v))
	})
}

// PhotoHasSuffix applies the HasSuffix predicate on the "photo" field.
func PhotoHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhoto), v))
	})
}

// PhotoIsNil applies the IsNil predicate on the "photo" field.
func PhotoIsNil() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPhoto)))
	})
}

// PhotoNotNil applies the NotNil predicate on the "photo" field.
func PhotoNotNil() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPhoto)))
	})
}

// PhotoEqualFold applies the EqualFold predicate on the "photo" field.
func PhotoEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhoto), v))
	})
}

// PhotoContainsFold applies the ContainsFold predicate on the "photo" field.
func PhotoContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhoto), v))
	})
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlatform), v))
	})
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlatform), v))
	})
}

// LastLoginTimeEQ applies the EQ predicate on the "last_login_time" field.
func LastLoginTimeEQ(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastLoginTime), v))
	})
}

// LastLoginTimeNEQ applies the NEQ predicate on the "last_login_time" field.
func LastLoginTimeNEQ(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastLoginTime), v))
	})
}

// LastLoginTimeIn applies the In predicate on the "last_login_time" field.
func LastLoginTimeIn(vs ...time.Time) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastLoginTime), v...))
	})
}

// LastLoginTimeNotIn applies the NotIn predicate on the "last_login_time" field.
func LastLoginTimeNotIn(vs ...time.Time) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastLoginTime), v...))
	})
}

// LastLoginTimeGT applies the GT predicate on the "last_login_time" field.
func LastLoginTimeGT(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastLoginTime), v))
	})
}

// LastLoginTimeGTE applies the GTE predicate on the "last_login_time" field.
func LastLoginTimeGTE(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastLoginTime), v))
	})
}

// LastLoginTimeLT applies the LT predicate on the "last_login_time" field.
func LastLoginTimeLT(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastLoginTime), v))
	})
}

// LastLoginTimeLTE applies the LTE predicate on the "last_login_time" field.
func LastLoginTimeLTE(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastLoginTime), v))
	})
}

// CreditEQ applies the EQ predicate on the "credit" field.
func CreditEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCredit), v))
	})
}

// CreditNEQ applies the NEQ predicate on the "credit" field.
func CreditNEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCredit), v))
	})
}

// CreditIn applies the In predicate on the "credit" field.
func CreditIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCredit), v...))
	})
}

// CreditNotIn applies the NotIn predicate on the "credit" field.
func CreditNotIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCredit), v...))
	})
}

// CreditGT applies the GT predicate on the "credit" field.
func CreditGT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCredit), v))
	})
}

// CreditGTE applies the GTE predicate on the "credit" field.
func CreditGTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCredit), v))
	})
}

// CreditLT applies the LT predicate on the "credit" field.
func CreditLT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCredit), v))
	})
}

// CreditLTE applies the LTE predicate on the "credit" field.
func CreditLTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCredit), v))
	})
}

// HeatNumEQ applies the EQ predicate on the "heat_num" field.
func HeatNumEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeatNum), v))
	})
}

// HeatNumNEQ applies the NEQ predicate on the "heat_num" field.
func HeatNumNEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeatNum), v))
	})
}

// HeatNumIn applies the In predicate on the "heat_num" field.
func HeatNumIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHeatNum), v...))
	})
}

// HeatNumNotIn applies the NotIn predicate on the "heat_num" field.
func HeatNumNotIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHeatNum), v...))
	})
}

// HeatNumGT applies the GT predicate on the "heat_num" field.
func HeatNumGT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeatNum), v))
	})
}

// HeatNumGTE applies the GTE predicate on the "heat_num" field.
func HeatNumGTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeatNum), v))
	})
}

// HeatNumLT applies the LT predicate on the "heat_num" field.
func HeatNumLT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeatNum), v))
	})
}

// HeatNumLTE applies the LTE predicate on the "heat_num" field.
func HeatNumLTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeatNum), v))
	})
}

// DesignerIDEQ applies the EQ predicate on the "designer_id" field.
func DesignerIDEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDesignerID), v))
	})
}

// DesignerIDNEQ applies the NEQ predicate on the "designer_id" field.
func DesignerIDNEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDesignerID), v))
	})
}

// DesignerIDIn applies the In predicate on the "designer_id" field.
func DesignerIDIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDesignerID), v...))
	})
}

// DesignerIDNotIn applies the NotIn predicate on the "designer_id" field.
func DesignerIDNotIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDesignerID), v...))
	})
}

// DesignerIDGT applies the GT predicate on the "designer_id" field.
func DesignerIDGT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDesignerID), v))
	})
}

// DesignerIDGTE applies the GTE predicate on the "designer_id" field.
func DesignerIDGTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDesignerID), v))
	})
}

// DesignerIDLT applies the LT predicate on the "designer_id" field.
func DesignerIDLT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDesignerID), v))
	})
}

// DesignerIDLTE applies the LTE predicate on the "designer_id" field.
func DesignerIDLTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDesignerID), v))
	})
}

// IdentityEQ applies the EQ predicate on the "identity" field.
func IdentityEQ(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdentity), v))
	})
}

// IdentityNEQ applies the NEQ predicate on the "identity" field.
func IdentityNEQ(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIdentity), v))
	})
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLevel), v))
	})
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLevel), v...))
	})
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLevel), v...))
	})
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLevel), v))
	})
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLevel), v))
	})
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLevel), v))
	})
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLevel), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// ChainWalletIDEQ applies the EQ predicate on the "chain_wallet_id" field.
func ChainWalletIDEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChainWalletID), v))
	})
}

// ChainWalletIDNEQ applies the NEQ predicate on the "chain_wallet_id" field.
func ChainWalletIDNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChainWalletID), v))
	})
}

// ChainWalletIDIn applies the In predicate on the "chain_wallet_id" field.
func ChainWalletIDIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChainWalletID), v...))
	})
}

// ChainWalletIDNotIn applies the NotIn predicate on the "chain_wallet_id" field.
func ChainWalletIDNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChainWalletID), v...))
	})
}

// ChainWalletIDGT applies the GT predicate on the "chain_wallet_id" field.
func ChainWalletIDGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChainWalletID), v))
	})
}

// ChainWalletIDGTE applies the GTE predicate on the "chain_wallet_id" field.
func ChainWalletIDGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChainWalletID), v))
	})
}

// ChainWalletIDLT applies the LT predicate on the "chain_wallet_id" field.
func ChainWalletIDLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChainWalletID), v))
	})
}

// ChainWalletIDLTE applies the LTE predicate on the "chain_wallet_id" field.
func ChainWalletIDLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChainWalletID), v))
	})
}

// ChainWalletIDContains applies the Contains predicate on the "chain_wallet_id" field.
func ChainWalletIDContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChainWalletID), v))
	})
}

// ChainWalletIDHasPrefix applies the HasPrefix predicate on the "chain_wallet_id" field.
func ChainWalletIDHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChainWalletID), v))
	})
}

// ChainWalletIDHasSuffix applies the HasSuffix predicate on the "chain_wallet_id" field.
func ChainWalletIDHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChainWalletID), v))
	})
}

// ChainWalletIDEqualFold applies the EqualFold predicate on the "chain_wallet_id" field.
func ChainWalletIDEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChainWalletID), v))
	})
}

// ChainWalletIDContainsFold applies the ContainsFold predicate on the "chain_wallet_id" field.
func ChainWalletIDContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChainWalletID), v))
	})
}

// DiscordAidEQ applies the EQ predicate on the "discord_aid" field.
func DiscordAidEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscordAid), v))
	})
}

// DiscordAidNEQ applies the NEQ predicate on the "discord_aid" field.
func DiscordAidNEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscordAid), v))
	})
}

// DiscordAidIn applies the In predicate on the "discord_aid" field.
func DiscordAidIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDiscordAid), v...))
	})
}

// DiscordAidNotIn applies the NotIn predicate on the "discord_aid" field.
func DiscordAidNotIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDiscordAid), v...))
	})
}

// DiscordAidGT applies the GT predicate on the "discord_aid" field.
func DiscordAidGT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscordAid), v))
	})
}

// DiscordAidGTE applies the GTE predicate on the "discord_aid" field.
func DiscordAidGTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscordAid), v))
	})
}

// DiscordAidLT applies the LT predicate on the "discord_aid" field.
func DiscordAidLT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscordAid), v))
	})
}

// DiscordAidLTE applies the LTE predicate on the "discord_aid" field.
func DiscordAidLTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscordAid), v))
	})
}

// TicketBalanceEQ applies the EQ predicate on the "ticket_balance" field.
func TicketBalanceEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTicketBalance), v))
	})
}

// TicketBalanceNEQ applies the NEQ predicate on the "ticket_balance" field.
func TicketBalanceNEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTicketBalance), v))
	})
}

// TicketBalanceIn applies the In predicate on the "ticket_balance" field.
func TicketBalanceIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTicketBalance), v...))
	})
}

// TicketBalanceNotIn applies the NotIn predicate on the "ticket_balance" field.
func TicketBalanceNotIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTicketBalance), v...))
	})
}

// TicketBalanceGT applies the GT predicate on the "ticket_balance" field.
func TicketBalanceGT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTicketBalance), v))
	})
}

// TicketBalanceGTE applies the GTE predicate on the "ticket_balance" field.
func TicketBalanceGTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTicketBalance), v))
	})
}

// TicketBalanceLT applies the LT predicate on the "ticket_balance" field.
func TicketBalanceLT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTicketBalance), v))
	})
}

// TicketBalanceLTE applies the LTE predicate on the "ticket_balance" field.
func TicketBalanceLTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTicketBalance), v))
	})
}

// OhdatTicketBalanceEQ applies the EQ predicate on the "ohdat_ticket_balance" field.
func OhdatTicketBalanceEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOhdatTicketBalance), v))
	})
}

// OhdatTicketBalanceNEQ applies the NEQ predicate on the "ohdat_ticket_balance" field.
func OhdatTicketBalanceNEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOhdatTicketBalance), v))
	})
}

// OhdatTicketBalanceIn applies the In predicate on the "ohdat_ticket_balance" field.
func OhdatTicketBalanceIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOhdatTicketBalance), v...))
	})
}

// OhdatTicketBalanceNotIn applies the NotIn predicate on the "ohdat_ticket_balance" field.
func OhdatTicketBalanceNotIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOhdatTicketBalance), v...))
	})
}

// OhdatTicketBalanceGT applies the GT predicate on the "ohdat_ticket_balance" field.
func OhdatTicketBalanceGT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOhdatTicketBalance), v))
	})
}

// OhdatTicketBalanceGTE applies the GTE predicate on the "ohdat_ticket_balance" field.
func OhdatTicketBalanceGTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOhdatTicketBalance), v))
	})
}

// OhdatTicketBalanceLT applies the LT predicate on the "ohdat_ticket_balance" field.
func OhdatTicketBalanceLT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOhdatTicketBalance), v))
	})
}

// OhdatTicketBalanceLTE applies the LTE predicate on the "ohdat_ticket_balance" field.
func OhdatTicketBalanceLTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOhdatTicketBalance), v))
	})
}

// SpaceExpeditionChanceEQ applies the EQ predicate on the "space_expedition_chance" field.
func SpaceExpeditionChanceEQ(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpaceExpeditionChance), v))
	})
}

// SpaceExpeditionChanceNEQ applies the NEQ predicate on the "space_expedition_chance" field.
func SpaceExpeditionChanceNEQ(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpaceExpeditionChance), v))
	})
}

// BambLockedBalanceEQ applies the EQ predicate on the "bamb_locked_balance" field.
func BambLockedBalanceEQ(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBambLockedBalance), v))
	})
}

// BambLockedBalanceNEQ applies the NEQ predicate on the "bamb_locked_balance" field.
func BambLockedBalanceNEQ(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBambLockedBalance), v))
	})
}

// BambLockedBalanceIn applies the In predicate on the "bamb_locked_balance" field.
func BambLockedBalanceIn(vs ...float64) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBambLockedBalance), v...))
	})
}

// BambLockedBalanceNotIn applies the NotIn predicate on the "bamb_locked_balance" field.
func BambLockedBalanceNotIn(vs ...float64) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBambLockedBalance), v...))
	})
}

// BambLockedBalanceGT applies the GT predicate on the "bamb_locked_balance" field.
func BambLockedBalanceGT(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBambLockedBalance), v))
	})
}

// BambLockedBalanceGTE applies the GTE predicate on the "bamb_locked_balance" field.
func BambLockedBalanceGTE(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBambLockedBalance), v))
	})
}

// BambLockedBalanceLT applies the LT predicate on the "bamb_locked_balance" field.
func BambLockedBalanceLT(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBambLockedBalance), v))
	})
}

// BambLockedBalanceLTE applies the LTE predicate on the "bamb_locked_balance" field.
func BambLockedBalanceLTE(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBambLockedBalance), v))
	})
}

// BambClaimableBalanceEQ applies the EQ predicate on the "bamb_claimable_balance" field.
func BambClaimableBalanceEQ(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBambClaimableBalance), v))
	})
}

// BambClaimableBalanceNEQ applies the NEQ predicate on the "bamb_claimable_balance" field.
func BambClaimableBalanceNEQ(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBambClaimableBalance), v))
	})
}

// BambClaimableBalanceIn applies the In predicate on the "bamb_claimable_balance" field.
func BambClaimableBalanceIn(vs ...float64) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBambClaimableBalance), v...))
	})
}

// BambClaimableBalanceNotIn applies the NotIn predicate on the "bamb_claimable_balance" field.
func BambClaimableBalanceNotIn(vs ...float64) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBambClaimableBalance), v...))
	})
}

// BambClaimableBalanceGT applies the GT predicate on the "bamb_claimable_balance" field.
func BambClaimableBalanceGT(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBambClaimableBalance), v))
	})
}

// BambClaimableBalanceGTE applies the GTE predicate on the "bamb_claimable_balance" field.
func BambClaimableBalanceGTE(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBambClaimableBalance), v))
	})
}

// BambClaimableBalanceLT applies the LT predicate on the "bamb_claimable_balance" field.
func BambClaimableBalanceLT(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBambClaimableBalance), v))
	})
}

// BambClaimableBalanceLTE applies the LTE predicate on the "bamb_claimable_balance" field.
func BambClaimableBalanceLTE(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBambClaimableBalance), v))
	})
}

// BambStakingEQ applies the EQ predicate on the "bamb_staking" field.
func BambStakingEQ(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBambStaking), v))
	})
}

// BambStakingNEQ applies the NEQ predicate on the "bamb_staking" field.
func BambStakingNEQ(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBambStaking), v))
	})
}

// BambStakingIn applies the In predicate on the "bamb_staking" field.
func BambStakingIn(vs ...float64) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBambStaking), v...))
	})
}

// BambStakingNotIn applies the NotIn predicate on the "bamb_staking" field.
func BambStakingNotIn(vs ...float64) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBambStaking), v...))
	})
}

// BambStakingGT applies the GT predicate on the "bamb_staking" field.
func BambStakingGT(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBambStaking), v))
	})
}

// BambStakingGTE applies the GTE predicate on the "bamb_staking" field.
func BambStakingGTE(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBambStaking), v))
	})
}

// BambStakingLT applies the LT predicate on the "bamb_staking" field.
func BambStakingLT(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBambStaking), v))
	})
}

// BambStakingLTE applies the LTE predicate on the "bamb_staking" field.
func BambStakingLTE(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBambStaking), v))
	})
}

// BamblpStakingEQ applies the EQ predicate on the "bamblp_staking" field.
func BamblpStakingEQ(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBamblpStaking), v))
	})
}

// BamblpStakingNEQ applies the NEQ predicate on the "bamblp_staking" field.
func BamblpStakingNEQ(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBamblpStaking), v))
	})
}

// BamblpStakingIn applies the In predicate on the "bamblp_staking" field.
func BamblpStakingIn(vs ...float64) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBamblpStaking), v...))
	})
}

// BamblpStakingNotIn applies the NotIn predicate on the "bamblp_staking" field.
func BamblpStakingNotIn(vs ...float64) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBamblpStaking), v...))
	})
}

// BamblpStakingGT applies the GT predicate on the "bamblp_staking" field.
func BamblpStakingGT(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBamblpStaking), v))
	})
}

// BamblpStakingGTE applies the GTE predicate on the "bamblp_staking" field.
func BamblpStakingGTE(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBamblpStaking), v))
	})
}

// BamblpStakingLT applies the LT predicate on the "bamblp_staking" field.
func BamblpStakingLT(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBamblpStaking), v))
	})
}

// BamblpStakingLTE applies the LTE predicate on the "bamblp_staking" field.
func BamblpStakingLTE(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBamblpStaking), v))
	})
}

// BamblpCollectEQ applies the EQ predicate on the "bamblp_collect" field.
func BamblpCollectEQ(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBamblpCollect), v))
	})
}

// BamblpCollectNEQ applies the NEQ predicate on the "bamblp_collect" field.
func BamblpCollectNEQ(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBamblpCollect), v))
	})
}

// BamblpCollectIn applies the In predicate on the "bamblp_collect" field.
func BamblpCollectIn(vs ...float64) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBamblpCollect), v...))
	})
}

// BamblpCollectNotIn applies the NotIn predicate on the "bamblp_collect" field.
func BamblpCollectNotIn(vs ...float64) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBamblpCollect), v...))
	})
}

// BamblpCollectGT applies the GT predicate on the "bamblp_collect" field.
func BamblpCollectGT(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBamblpCollect), v))
	})
}

// BamblpCollectGTE applies the GTE predicate on the "bamblp_collect" field.
func BamblpCollectGTE(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBamblpCollect), v))
	})
}

// BamblpCollectLT applies the LT predicate on the "bamblp_collect" field.
func BamblpCollectLT(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBamblpCollect), v))
	})
}

// BamblpCollectLTE applies the LTE predicate on the "bamblp_collect" field.
func BamblpCollectLTE(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBamblpCollect), v))
	})
}

// ChipBalanceEQ applies the EQ predicate on the "chip_balance" field.
func ChipBalanceEQ(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChipBalance), v))
	})
}

// ChipBalanceNEQ applies the NEQ predicate on the "chip_balance" field.
func ChipBalanceNEQ(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChipBalance), v))
	})
}

// ChipBalanceIn applies the In predicate on the "chip_balance" field.
func ChipBalanceIn(vs ...float64) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldChipBalance), v...))
	})
}

// ChipBalanceNotIn applies the NotIn predicate on the "chip_balance" field.
func ChipBalanceNotIn(vs ...float64) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldChipBalance), v...))
	})
}

// ChipBalanceGT applies the GT predicate on the "chip_balance" field.
func ChipBalanceGT(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChipBalance), v))
	})
}

// ChipBalanceGTE applies the GTE predicate on the "chip_balance" field.
func ChipBalanceGTE(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChipBalance), v))
	})
}

// ChipBalanceLT applies the LT predicate on the "chip_balance" field.
func ChipBalanceLT(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChipBalance), v))
	})
}

// ChipBalanceLTE applies the LTE predicate on the "chip_balance" field.
func ChipBalanceLTE(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChipBalance), v))
	})
}

// BambooShootBalanceEQ applies the EQ predicate on the "bamboo_shoot_balance" field.
func BambooShootBalanceEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBambooShootBalance), v))
	})
}

// BambooShootBalanceNEQ applies the NEQ predicate on the "bamboo_shoot_balance" field.
func BambooShootBalanceNEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBambooShootBalance), v))
	})
}

// BambooShootBalanceIn applies the In predicate on the "bamboo_shoot_balance" field.
func BambooShootBalanceIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBambooShootBalance), v...))
	})
}

// BambooShootBalanceNotIn applies the NotIn predicate on the "bamboo_shoot_balance" field.
func BambooShootBalanceNotIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBambooShootBalance), v...))
	})
}

// BambooShootBalanceGT applies the GT predicate on the "bamboo_shoot_balance" field.
func BambooShootBalanceGT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBambooShootBalance), v))
	})
}

// BambooShootBalanceGTE applies the GTE predicate on the "bamboo_shoot_balance" field.
func BambooShootBalanceGTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBambooShootBalance), v))
	})
}

// BambooShootBalanceLT applies the LT predicate on the "bamboo_shoot_balance" field.
func BambooShootBalanceLT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBambooShootBalance), v))
	})
}

// BambooShootBalanceLTE applies the LTE predicate on the "bamboo_shoot_balance" field.
func BambooShootBalanceLTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBambooShootBalance), v))
	})
}

// PandaAirdropCountEQ applies the EQ predicate on the "panda_airdrop_count" field.
func PandaAirdropCountEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPandaAirdropCount), v))
	})
}

// PandaAirdropCountNEQ applies the NEQ predicate on the "panda_airdrop_count" field.
func PandaAirdropCountNEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPandaAirdropCount), v))
	})
}

// PandaAirdropCountIn applies the In predicate on the "panda_airdrop_count" field.
func PandaAirdropCountIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPandaAirdropCount), v...))
	})
}

// PandaAirdropCountNotIn applies the NotIn predicate on the "panda_airdrop_count" field.
func PandaAirdropCountNotIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPandaAirdropCount), v...))
	})
}

// PandaAirdropCountGT applies the GT predicate on the "panda_airdrop_count" field.
func PandaAirdropCountGT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPandaAirdropCount), v))
	})
}

// PandaAirdropCountGTE applies the GTE predicate on the "panda_airdrop_count" field.
func PandaAirdropCountGTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPandaAirdropCount), v))
	})
}

// PandaAirdropCountLT applies the LT predicate on the "panda_airdrop_count" field.
func PandaAirdropCountLT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPandaAirdropCount), v))
	})
}

// PandaAirdropCountLTE applies the LTE predicate on the "panda_airdrop_count" field.
func PandaAirdropCountLTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPandaAirdropCount), v))
	})
}

// FirstLoginEQ applies the EQ predicate on the "first_login" field.
func FirstLoginEQ(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstLogin), v))
	})
}

// FirstLoginNEQ applies the NEQ predicate on the "first_login" field.
func FirstLoginNEQ(v bool) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstLogin), v))
	})
}

// PassedSpaceExpeditionCountEQ applies the EQ predicate on the "passed_space_expedition_count" field.
func PassedSpaceExpeditionCountEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassedSpaceExpeditionCount), v))
	})
}

// PassedSpaceExpeditionCountNEQ applies the NEQ predicate on the "passed_space_expedition_count" field.
func PassedSpaceExpeditionCountNEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassedSpaceExpeditionCount), v))
	})
}

// PassedSpaceExpeditionCountIn applies the In predicate on the "passed_space_expedition_count" field.
func PassedSpaceExpeditionCountIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPassedSpaceExpeditionCount), v...))
	})
}

// PassedSpaceExpeditionCountNotIn applies the NotIn predicate on the "passed_space_expedition_count" field.
func PassedSpaceExpeditionCountNotIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPassedSpaceExpeditionCount), v...))
	})
}

// PassedSpaceExpeditionCountGT applies the GT predicate on the "passed_space_expedition_count" field.
func PassedSpaceExpeditionCountGT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassedSpaceExpeditionCount), v))
	})
}

// PassedSpaceExpeditionCountGTE applies the GTE predicate on the "passed_space_expedition_count" field.
func PassedSpaceExpeditionCountGTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassedSpaceExpeditionCount), v))
	})
}

// PassedSpaceExpeditionCountLT applies the LT predicate on the "passed_space_expedition_count" field.
func PassedSpaceExpeditionCountLT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassedSpaceExpeditionCount), v))
	})
}

// PassedSpaceExpeditionCountLTE applies the LTE predicate on the "passed_space_expedition_count" field.
func PassedSpaceExpeditionCountLTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassedSpaceExpeditionCount), v))
	})
}

// PassedSpaceExpeditionRewardEQ applies the EQ predicate on the "passed_space_expedition_reward" field.
func PassedSpaceExpeditionRewardEQ(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassedSpaceExpeditionReward), v))
	})
}

// PassedSpaceExpeditionRewardNEQ applies the NEQ predicate on the "passed_space_expedition_reward" field.
func PassedSpaceExpeditionRewardNEQ(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassedSpaceExpeditionReward), v))
	})
}

// PassedSpaceExpeditionRewardIn applies the In predicate on the "passed_space_expedition_reward" field.
func PassedSpaceExpeditionRewardIn(vs ...float64) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPassedSpaceExpeditionReward), v...))
	})
}

// PassedSpaceExpeditionRewardNotIn applies the NotIn predicate on the "passed_space_expedition_reward" field.
func PassedSpaceExpeditionRewardNotIn(vs ...float64) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPassedSpaceExpeditionReward), v...))
	})
}

// PassedSpaceExpeditionRewardGT applies the GT predicate on the "passed_space_expedition_reward" field.
func PassedSpaceExpeditionRewardGT(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassedSpaceExpeditionReward), v))
	})
}

// PassedSpaceExpeditionRewardGTE applies the GTE predicate on the "passed_space_expedition_reward" field.
func PassedSpaceExpeditionRewardGTE(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassedSpaceExpeditionReward), v))
	})
}

// PassedSpaceExpeditionRewardLT applies the LT predicate on the "passed_space_expedition_reward" field.
func PassedSpaceExpeditionRewardLT(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassedSpaceExpeditionReward), v))
	})
}

// PassedSpaceExpeditionRewardLTE applies the LTE predicate on the "passed_space_expedition_reward" field.
func PassedSpaceExpeditionRewardLTE(v float64) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassedSpaceExpeditionReward), v))
	})
}

// ReservedEQ applies the EQ predicate on the "reserved" field.
func ReservedEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReserved), v))
	})
}

// ReservedNEQ applies the NEQ predicate on the "reserved" field.
func ReservedNEQ(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReserved), v))
	})
}

// ReservedIn applies the In predicate on the "reserved" field.
func ReservedIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReserved), v...))
	})
}

// ReservedNotIn applies the NotIn predicate on the "reserved" field.
func ReservedNotIn(vs ...string) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReserved), v...))
	})
}

// ReservedGT applies the GT predicate on the "reserved" field.
func ReservedGT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReserved), v))
	})
}

// ReservedGTE applies the GTE predicate on the "reserved" field.
func ReservedGTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReserved), v))
	})
}

// ReservedLT applies the LT predicate on the "reserved" field.
func ReservedLT(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReserved), v))
	})
}

// ReservedLTE applies the LTE predicate on the "reserved" field.
func ReservedLTE(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReserved), v))
	})
}

// ReservedContains applies the Contains predicate on the "reserved" field.
func ReservedContains(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReserved), v))
	})
}

// ReservedHasPrefix applies the HasPrefix predicate on the "reserved" field.
func ReservedHasPrefix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReserved), v))
	})
}

// ReservedHasSuffix applies the HasSuffix predicate on the "reserved" field.
func ReservedHasSuffix(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReserved), v))
	})
}

// ReservedEqualFold applies the EqualFold predicate on the "reserved" field.
func ReservedEqualFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReserved), v))
	})
}

// ReservedContainsFold applies the ContainsFold predicate on the "reserved" field.
func ReservedContainsFold(v string) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReserved), v))
	})
}

// CentralizedBeerCapsBalanceEQ applies the EQ predicate on the "centralized_beer_caps_balance" field.
func CentralizedBeerCapsBalanceEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCentralizedBeerCapsBalance), v))
	})
}

// CentralizedBeerCapsBalanceNEQ applies the NEQ predicate on the "centralized_beer_caps_balance" field.
func CentralizedBeerCapsBalanceNEQ(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCentralizedBeerCapsBalance), v))
	})
}

// CentralizedBeerCapsBalanceIn applies the In predicate on the "centralized_beer_caps_balance" field.
func CentralizedBeerCapsBalanceIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCentralizedBeerCapsBalance), v...))
	})
}

// CentralizedBeerCapsBalanceNotIn applies the NotIn predicate on the "centralized_beer_caps_balance" field.
func CentralizedBeerCapsBalanceNotIn(vs ...int32) predicate.Account {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCentralizedBeerCapsBalance), v...))
	})
}

// CentralizedBeerCapsBalanceGT applies the GT predicate on the "centralized_beer_caps_balance" field.
func CentralizedBeerCapsBalanceGT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCentralizedBeerCapsBalance), v))
	})
}

// CentralizedBeerCapsBalanceGTE applies the GTE predicate on the "centralized_beer_caps_balance" field.
func CentralizedBeerCapsBalanceGTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCentralizedBeerCapsBalance), v))
	})
}

// CentralizedBeerCapsBalanceLT applies the LT predicate on the "centralized_beer_caps_balance" field.
func CentralizedBeerCapsBalanceLT(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCentralizedBeerCapsBalance), v))
	})
}

// CentralizedBeerCapsBalanceLTE applies the LTE predicate on the "centralized_beer_caps_balance" field.
func CentralizedBeerCapsBalanceLTE(v int32) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCentralizedBeerCapsBalance), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Account) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		p(s.Not())
	})
}
